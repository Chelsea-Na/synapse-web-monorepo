{"version":3,"file":"useFavorites-ed63f8d7.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/useFavorites.ts"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useQuery,\n  UseQueryOptions,\n  useInfiniteQuery,\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { EntityHeader, PaginatedResults } from '../../../synapseTypes'\nimport {\n  FavoriteSortBy,\n  FavoriteSortDirection,\n} from '../../../synapseTypes/FavoriteSortBy'\n\nconst FAVORITES_QUERY_KEY = 'favorites'\n\nexport function useIsFavorite(entityId: string) {\n  // TODO: Handle pagination - the default limit is 200\n  // It would probably make more sense to add a backend service to check if an entity ID is favorited\n  const { data: allFavorites, isLoading } = useGetFavorites()\n  const isFavorite = allFavorites?.results?.some(\n    favorite => favorite.id === entityId,\n  )\n  return { isFavorite, isLoading }\n}\n\nexport function useAddFavorite(\n  options?: UseMutationOptions<EntityHeader, SynapseClientError, string>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation({\n    ...options,\n    mutationFn: (entityId: string) =>\n      SynapseClient.addUserFavorite(entityId, accessToken),\n    mutationKey: ['addFavorite'],\n    onSuccess: async (data, variables, ctx) => {\n      await queryClient.invalidateQueries([FAVORITES_QUERY_KEY])\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useRemoveFavorite(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    ...options,\n    mutationFn: (entityId: string) =>\n      SynapseClient.removeUserFavorite(entityId, accessToken),\n    mutationKey: ['removeFavorite'],\n    onSuccess: async (data, variables, ctx) => {\n      await queryClient.invalidateQueries([FAVORITES_QUERY_KEY])\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useGetFavorites(\n  sort: FavoriteSortBy = 'FAVORITED_ON',\n  sortDirection: FavoriteSortDirection = 'DESC',\n  options?: UseQueryOptions<\n    PaginatedResults<EntityHeader>,\n    SynapseClientError,\n    PaginatedResults<EntityHeader>\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<PaginatedResults<EntityHeader>, SynapseClientError>(\n    [FAVORITES_QUERY_KEY, sort, sortDirection, accessToken],\n    () =>\n      SynapseClient.getUserFavorites(\n        accessToken,\n        undefined,\n        undefined,\n        sort,\n        sortDirection,\n      ),\n    options,\n  )\n}\n\nexport function useGetFavoritesInfinite(\n  sort: FavoriteSortBy = 'FAVORITED_ON',\n  sortDirection: FavoriteSortDirection = 'DESC',\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<EntityHeader>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 10\n\n  const { accessToken } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<EntityHeader>, SynapseClientError>(\n    [FAVORITES_QUERY_KEY, 'infinite', sort, sortDirection],\n    async context => {\n      return SynapseClient.getUserFavorites(\n        accessToken,\n        // pass the context.pageParam for the new offset\n        context.pageParam,\n        LIMIT,\n        sort,\n        sortDirection,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n"],"names":["FAVORITES_QUERY_KEY","useIsFavorite","entityId","allFavorites","isLoading","useGetFavorites","_a","favorite","useAddFavorite","options","accessToken","useSynapseContext","queryClient","useQueryClient","useMutation","SynapseClient.addUserFavorite","data","variables","ctx","useRemoveFavorite","SynapseClient.removeUserFavorite","sort","sortDirection","useQuery","SynapseClient.getUserFavorites","useGetFavoritesInfinite","useInfiniteQuery","context","lastPage","pages"],"mappings":"2LAkBA,MAAMA,EAAsB,YAErB,SAASC,EAAcC,EAAkB,OAG9C,KAAM,CAAE,KAAMC,EAAc,UAAAC,GAAcC,EAAgB,EAInD,MAAA,CAAE,YAHUC,EAAAH,GAAA,YAAAA,EAAc,UAAd,YAAAG,EAAuB,KACxCC,GAAYA,EAAS,KAAOL,GAET,UAAAE,EACvB,CAEO,SAASI,EACdC,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAClBC,EAAcC,IACpB,OAAOC,EAAY,CACjB,GAAGL,EACH,WAAaP,GACXa,EAA8Bb,EAAUQ,CAAW,EACrD,YAAa,CAAC,aAAa,EAC3B,UAAW,MAAOM,EAAMC,EAAWC,IAAQ,CAEzC,GADA,MAAMN,EAAY,kBAAkB,CAACZ,CAAmB,CAAC,EACrDS,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUO,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH,CAEO,SAASC,EACdV,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAClBC,EAAcC,IAEpB,OAAOC,EAAY,CACjB,GAAGL,EACH,WAAaP,GACXkB,EAAiClB,EAAUQ,CAAW,EACxD,YAAa,CAAC,gBAAgB,EAC9B,UAAW,MAAOM,EAAMC,EAAWC,IAAQ,CAEzC,GADA,MAAMN,EAAY,kBAAkB,CAACZ,CAAmB,CAAC,EACrDS,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUO,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH,CAEO,SAASb,EACdgB,EAAuB,eACvBC,EAAuC,OACvCb,EAKA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAY,EACL,CAACvB,EAAqBqB,EAAMC,EAAeZ,CAAW,EACtD,IACEc,EACEd,EACA,OACA,OACAW,EACAC,CACF,EACFb,CAAA,CAEJ,CAEO,SAASgB,EACdJ,EAAuB,eACvBC,EAAuC,OACvCb,EAIA,CAGM,KAAA,CAAE,YAAAC,GAAgBC,IAEjB,OAAAe,EACL,CAAC1B,EAAqB,WAAYqB,EAAMC,CAAa,EACrD,MAAMK,GACGH,EACLd,EAEAiB,EAAQ,UACR,GACAN,EACAC,CAAA,EAGJ,CACE,GAAGb,EACH,iBAAkB,CAACmB,EAAUC,IAAU,CACjC,GAAAD,EAAS,QAAQ,OAAS,EAAG,OAAOC,EAAM,OAAS,EAGzD,CACF,CAAA,CAEJ"}