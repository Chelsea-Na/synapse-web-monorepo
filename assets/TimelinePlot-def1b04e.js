import{a as N,j as s,F as H}from"./jsx-runtime-095bf462.js";import{r as _}from"./index-8db94870.js";import{x as Y}from"./SynapseClient-ddb0799f.js";import"./getEndpoint-ac94413e.js";import{b as j}from"./SynapseConstants-6bd6e040.js";import{a as b}from"./queryUtils-60986806.js";import{p as G,g as X}from"./SqlFunctions-046ae83c.js";import{a as $}from"./useGetQueryResultBundle-42117ede.js";import{c as J,P as Z}from"./factory-275e83af.js";import{d as ee}from"./dayjs.min-59ef0ea6.js";import{O as re,p as te,N as se}from"./ObservationCard-4b0b3aa8.js";import{D as oe}from"./Dialog-f0c80819.js";import{g as k}from"./ColorGradient-3d3e1969.js";import{r as ae}from"./react-sizeme-5bfc490a.js";import{B as y}from"./Box-074128da.js";import{T as ne}from"./Typography-c5b8eeae.js";import"./LeftRightPanel-6384c215.js";import{S as ie}from"./StyledFormControl-76305f4d.js";import"./WideButton-21e8230b.js";import"./InputSizedButton-75fd41aa.js";import{I as le}from"./InputLabel-63a3d59c.js";import{S as ue}from"./Select-35930b21.js";import{M as de}from"./MenuItem-faea0340.js";import{S as M}from"./Skeleton-a24326d8.js";const ce="species",me="observationphase",U={concreteType:"org.sagebionetworks.repo.model.table.QueryResultBundle",queryResult:{concreteType:"org.sagebionetworks.repo.model.table.QueryResult",queryResults:{concreteType:"org.sagebionetworks.repo.model.table.RowSet",tableId:"syn52408661",etag:"a3270cb2-4373-4e12-9981-e12326e54ad1",headers:[{name:"species",columnType:"STRING",id:"152514"},{name:"observationPhase",columnType:"STRING",id:"197976"},{name:"observationPhaseOrder",columnType:"INTEGER",id:"198102"},{name:"observationTimeMax",columnType:"INTEGER",id:"198103"},{name:"observationTimeUnits",columnType:"STRING",id:"198101"}],rows:[{rowId:9,versionNumber:4,values:["Danio rerio","embryo","1","7","days"]},{rowId:10,versionNumber:4,values:["Danio rerio","larval","2","3","months"]},{rowId:11,versionNumber:4,values:["Danio rerio","juvenile","3","6","months"]},{rowId:12,versionNumber:4,values:["Danio rerio","adult","4","12","months"]},{rowId:16,versionNumber:4,values:["Drosophila","embryo","1","24","hours"]},{rowId:17,versionNumber:4,values:["Drosophila","larval","2","5","days"]},{rowId:18,versionNumber:4,values:["Drosophila","pupal","3","12","days"]},{rowId:19,versionNumber:4,values:["Drosophila","adult","4","5","weeks"]},{rowId:1,versionNumber:4,values:["Mus musculus","prenatal","1","21","days"]},{rowId:2,versionNumber:4,values:["Mus musculus","postnatal","2","6","months"]},{rowId:20,versionNumber:4,values:["Rattus norvegicus","prenatal","1","23","days"]},{rowId:21,versionNumber:4,values:["Rattus norvegicus","neonatal","2","4","weeks"]},{rowId:22,versionNumber:4,values:["Rattus norvegicus","weanling","3","2","months"]},{rowId:23,versionNumber:4,values:["Rattus norvegicus","juvenile","4","3","months"]},{rowId:24,versionNumber:4,values:["Rattus norvegicus","adolescent","5","6","months"]},{rowId:25,versionNumber:4,values:["Rattus norvegicus","adult","6","12","months"]},{rowId:13,versionNumber:4,values:["Saccharomyces","log phase","1","7","days"]},{rowId:14,versionNumber:4,values:["Saccharomyces","stationary phase","2","2","weeks"]},{rowId:15,versionNumber:4,values:["Saccharomyces","death phase","3","3","weeks"]},{rowId:3,versionNumber:4,values:["Sus scrofa","prenatal","1","115","days"]},{rowId:4,versionNumber:4,values:["Sus scrofa","neonatal","2","3","months"]},{rowId:5,versionNumber:4,values:["Sus scrofa","weanling","3","6","months"]},{rowId:6,versionNumber:4,values:["Sus scrofa","juvenile","4","12","months"]},{rowId:7,versionNumber:4,values:["Sus scrofa","adolescent","5","2","years"]},{rowId:8,versionNumber:4,values:["Sus scrofa","adult","6","3","years"]}]}}};var D;const pe=(D=U.queryResult)==null?void 0:D.queryResults.headers.findIndex(e=>e.name.toLowerCase()===ce);var Q;const T=(Q=U.queryResult)==null?void 0:Q.queryResults.headers.findIndex(e=>e.name.toLowerCase()===me),ye=J(Z),fe=(e,r,l,d)=>{let n=-1;return{timepoints:r.map((o,u)=>{const i=parseInt(o.values[l.time]),c=o.values[l.timeUnits];return o.rowId==d&&(n=u),e.add(i,c)}),hoverOverIndex:n}},P=e=>e.reduce((r,l)=>!r||l.isAfter(r)?l:r),he=(e,r)=>{const l=e.timepoints.reduce((n,t,o)=>{const u=n;return u[t.format()]||(u[t.format()]=[]),u[t.format()].push(r[o]),n},{});return e.timepoints.map((n,t)=>{const o=n.format(),u=t==e.hoverOverIndex,c=l[o].map(f=>f.rowId);return{x:[o,o,o],y:[0,.5,1],mode:"lines",line:{color:u?"black":"gray",width:2},customdata:[c,c,c],hoverinfo:"none"}})},ve=(e,r,l,d,n,t)=>{const o=[{x:e.add(1,"day").format(),y:-1,text:"                             ",showarrow:!1,textangle:"270",height:15}];if(d&&n&&t){const u=t>1?`(${t})`:"",i=e.add(d,n);o.push({x:i.format(),y:-1,text:`${d} ${te(n,d)} ${u}`,showarrow:!1,textangle:"270",height:15})}return{hovermode:"closest",dragmode:!1,showlegend:!1,xaxis:{showgrid:!1,showticklabels:!1,showline:!1,zeroline:!1},yaxis:{range:[-1,1],showgrid:!1,zeroline:!1,showline:!1,showticklabels:!1},annotations:o,shapes:[{type:"rect",x0:e.subtract(r.diff(e)/10).format(),x1:r.add(r.diff(e)/3).format(),y0:.25,y1:.75,fillcolor:l,opacity:.8,line:{width:0}}],margin:{l:0,r:0,t:60,b:60}}},C=({color:e,rowData:r,schema:l,widthPx:d})=>{const[n,t]=_.useState(),[o,u]=_.useState(),i=ee(),c=_.useRef(null),f=n==null?void 0:n.points[0].customdata,a=r.filter(p=>f==null?void 0:f.includes(p.rowId)),m=o==null?void 0:o.points[0].customdata,h=r.filter(p=>m==null?void 0:m.includes(p.rowId)),R=h&&h.length>0?parseInt(h[0].values[l.time]):void 0,E=h&&h.length>0?h[0].values[l.timeUnits]:void 0,x=fe(i,r,l,(m==null?void 0:m.length)>0?m[0]:void 0),q=P(x.timepoints);return N("div",{ref:c,children:[s(ye,{style:{width:d,height:"220px"},data:he(x,r),layout:ve(i,q,e,R,E,h.length),config:{displayModeBar:!1},useResizeHandler:!0,onClick:p=>{t(p),u(void 0)},onHover:p=>{u(p)},onUnhover:()=>{u(void 0)}}),a&&s(oe,{onClose:()=>t(void 0),open:!!a&&a.length>0,children:a.map(p=>s(re,{data:p.values,schema:l,includePortalCardClass:!1},p.rowId))})]})};try{P.displayName="getMaxDate",P.__docgenInfo={description:"",displayName:"getMaxDate",props:{}}}catch{}try{C.displayName="TimelinePhase",C.__docgenInfo={description:"",displayName:"TimelinePhase",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},color:{defaultValue:null,description:"",name:"color",required:!0,type:{name:"string"}},rowData:{defaultValue:null,description:"",name:"rowData",required:!0,type:{name:"Row[]"}},schema:{defaultValue:null,description:"",name:"schema",required:!0,type:{name:"ObservationCardSchema"}},widthPx:{defaultValue:null,description:"",name:"widthPx",required:!0,type:{name:"number"}}}}}catch{}const A=({color:e,phaseName:r})=>N(y,{sx:{display:"flex",alignItems:"center",gap:"7px"},children:[s(y,{sx:{backgroundColor:e,width:"20px",height:"20px"}}),s(ne,{variant:"body1",children:r==null?void 0:r.toUpperCase()})]});try{A.displayName="TimelineLegendItem",A.__docgenInfo={description:"",displayName:"TimelineLegendItem",props:{color:{defaultValue:null,description:"",name:"color",required:!0,type:{name:"string"}},phaseName:{defaultValue:null,description:"",name:"phaseName",required:!0,type:{name:"string | null"}}}}}catch{}const L=({sql:e,additionalFilters:r=[],species:l,setSpecies:d})=>{var c,f;const n=G(e),t=$({entityId:n,query:{sql:`SELECT species FROM ${n} WHERE species IS NOT null GROUP BY species`,additionalFilters:r},partMask:j,concreteType:"org.sagebionetworks.repo.model.table.QueryBundleRequest"}),{data:o,isLoading:u}=t,i=(f=(c=o==null?void 0:o.queryResult)==null?void 0:c.queryResults)==null?void 0:f.rows;return _.useEffect(()=>{i&&d(i.length>0?i[0].values[0]:null)},[i,d]),u||!i||i.length<2?s(H,{}):s(y,{children:N(ie,{children:[s(le,{children:"Species"}),s(ue,{sx:{marginLeft:"2px",marginBottom:"2px"},value:l,defaultValue:i[0].values[0],label:"Species",onChange:a=>d(a.target.value),children:i==null?void 0:i.map(a=>{const m=a.values[0];return s(de,{value:m,children:m},m)})})]})})};try{L.displayName="TimelinePlotSpeciesSelector",L.__docgenInfo={description:"",displayName:"TimelinePlotSpeciesSelector",props:{sql:{defaultValue:null,description:"",name:"sql",required:!0,type:{name:"string"}},additionalFilters:{defaultValue:{value:"[]"},description:"",name:"additionalFilters",required:!1,type:{name:"QueryFilter[]"}},species:{defaultValue:null,description:"",name:"species",required:!1,type:{name:"string | null"}},setSpecies:{defaultValue:null,description:"",name:"setSpecies",required:!0,type:{name:"Dispatch<SetStateAction<string | null | undefined>>"}}}}}catch{}const ge="phase",Ie="time",be="timeunits",Ne="submittername",_e="text",xe="tag",we="submitteruserid",F=({sql:e,searchParams:r,sqlOperator:l,defaultSpecies:d})=>{var V;const n=G(e),[t,o]=_.useState(d),u=X(n,r,l)??[],i=t?{columnName:"species",concreteType:"org.sagebionetworks.repo.model.table.ColumnSingleValueQueryFilter",values:[t],operator:Y.EQUAL}:void 0,c=[...u];i&&c.push(i);const f=$({entityId:n,query:{sql:`${e} WHERE observationTime IS NOT NULL`,sort:[{column:"observationTime",direction:"ASC"}],additionalFilters:c},partMask:j,concreteType:"org.sagebionetworks.repo.model.table.QueryBundleRequest"},{enabled:!!t}),{data:a,isLoading:m}=f;if(m)return s(Se,{});const h=b(ge,a),R=b(Ie,a),E=b(be,a),x=b(Ne,a),q=b(_e,a),p=b(xe,a),z=b(we,a),W={submitterName:x,submitterUserId:z,tag:p,text:q,time:R,timeUnits:E};let w=[];if(t){const g=(V=U.queryResult)==null?void 0:V.queryResults.rows.filter(I=>I.values[pe]==t);if(!g||g.length==0)return s(H,{});w=g.filter(I=>{var S;const v=(S=a==null?void 0:a.queryResult)==null?void 0:S.queryResults.rows.filter(O=>O.values[h]==I.values[T]);return(v==null?void 0:v.length)&&(v==null?void 0:v.length)>0})}return t===null?s(se,{}):N(y,{children:[N(y,{sx:{display:"flex",justifyContent:"space-between"},children:[s(y,{children:!d&&s(L,{setSpecies:o,species:t,sql:e,additionalFilters:u})}),s(y,{sx:{display:"flex",justifyContent:"flex-end",gap:"25px"},children:w.map((g,I)=>{const{colorPalette:v}=k(I,1);return s(A,{color:v[0],phaseName:g.values[T]},g.rowId)})})]}),t&&s(ae.SizeMe,{monitorWidth:!0,noPlaceholder:!0,children:({size:g})=>s(y,{sx:{display:"flex"},className:"forcePlotlyDefaultCursor",children:w.map((I,v)=>{var B;const{colorPalette:S}=k(v,1),O=(B=a==null?void 0:a.queryResult)==null?void 0:B.queryResults.rows.filter(K=>K.values[h]==I.values[T]);return s(C,{name:I.values[T],color:S[0],rowData:O,schema:W,widthPx:g.width?g.width/w.length:0},I.rowId)})})})]})},Se=()=>N(y,{children:[N(y,{sx:{display:"flex",justifyContent:"flex-end",gap:"10px"},children:[s(M,{height:"45px",width:"80px"}),s(M,{height:"45px",width:"80px"})]}),s(y,{sx:{display:"flex"},children:s(M,{height:"150px",width:"100%"})})]});try{F.displayName="TimelinePlot",F.__docgenInfo={description:"",displayName:"TimelinePlot",props:{sql:{defaultValue:null,description:"",name:"sql",required:!0,type:{name:"string"}},searchParams:{defaultValue:null,description:"",name:"searchParams",required:!1,type:{name:"Record<string, string>"}},sqlOperator:{defaultValue:null,description:"",name:"sqlOperator",required:!1,type:{name:"enum",value:[{value:'"LIKE"'},{value:'"EQUAL"'},{value:'"IN"'},{value:'"HAS"'},{value:'"HAS_LIKE"'}]}},defaultSpecies:{defaultValue:null,description:"",name:"defaultSpecies",required:!1,type:{name:"string"}}}}}catch{}export{F as T};
//# sourceMappingURL=TimelinePlot-def1b04e.js.map
