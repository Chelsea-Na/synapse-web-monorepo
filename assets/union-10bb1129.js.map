{"version":3,"file":"union-10bb1129.js","sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/differenceWith.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/toPath.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/union.js"],"sourcesContent":["import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nexport default differenceWith;\n","import arrayMap from './_arrayMap.js';\nimport copyArray from './_copyArray.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\nimport stringToPath from './_stringToPath.js';\nimport toKey from './_toKey.js';\nimport toString from './toString.js';\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nexport default toPath;\n","import baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nexport default union;\n"],"names":["differenceWith","baseRest","array","values","comparator","last","isArrayLikeObject","baseDifference","baseFlatten","differenceWith$1","toPath","value","isArray","arrayMap","toKey","isSymbol","copyArray","stringToPath","toString","union","arrays","baseUniq","union$1"],"mappings":"6bA6BA,IAAIA,EAAiBC,EAAS,SAASC,EAAOC,EAAQ,CACpD,IAAIC,EAAaC,EAAKF,CAAM,EAC5B,OAAIG,EAAkBF,CAAU,IAC9BA,EAAa,QAERE,EAAkBJ,CAAK,EAC1BK,EAAeL,EAAOM,EAAYL,EAAQ,EAAGG,EAAmB,EAAI,EAAG,OAAWF,CAAU,EAC5F,EACN,CAAC,EAED,MAAAK,EAAeT,ECdf,SAASU,EAAOC,EAAO,CACrB,OAAIC,EAAQD,CAAK,EACRE,EAASF,EAAOG,CAAK,EAEvBC,EAASJ,CAAK,EAAI,CAACA,CAAK,EAAIK,EAAUC,EAAaC,EAASP,CAAK,CAAC,CAAC,CAC5E,CCTA,IAAIQ,EAAQlB,EAAS,SAASmB,EAAQ,CACpC,OAAOC,EAASb,EAAYY,EAAQ,EAAGd,EAAmB,EAAI,CAAC,CACjE,CAAC,EAED,MAAAgB,EAAeH","x_google_ignoreList":[0,1,2]}