{"version":3,"file":"ForumThreadEditor-84aa3fb1.js","sources":["../../src/lib/utils/hooks/SynapseAPI/forum/useReply.ts","../../src/lib/utils/hooks/SynapseAPI/forum/useThread.ts","../../src/lib/utils/synapseTypes/MarkdownCommands.ts","../../src/lib/containers/markdown/UserMentionModal.tsx","../../src/lib/containers/markdown/MarkdownEditor.tsx","../../src/lib/containers/discussion_forum/ForumThreadEditor.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseMutationOptions,\n  useQueryClient,\n  useMutation,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  CreateDiscussionReply,\n  DiscussionFilter,\n  DiscussionReplyBundle,\n  DiscussionReplyOrder,\n  UpdateDiscussionReply,\n} from '../../../synapseTypes/DiscussionBundle'\nimport { PaginatedResults } from '../../../synapseTypes'\nimport { Match } from '../../../synapseTypes/DiscussionSearch'\n\nexport function useGetRepliesInfinite(\n  threadId: string,\n  ascending: boolean,\n  limit: number,\n  sort?: DiscussionReplyOrder,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >(\n    ['reply', threadId, limit, filter, sort, ascending],\n    async context => {\n      return SynapseClient.getReplies(\n        accessToken,\n        threadId,\n        limit,\n        context.pageParam,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n\nexport function useGetReply(\n  reply: DiscussionReplyBundle,\n  options?: UseQueryOptions<string, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryFn = async () => {\n    const messageUrl = await SynapseClient.getReplyMessageUrl(\n      reply.messageKey,\n      accessToken,\n    )\n    const data = await fetch(messageUrl.messageUrl, {\n      method: 'GET',\n      headers: {\n        Accept: '*/*',\n        'Access-Control-Request-Headers': 'authorization',\n        'Content-Type': 'text/plain; charset=utf-8',\n      },\n    })\n    return data.text()\n  }\n  return useQuery<string, SynapseClientError>(\n    ['reply', reply.threadId, reply.id, reply.messageKey],\n    queryFn,\n    options,\n  )\n}\n\nexport function usePostReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >(\n    (request: CreateDiscussionReply) =>\n      SynapseClient.postReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        await queryClient.invalidateQueries(['reply', newReply.threadId])\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePutReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >(\n    (request: UpdateDiscussionReply) =>\n      SynapseClient.putReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        queryClient.invalidateQueries(['reply', newReply.threadId])\n\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteReply(\n  options?: UseMutationOptions<void, SynapseClientError, Match>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, Match>(\n    (match: Match) => SynapseClient.deleteReply(accessToken, match.replyId),\n    {\n      ...options,\n      onSuccess: async (updatedReply, variables, ctx) => {\n        await queryClient.invalidateQueries(['reply', variables.threadId])\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import { useCallback } from 'react'\nimport {\n  UseQueryOptions,\n  useQuery,\n  UseMutationOptions,\n  useQueryClient,\n  useMutation,\n} from 'react-query'\nimport {\n  CreateDiscussionThread,\n  DiscussionThreadBundle,\n  UpdateThreadMessageRequest,\n  UpdateThreadTitleRequest,\n} from '../../../synapseTypes/DiscussionBundle'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\n\nexport function useGetThread(threadId: string) {\n  const { data: threadData, isLoading: isLoadingBundle } =\n    useGetThreadBundle(threadId)\n  const { data: threadBody, isLoading: isLoadingBody } = useGetThreadBody(\n    threadData!,\n    { enabled: !!threadData },\n  )\n  const { mutate: pinThread } = usePinThread()\n  const { mutate: unPinThread } = useUnPinThread()\n\n  const togglePin = useCallback(() => {\n    if (threadData) {\n      if (threadData?.isPinned) {\n        unPinThread(threadData)\n      } else {\n        pinThread(threadData)\n      }\n    }\n  }, [unPinThread, pinThread, threadData])\n\n  const isLoading = isLoadingBody || isLoadingBundle\n  return { threadData, threadBody, togglePin, isLoading }\n}\n\nexport function useGetThreadBundle(\n  threadId: string,\n  options?: UseQueryOptions<DiscussionThreadBundle, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<DiscussionThreadBundle, SynapseClientError>(\n    ['thread', threadId, accessToken],\n    () => SynapseClient.getThread(threadId, accessToken),\n    options,\n  )\n}\n\nexport function useGetThreadBody(\n  threadData: DiscussionThreadBundle,\n  options?: UseQueryOptions<string, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n\n  const queryFn = async () => {\n    const messageUrl = await SynapseClient.getThreadMessageUrl(\n      threadData.messageKey,\n      accessToken,\n    )\n    const data = await fetch(messageUrl.messageUrl, {\n      method: 'GET',\n      headers: {\n        Accept: '*/*',\n        'Access-Control-Request-Headers': 'authorization',\n        'Content-Type': 'text/plain; charset=utf-8',\n      },\n    })\n    return data.text()\n  }\n  return useQuery<string, SynapseClientError>(\n    ['thread', threadData?.id, threadData?.messageKey, accessToken],\n    queryFn,\n    options,\n  )\n}\n\nexport function useUpdateThreadTitle(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadTitleRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadTitleRequest\n  >(\n    (request: UpdateThreadTitleRequest) =>\n      SynapseClient.putThreadTitle(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (newThread, variables, ctx) => {\n        await queryClient.invalidateQueries(['forumthread', newThread.forumId])\n        await queryClient.invalidateQueries(['thread', variables.threadId])\n        if (options?.onSuccess) {\n          await options.onSuccess(newThread, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUpdateThreadMessage(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadMessageRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadMessageRequest\n  >(\n    (request: UpdateThreadMessageRequest) =>\n      SynapseClient.putThreadMessage(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (newThread, variables, ctx) => {\n        await queryClient.invalidateQueries(['thread', variables.threadId])\n        if (options?.onSuccess) {\n          await options.onSuccess(newThread, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateThread(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    CreateDiscussionThread\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    CreateDiscussionThread\n  >(\n    (newThread: CreateDiscussionThread) =>\n      SynapseClient.postThread(accessToken, newThread),\n    {\n      ...options,\n      onSuccess: async (threadBundle, newThreadRequest, ctx) => {\n        await queryClient.invalidateQueries([\n          'forumthread',\n          threadBundle.forumId,\n        ])\n        if (options?.onSuccess) {\n          await options.onSuccess(threadBundle, newThreadRequest, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.deleteThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries([\n          'forumthread',\n          threadBundle.forumId,\n        ])\n        await queryClient.invalidateQueries(['thread', threadBundle.id])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useRestoreThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.restoreThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries([\n          'forumthread',\n          threadBundle.forumId,\n        ])\n        await queryClient.invalidateQueries(['thread', threadBundle.id])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePinThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.pinThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(['thread', threadBundle.id])\n        await queryClient.invalidateQueries([\n          'forumthread',\n          threadBundle.forumId,\n        ])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUnPinThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.unPinThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(['thread', threadBundle.id])\n        await queryClient.invalidateQueries([\n          'forumthread',\n          threadBundle.forumId,\n        ])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n","export type MarkdownEditorCommandData = {\n  openSyntax: string\n  closeSyntax: string\n}\n\nexport const commandList = [\n  'title',\n  'bold',\n  'italic',\n  'strikethrough',\n  'code',\n  'latex',\n  'subscript',\n  'superscript',\n  'link',\n  'image',\n] as const\n\nexport type CommandListType = typeof commandList[number]\nexport type MarkdownEditorCommands = Record<\n  CommandListType,\n  MarkdownEditorCommandData\n>\n\nexport const MARKDOWN_COMMANDS_DATA: MarkdownEditorCommands = {\n  title: {\n    openSyntax: '###',\n    closeSyntax: '',\n  },\n  bold: {\n    openSyntax: '**',\n    closeSyntax: '**',\n  },\n  italic: {\n    openSyntax: '_',\n    closeSyntax: '_',\n  },\n  strikethrough: {\n    openSyntax: '--',\n    closeSyntax: '--',\n  },\n  code: {\n    openSyntax: '```',\n    closeSyntax: '```',\n  },\n  latex: {\n    openSyntax: '$$\\\\(',\n    closeSyntax: '\\\\)$$',\n  },\n  subscript: {\n    openSyntax: '~',\n    closeSyntax: '~',\n  },\n  superscript: {\n    openSyntax: '^',\n    closeSyntax: '^',\n  },\n  link: {\n    openSyntax: '[',\n    closeSyntax: '](url)',\n  },\n  image: {\n    openSyntax: '![',\n    closeSyntax: '](image-url)',\n  },\n}\n","import React, { useCallback } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { TYPE_FILTER, UserGroupHeader } from '../../utils/synapseTypes'\nimport UserSearchBoxV2 from '../UserSearchBoxV2'\n\nexport type UserMentionModalProps = {\n  show: boolean\n  onClose: () => void\n  handleUserTag: (user: string) => void\n}\n\nexport const UserMentionModal: React.FC<UserMentionModalProps> = ({\n  show,\n  onClose,\n  handleUserTag,\n}: UserMentionModalProps) => {\n  const onUserChange = useCallback(\n    (selected: string | null, header: UserGroupHeader | null) => {\n      if (selected && header) {\n        handleUserTag(header.userName)\n      }\n      onClose()\n    },\n    [onClose, handleUserTag],\n  )\n\n  return (\n    <>\n      <Modal show={show} onHide={onClose} backdrop=\"static\" animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Find User or Team</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <UserSearchBoxV2\n            placeholder=\"Search for a user or team name\"\n            onChange={onUserChange}\n            typeFilter={TYPE_FILTER.ALL}\n            focusOnSelect={true}\n          />\n        </Modal.Body>\n      </Modal>\n    </>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport {\n  commandList,\n  CommandListType,\n  MARKDOWN_COMMANDS_DATA,\n} from '../../utils/synapseTypes/MarkdownCommands'\nimport IconSvg from '../IconSvg'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { UserMentionModal } from './UserMentionModal'\nimport { startCase } from 'lodash-es'\n\nexport enum MarkdownEditorTabs {\n  WRITE = 'WRITE',\n  PREVIEW = 'PREVIEW',\n}\n\nexport type MarkdownEditorProps = {\n  placeholder?: string\n  text: string\n  setText: (text: string) => void\n}\n\nexport const MarkdownEditor: React.FunctionComponent<MarkdownEditorProps> = ({\n  placeholder,\n  text,\n  setText,\n}) => {\n  const [currentTab, setCurrentTab] = useState<MarkdownEditorTabs>(\n    MarkdownEditorTabs.WRITE,\n  )\n  const [selectionStart, setSelectionStart] = useState<number>(0)\n  const [isShowingTagModal, setIsShowingTagModal] = useState<boolean>(false)\n  const [tagModalWithKeyboard, setTagModalWithKeyboard] =\n    useState<boolean>(false)\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n\n  /**\n   * Updates the position of the cursor. This must occur within `useEffect` because we need to ensure that the\n   * cursor position is updated after the state of `text` is updated.\n   */\n  useEffect(() => {\n    const input = textAreaRef.current\n    if (input) {\n      input.setSelectionRange(selectionStart, selectionStart)\n    }\n  }, [textAreaRef, selectionStart])\n\n  useEffect(() => {\n    textAreaRef.current?.focus()\n  }, [isShowingTagModal])\n\n  const handleUserTag = (user: string) => {\n    const newText: string[] = []\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal?.selectionStart\n      const textBeforeTag = text.substring(0, start)\n      const textAfterTag = text.substring(start, text.length)\n      setSelectionStart(start + user.length + 1)\n      newText.push(\n        textBeforeTag,\n        `${tagModalWithKeyboard ? '' : '@'}${user.replace(/\\s/g, '')}`,\n        textAfterTag,\n      )\n    }\n    setText(newText.join(''))\n    setTagModalWithKeyboard(false)\n  }\n\n  const handleTagModal = (e: React.KeyboardEvent) => {\n    if (e.key == '@') {\n      setTagModalWithKeyboard(true)\n      setIsShowingTagModal(true)\n    }\n  }\n  const handleCommands = (command: CommandListType) => {\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal.selectionStart\n      const end = textVal.selectionEnd\n      const selected = text.substring(start, end)\n      const textBeforeSelection = text.substring(0, start)\n      const textAfterSelection = text.substring(end, text.length)\n\n      const openSyntax = MARKDOWN_COMMANDS_DATA[command].openSyntax\n      const closeSyntax = MARKDOWN_COMMANDS_DATA[command].closeSyntax\n\n      switch (command) {\n        case 'code': {\n          const newText: string[] = []\n          newText.push(\n            textBeforeSelection,\n            openSyntax,\n            selected,\n            closeSyntax,\n            textAfterSelection,\n          )\n\n          setText(newText.join('\\r\\n'))\n          textVal.focus()\n          // adds 2 due to new line\n          setSelectionStart(start + openSyntax.length + 2)\n          break\n        }\n        case 'title':\n        case 'bold':\n        case 'italic':\n        case 'strikethrough':\n        case 'latex':\n        case 'subscript':\n        case 'superscript':\n        case 'link':\n        case 'image': {\n          const newText = `${textBeforeSelection}${openSyntax}${selected}${closeSyntax}${textAfterSelection}`\n          textVal.focus()\n          setSelectionStart(start + openSyntax.length)\n          setText(newText)\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport MarkdownEditor\">\n      <div className=\"MarkdownEditorControls\">\n        <div className=\"Tabs\">\n          {Object.keys(MarkdownEditorTabs).map((tabName: string) => {\n            return (\n              <button\n                className=\"Tab\"\n                role=\"tab\"\n                aria-selected={tabName === currentTab}\n                key={tabName}\n                onClick={e => {\n                  e.stopPropagation()\n                  setCurrentTab(MarkdownEditorTabs[tabName])\n                }}\n              >\n                {tabName}\n              </button>\n            )\n          })}\n        </div>\n        {currentTab === MarkdownEditorTabs.WRITE && (\n          <div className=\"MarkdownEditorControlsToolbar\">\n            {commandList.map(type => {\n              return (\n                <button key={type} onClick={() => handleCommands(type)}>\n                  <IconSvg icon={type} label={startCase(type)} />\n                </button>\n              )\n            })}\n            <button onClick={() => setIsShowingTagModal(true)}>\n              <IconSvg icon=\"tag\" label=\"Mention\" />\n            </button>\n          </div>\n        )}\n      </div>\n      <div>\n        {currentTab === MarkdownEditorTabs.WRITE ? (\n          <textarea\n            onChange={e => setText(e.target.value)}\n            style={{ width: '100%' }}\n            rows={6}\n            value={text}\n            ref={textAreaRef}\n            placeholder={placeholder}\n            onKeyDown={handleTagModal}\n          />\n        ) : text ? (\n          <MarkdownSynapse markdown={text} />\n        ) : (\n          'Nothing to preview'\n        )}\n      </div>\n\n      <UserMentionModal\n        show={isShowingTagModal}\n        onClose={() => setIsShowingTagModal(false)}\n        handleUserTag={handleUserTag}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, FormControl } from 'react-bootstrap'\nimport {\n  useCreateThread,\n  useUpdateThreadTitle,\n  useUpdateThreadMessage,\n} from '../../utils/hooks/SynapseAPI/forum/useThread'\nimport {\n  usePostReply,\n  usePutReply,\n} from '../../utils/hooks/SynapseAPI/forum/useReply'\nimport { CreateDiscussionThread } from '../../utils/synapseTypes/DiscussionBundle'\nimport { MarkdownEditor } from '../markdown/MarkdownEditor'\n\nexport type ForumThreadEditorProps = {\n  initialTitle?: string\n  initialText?: string\n  id: string\n  onClose: () => void\n  isReply: boolean\n}\n\nexport const ForumThreadEditor: React.FunctionComponent<\n  ForumThreadEditorProps\n> = ({ initialText, initialTitle, id, onClose, isReply }) => {\n  const [title, setTitle] = useState<string>(initialTitle ?? '')\n  const [text, setText] = useState<string>(initialText ?? '')\n  const { mutate: updateTitle, isLoading: isLoadingTitle } =\n    useUpdateThreadTitle({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: updateMessage, isLoading: isLoadingMessage } =\n    useUpdateThreadMessage({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: createThread, isLoading: isLoadingThread } = useCreateThread({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: createReply, isLoading: isLoadingReply } = usePostReply({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: updateReply, isLoading: isLoadingReplyUpdate } = usePutReply({\n    onSuccess: () => onClose(),\n  })\n\n  const isLoading =\n    isLoadingMessage ||\n    isLoadingReply ||\n    isLoadingThread ||\n    isLoadingTitle ||\n    isLoadingReplyUpdate\n\n  const onSave = (text: string, title: string) => {\n    if (isReply) {\n      if (initialText) {\n        // updating reply\n        updateReply({\n          replyId: id,\n          messageMarkdown: text,\n        })\n      } else {\n        // posting reply\n        createReply({\n          threadId: id,\n          messageMarkdown: text,\n        })\n      }\n    } else {\n      if (initialTitle) {\n        // updating thread\n        updateTitle({\n          title: title,\n          threadId: id,\n        })\n        updateMessage({\n          messageMarkdown: text,\n          threadId: id,\n        })\n      } else {\n        // posting thread\n        const request: CreateDiscussionThread = {\n          forumId: id,\n          title: title,\n          messageMarkdown: text,\n        }\n        createThread(request)\n      }\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      {!isReply && (\n        <FormControl\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      )}\n      <MarkdownEditor text={text} setText={setText} />\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button onClick={onClose} variant=\"light\">\n          Cancel\n        </Button>\n        <Button\n          disabled={isLoading}\n          onClick={() => onSave(text, title)}\n          variant=\"primary\"\n        >\n          {isLoading ? 'Saving' : 'Save'}\n        </Button>\n      </div>\n    </div>\n  )\n}\n"],"names":["useGetRepliesInfinite","threadId","ascending","limit","sort","filter","options","accessToken","useSynapseContext","useInfiniteQuery","context","SynapseClient.getReplies","lastPage","pages","numberOfFetchedResults","page","useGetReply","reply","queryFn","messageUrl","SynapseClient.getReplyMessageUrl","useQuery","usePostReply","queryClient","useQueryClient","useMutation","request","SynapseClient.postReply","newReply","variables","ctx","usePutReply","SynapseClient.putReply","useDeleteReply","match","SynapseClient.deleteReply","updatedReply","useGetThread","threadData","isLoadingBundle","useGetThreadBundle","threadBody","isLoadingBody","useGetThreadBody","pinThread","usePinThread","unPinThread","useUnPinThread","togglePin","useCallback","SynapseClient.getThread","SynapseClient.getThreadMessageUrl","useUpdateThreadTitle","SynapseClient.putThreadTitle","newThread","useUpdateThreadMessage","SynapseClient.putThreadMessage","useCreateThread","SynapseClient.postThread","threadBundle","newThreadRequest","useDeleteThread","SynapseClient.deleteThread","updatedThread","useRestoreThread","SynapseClient.restoreThread","SynapseClient.pinThread","SynapseClient.unPinThread","commandList","MARKDOWN_COMMANDS_DATA","UserMentionModal","show","onClose","handleUserTag","onUserChange","selected","header","jsx","Fragment","jsxs","Modal","UserSearchBoxV2","TYPE_FILTER","MarkdownEditorTabs","MarkdownEditorTabs2","MarkdownEditor","placeholder","text","setText","currentTab","setCurrentTab","useState","selectionStart","setSelectionStart","isShowingTagModal","setIsShowingTagModal","tagModalWithKeyboard","setTagModalWithKeyboard","textAreaRef","useRef","useEffect","input","_a","user","newText","textVal","start","textBeforeTag","textAfterTag","handleTagModal","e","handleCommands","command","end","textBeforeSelection","textAfterSelection","openSyntax","closeSyntax","tabName","type","IconSvg","startCase","MarkdownSynapse","ForumThreadEditor","initialText","initialTitle","id","isReply","title","setTitle","updateTitle","isLoadingTitle","updateMessage","isLoadingMessage","createThread","isLoadingThread","createReply","isLoadingReply","updateReply","isLoadingReplyUpdate","isLoading","onSave","text2","title2","FormControl","Button"],"mappings":"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"}