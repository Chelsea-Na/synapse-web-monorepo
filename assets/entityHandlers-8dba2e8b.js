import{l as u}from"./index-24fd8d08.js";import{c as l,d as m,e as f,f as $,g as I,h as v,i as N,j as D,U as k}from"./SynapseClient-a66fb7a1.js";import{g as E,B as T}from"./getEndpoint-ac94413e.js";import{m as c}from"./index-85eb8e9d.js";import{M as S}from"./userProfileHandlers-ee0ab2e9.js";import{m as w}from"./mockSchema-819cb09c.js";const Y=y=>[u.rest.post(`${y}${l}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(s.body)}`};if(s.body){const e=s.body,r=c.find(a=>a.name===e.name);r?(o=r.entity,n=200):e.name===S&&(o.reason="Invalid project name",n=403)}return i(t.status(n),t.json(o))}),u.rest.get(`${y}${m(":entityId")}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity with ID ${s.params.entityId}`};const e=c.find(r=>r.id===s.params.entityId);return e&&(o=e.entity,n=200),i(t.status(n),t.json(o))}),u.rest.get(`${y}${f(":entityId")}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${s.params.entityId}`};const e=c.find(r=>r.id===s.params.entityId);return e&&e.versionInfo&&(o={results:e.versionInfo},n=200),i(t.status(n),t.json(o))}),u.rest.get(`${y}${$(":entityId",":versionNumber")}`,async(s,i,t)=>{let n=404;const o=s.params.entityId,e=s.params.versionNumber.toString(),r=parseInt(e);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${e}`};const d=c.find(p=>p.id===s.params.entityId);return d&&d.versions&&d.versions[r]&&(a=d.versions[r],n=200),i(t.status(n),t.json(a))}),u.rest.post(`${y}${I(":entityId")}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const e=c.find(r=>r.id===s.params.entityId);return e!=null&&e.bundle&&(o=e.bundle,n=200),i(t.status(n),t.json(o))}),u.rest.post(`${y}${I(":entityId",":versionNumber")}`,async(s,i,t)=>{const n=s.params.entityId,o=parseInt(s.params.versionNumber);let e=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${n}`};const a=c.find(d=>d.id===n);if(a){const d=a.bundle;a.versions&&a.versions[o]?r={...d,entity:a.versions[o]}:r=d,e=200}return i(t.status(e),t.json(r))}),u.rest.get(`${y}${v(":entityId")}`,async(s,i,t)=>i(t.status(200),t.json(w))),u.rest.get(`${y}${N(":entityId")}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const e=c.find(r=>r.id===s.params.entityId);return e!=null&&e.json&&(o=e.json,n=200),i(t.status(n),t.json(o))}),u.rest.post(`${y}${D}`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const e=s.body,r=c.filter(a=>e.references.find(d=>d.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return r&&(o={results:r},n=200),i(t.status(n),t.json(o))}),u.rest.get(`${y}${m(":entityId")}/path`,async(s,i,t)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${s.params.entityId}`};const e=c.find(r=>s.params.entityId===r.id);return e&&e.path&&(o=e.path,n=200),i(t.status(n),t.json(o))}),u.rest.get(`${E(T.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(s,i,t)=>{const n={banner:"",storageLocationId:1,uploadType:k.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return i(t.status(200),t.json(n))})];export{Y as g};
//# sourceMappingURL=entityHandlers-8dba2e8b.js.map
