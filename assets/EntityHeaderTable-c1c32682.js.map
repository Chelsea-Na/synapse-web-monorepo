{"version":3,"file":"EntityHeaderTable-c1c32682.js","sources":["../../src/components/EntityHeaderTable/DebouncedInput.tsx","../../src/components/EntityHeaderTable/Filter.tsx","../../src/components/EntityHeaderTable/EntityHeaderTableCellRenderers.tsx","../../src/assets/icons/AddAd.tsx","../../src/components/EntityHeaderTable/useEntityHeaderTableState.ts","../../src/components/EntityHeaderTable/EntityHeaderTable.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { TextField, TextFieldProps, Autocomplete } from '@mui/material'\nimport { useDebouncedEffect } from '../../utils/hooks'\n\n// A debounced input react component\n\nexport function DebouncedInput({\n  initialValue,\n  onChange,\n  options,\n  delay = 250,\n  ...textFieldProps\n}: {\n  initialValue: string\n  onChange: (value: string) => void\n  options: string[]\n  delay?: number\n} & Pick<\n  React.InputHTMLAttributes<TextFieldProps>,\n  'type' | 'min' | 'max' | 'value' | 'placeholder' | 'className' | 'list'\n>) {\n  const [value, setValue] = useState(initialValue)\n  useDebouncedEffect(\n    () => {\n      onChange(value)\n    },\n    [value],\n    delay,\n  )\n\n  return (\n    <Autocomplete\n      disablePortal\n      isOptionEqualToValue={(option, value) =>\n        value.length == 0 || option === value\n      }\n      options={options}\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue ?? '')\n      }}\n      sx={{ marginRight: '10px' }}\n      renderInput={params => (\n        <TextField\n          {...params}\n          {...textFieldProps}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { Column, Table } from '@tanstack/react-table'\nimport { DebouncedInput } from './DebouncedInput'\n\nexport function Filter({\n  column,\n  table,\n}: {\n  column: Column<any, unknown>\n  table: Table<any>\n}) {\n  const firstValue = table\n    .getPreFilteredRowModel()\n    .flatRows[0]?.getValue(column.id)\n\n  const columnFilterValue = (column.getFilterValue() as string) ?? ''\n\n  const sortedUniqueValues: string[] = React.useMemo(\n    () =>\n      typeof firstValue === 'number'\n        ? []\n        : Array.from(column.getFacetedUniqueValues().keys()).sort(),\n    [column.getFacetedUniqueValues()],\n  )\n  return (\n    <DebouncedInput\n      type=\"text\"\n      options={sortedUniqueValues}\n      initialValue={columnFilterValue}\n      onChange={value => column.setFilterValue(value)}\n      placeholder={`Filter by ${column.id}... (${\n        column.getFacetedUniqueValues().size\n      })`}\n      list={column.id + 'list'}\n    />\n  )\n}\n","import React from 'react'\nimport { CellContext, HeaderContext } from '@tanstack/react-table'\nimport { Checkbox, Link } from '@mui/material'\nimport { EntityLink } from '../EntityLink'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { EntityHeaderOrDummy } from './EntityHeaderTable'\nimport { Typography } from '@mui/material'\n\nexport function EntityHeaderNameCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  const { row } = cell\n  const { original } = row\n  const { id, isDummy } = original\n  return isDummy ? (\n    <Link href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${id}`}>\n      {id}\n    </Link>\n  ) : (\n    <EntityLink entity={original} />\n  )\n}\nexport function EntityHeaderIDCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  return <Typography variant=\"body1\">{cell.getContext().getValue()}</Typography>\n}\nexport function EntityHeaderTypeCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  return (\n    <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\n      {cell.getContext().getValue()}\n    </Typography>\n  )\n}\nexport function CheckBoxHeader(\n  props: HeaderContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { table } = props\n  return (\n    <Checkbox\n      checked={table.getIsAllRowsSelected()}\n      indeterminate={table.getIsSomeRowsSelected()}\n      onClick={table.getToggleAllRowsSelectedHandler()}\n    />\n  )\n}\nexport function CheckBoxCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { row } = props\n  return (\n    <Checkbox\n      checked={row.getIsSelected()}\n      disabled={!row.getCanSelect()}\n      indeterminate={row.getIsSomeSelected()}\n      onClick={row.getToggleSelectedHandler()}\n    />\n  )\n}\n","import React from 'react'\n\nconst AddAd = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <mask\n      id=\"mask0_6722_37828\"\n      style={{ maskType: 'alpha' }}\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      width=\"24\"\n      height=\"24\"\n    >\n      <rect width=\"24\" height=\"24\" fill=\"#D9D9D9\" />\n    </mask>\n    <g mask=\"url(#mask0_6722_37828)\">\n      <path\n        d=\"M18 20V17H15V15H18V12H20V15H23V17H20V20H18ZM3 21C2.45 21 1.97917 20.8042 1.5875 20.4125C1.19583 20.0208 1 19.55 1 19V5C1 4.45 1.19583 3.97917 1.5875 3.5875C1.97917 3.19583 2.45 3 3 3H17C17.55 3 18.0208 3.19583 18.4125 3.5875C18.8042 3.97917 19 4.45 19 5V10H17V8H3V19H16V21H3ZM3 6H17V5H3V6Z\"\n        fill=\"#395979\"\n      />\n    </g>\n  </svg>\n)\n\nexport default AddAd\n","import { useState, useCallback } from 'react'\nimport { RowSelectionState } from '@tanstack/react-table'\nimport { cloneDeep } from 'lodash-es'\nimport { ReferenceList } from '@sage-bionetworks/synapse-types'\n\nexport function useEntityHeaderTableState(\n  references: ReferenceList,\n  onUpdateEntityIDsTextbox?: (value: string) => void,\n  onUpdate?: (updatedRefs: ReferenceList) => void,\n) {\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({})\n  const [refsInState, _setRefsInState] = useState<ReferenceList>(\n    cloneDeep(references),\n  )\n  const [newEntityIDs, _setNewEntityIDs] = useState<string>('')\n  const [parseErrors, setParseErrors] = useState<string[]>([])\n\n  const setNewEntityIDs = useCallback(\n    (newValue: string) => {\n      _setNewEntityIDs(newValue)\n      onUpdateEntityIDsTextbox && onUpdateEntityIDsTextbox(newValue)\n    },\n    [onUpdateEntityIDsTextbox],\n  )\n\n  const setRefsInState = useCallback((refs: ReferenceList) => {\n    setRowSelection({})\n    _setRefsInState(refs)\n    if (onUpdate) {\n      onUpdate(refs)\n    }\n    setParseErrors([])\n    setNewEntityIDs('')\n  }, [])\n\n  return {\n    rowSelection,\n    setRowSelection,\n    refsInState,\n    setRefsInState,\n    newEntityIDs,\n    setNewEntityIDs,\n    parseErrors,\n    setParseErrors,\n  }\n}\n","import React, { useState, useMemo, MouseEventHandler, useCallback } from 'react'\nimport {\n  useReactTable,\n  ColumnFiltersState,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFacetedMinMaxValues,\n  getSortedRowModel,\n  ColumnDef,\n  flexRender,\n} from '@tanstack/react-table'\nimport {\n  TextField,\n  Typography,\n  Box,\n  Button,\n  InputLabel,\n  Alert,\n  AlertTitle,\n  IconButton,\n  Tooltip,\n} from '@mui/material'\nimport {\n  EntityHeader,\n  EntityType,\n  ReferenceList,\n} from '@sage-bionetworks/synapse-types'\nimport { getEntityTypeFromHeader } from '../../utils/functions/EntityTypeUtils'\nimport { useGetEntityHeaders } from '../../synapse-queries'\nimport IconSvg from '../IconSvg'\nimport { SkeletonTable } from '../Skeleton'\nimport { AddCircleTwoTone } from '@mui/icons-material'\nimport { parse } from 'papaparse'\nimport { SYNAPSE_ENTITY_ID_REGEX } from '../../utils/functions/RegularExpressions'\nimport { Filter } from './Filter'\nimport { EntityHeaderNameCell } from './EntityHeaderTableCellRenderers'\nimport { EntityHeaderIDCell } from './EntityHeaderTableCellRenderers'\nimport { EntityHeaderTypeCell } from './EntityHeaderTableCellRenderers'\nimport { CheckBoxHeader } from './EntityHeaderTableCellRenderers'\nimport { CheckBoxCell } from './EntityHeaderTableCellRenderers'\nimport AddAd from '../../assets/icons/AddAd'\nimport { EntityFinderModal } from '../EntityFinder/EntityFinderModal'\nimport { VersionSelectionType } from '../EntityFinder/VersionSelectionType'\nimport { FinderScope } from '../EntityFinder/tree/EntityTree'\nimport { useEntityHeaderTableState } from './useEntityHeaderTableState'\n\nexport type EntityHeaderTableProps = {\n  references: ReferenceList\n  isEditable: boolean\n  onUpdate?: (updatedRefs: ReferenceList) => void // when the references are updated, EntityHeaderTable will call this function with the updated list\n  removeSelectedRowsButtonText?: string\n  onUpdateEntityIDsTextbox?: (value: string) => void // when the entity IDs text box is updated, this is called\n}\n\nconst UNMANAGEABLE_SUBJECT_COUNT = 10\n\n// extend EntityHeader to create dummy EntityHeader rows for those that the current user cannot view\nexport type EntityHeaderOrDummy = EntityHeader & { isDummy?: boolean }\n\n/**\n * Renders a sortable/filterable table for a set of entity references.  If editable, onUpdate will be called back\n * on any entity added/removed.\n */\nexport const EntityHeaderTable = (props: EntityHeaderTableProps) => {\n  const {\n    references,\n    isEditable,\n    onUpdate,\n    removeSelectedRowsButtonText = 'Remove Selected Rows',\n    onUpdateEntityIDsTextbox,\n  } = props\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n  const [showEntityFinder, setShowEntityFinder] = useState<boolean>(false)\n\n  const {\n    rowSelection,\n    setRowSelection,\n    refsInState,\n    setRefsInState,\n    newEntityIDs,\n    setNewEntityIDs,\n    parseErrors,\n    setParseErrors,\n  } = useEntityHeaderTableState(references, onUpdateEntityIDsTextbox, onUpdate)\n\n  const setInvalidEntityIDError = useCallback((invalidEntityIDs: string[]) => {\n    setParseErrors([`Invalid Synapse ID(s): ${invalidEntityIDs.join(',')}`])\n  }, [])\n\n  const addRefsFromEntityIDs = useCallback(\n    (entityIDs: string[]) => {\n      const newReferences: ReferenceList = entityIDs.map(id => {\n        return {\n          targetId: id.trim(),\n        }\n      })\n      setRefsInState([...refsInState, ...newReferences])\n    },\n    [refsInState],\n  )\n\n  const addPastedValuesToArray = useCallback(() => {\n    if (newEntityIDs) {\n      if (newEntityIDs.includes(',')) {\n        parse<string[]>(newEntityIDs, {\n          complete: result => {\n            if (result.errors.length > 0) {\n              const newParseErrors = result.errors.map(\n                parseError => parseError.message,\n              )\n              setParseErrors(newParseErrors)\n            } else {\n              const newParsedEntityIDs = result.data[0]\n              const invalidEntityIDs = newParsedEntityIDs.filter(\n                id => !id.trim().match(SYNAPSE_ENTITY_ID_REGEX),\n              )\n              if (invalidEntityIDs.length > 0) {\n                setInvalidEntityIDError(invalidEntityIDs)\n              } else {\n                addRefsFromEntityIDs(newParsedEntityIDs)\n              }\n            }\n          },\n        })\n      } else {\n        // single item\n        if (!newEntityIDs.trim().match(SYNAPSE_ENTITY_ID_REGEX)) {\n          setInvalidEntityIDError([newEntityIDs])\n        } else {\n          addRefsFromEntityIDs([newEntityIDs])\n        }\n      }\n    } else {\n      setParseErrors([])\n      setNewEntityIDs('')\n    }\n  }, [newEntityIDs])\n\n  const selectColumns: ColumnDef<EntityHeaderOrDummy, any>[] = useMemo(\n    () => [\n      {\n        id: 'select',\n        header: CheckBoxHeader,\n        cell: CheckBoxCell,\n      },\n    ],\n    [],\n  )\n\n  const entityHeaderColumns: ColumnDef<EntityHeaderOrDummy, any>[] = useMemo(\n    () => [\n      {\n        accessorFn: (row: EntityHeaderOrDummy) => row.name,\n        id: 'name',\n        cell: EntityHeaderNameCell,\n        header: 'Name',\n      },\n      {\n        accessorFn: (row: EntityHeaderOrDummy) => row.id,\n        id: 'id',\n        cell: EntityHeaderIDCell,\n        header: 'SynID',\n      },\n      {\n        accessorFn: (row: EntityHeaderOrDummy) =>\n          row.isDummy ? '-' : getEntityTypeFromHeader(row),\n        id: 'type',\n        header: 'Type',\n        cell: EntityHeaderTypeCell,\n        filterFn: 'includesString',\n      },\n    ],\n    [],\n  )\n\n  const columns = useMemo<ColumnDef<EntityHeaderOrDummy, any>[]>(\n    () =>\n      isEditable\n        ? selectColumns.concat(entityHeaderColumns)\n        : entityHeaderColumns,\n    [entityHeaderColumns, isEditable, selectColumns],\n  )\n  const selectionCount = Object.keys(rowSelection).length\n  const {\n    data: results,\n    isSuccess,\n    isLoading,\n  } = useGetEntityHeaders(refsInState, {\n    useErrorBoundary: true,\n  })\n\n  const data = useMemo(() => {\n    //create dummy entries for values that were not returned by the getEntityHeaders call!\n    const newData = results ? results?.results : []\n    const newDataEntityIds = new Set()\n    newData.map(entityHeader => newDataEntityIds.add(entityHeader.id))\n    const missingRefs = refsInState.filter(\n      ref => !newDataEntityIds.has(ref.targetId),\n    )\n    const dummyEntityHeaders: EntityHeaderOrDummy[] = missingRefs.map(ref => {\n      return {\n        id: ref.targetId,\n        name: ref.targetId,\n        benefactorId: -1,\n        type: 'org.sagebionetworks.repo.model.Project',\n        createdOn: '',\n        modifiedOn: '',\n        createdBy: '',\n        modifiedBy: '',\n        isLatestVersion: true,\n        isDummy: true,\n      }\n    })\n    return newData.concat(dummyEntityHeaders)\n  }, [results])\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      rowSelection,\n      columnFilters,\n    },\n    enableRowSelection: isEditable,\n    onRowSelectionChange: setRowSelection,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\n    // debugTable: true,\n    // debugHeaders: true,\n    // debugColumns: false,\n    columnResizeMode: 'onChange',\n  })\n\n  if (isLoading) {\n    return <SkeletonTable numCols={3} numRows={10} />\n  } else if (!isSuccess) {\n    return <></>\n  }\n  const onRemoveFromAR: MouseEventHandler<HTMLButtonElement> = e => {\n    // rowSelection looks like {3: true. 5: true} where the key is the row index.\n    // Create a new ReferenceList based on the entityHeaders in the current table.\n    const updatedData = data.filter(\n      (_value, index) => !(rowSelection[index] === true),\n    )\n    const newRowRefs: ReferenceList = updatedData.map(entityHeader => {\n      return {\n        targetId: entityHeader.id,\n      }\n    })\n    setRefsInState(newRowRefs)\n  }\n  const selectableTypes = [\n    EntityType.PROJECT,\n    EntityType.FOLDER,\n    EntityType.FILE,\n    EntityType.TABLE,\n    EntityType.LINK,\n    EntityType.ENTITY_VIEW,\n    EntityType.DOCKER_REPO,\n    EntityType.SUBMISSION_VIEW,\n    EntityType.DATASET,\n    EntityType.DATASET_COLLECTION,\n    EntityType.MATERIALIZED_VIEW,\n    EntityType.VIRTUAL_TABLE,\n  ]\n\n  const isSelection = selectionCount > 0\n  const totalRowCount = data.length\n  const filteredRowCount = table.getPrePaginationRowModel().rows.length\n  return (\n    <div>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          padding: '12px 10px 10px 5px',\n        }}\n      >\n        <div>\n          {totalRowCount > UNMANAGEABLE_SUBJECT_COUNT && (\n            <Typography variant=\"body1\" sx={{ marginBottom: '10px' }}>\n              {totalRowCount} Entities{' '}\n              {filteredRowCount < totalRowCount\n                ? `(${filteredRowCount} visible)`\n                : ''}\n              {isSelection && <span>{` (${selectionCount} selected)`}</span>}\n            </Typography>\n          )}\n        </div>\n        <div>\n          {isEditable && (\n            <Button\n              variant=\"contained\"\n              disabled={!isSelection}\n              onClick={onRemoveFromAR}\n            >\n              {removeSelectedRowsButtonText}\n            </Button>\n          )}\n        </div>\n      </Box>\n      {totalRowCount > 0 && (\n        <Box\n          sx={{\n            overflow: 'auto',\n            maxHeight: '250px',\n            paddingLeft: '2px',\n            th: {\n              backgroundColor: '#eee',\n              zIndex: 100,\n            },\n          }}\n        >\n          <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n            <thead>\n              {table.getHeaderGroups().map(headerGroup => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    let columnSize: string = '5%'\n                    switch (header.id) {\n                      case 'name':\n                        columnSize = '50%'\n                        break\n                      case 'id':\n                        columnSize = '22%'\n                        break\n                      case 'type':\n                        columnSize = '22%'\n                        break\n                      default:\n                        break\n                    }\n                    return (\n                      <th\n                        key={header.id}\n                        colSpan={header.colSpan}\n                        style={{\n                          width: columnSize,\n                          position: 'sticky',\n                          top: '0px',\n                          background: '#fff',\n                        }}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <>\n                            <div\n                              {...{\n                                className: header.column.getCanSort()\n                                  ? 'SRC-hand-cursor'\n                                  : '',\n                                onClick:\n                                  header.column.getToggleSortingHandler(),\n                              }}\n                            >\n                              {flexRender(\n                                header.column.columnDef.header,\n                                header.getContext(),\n                              )}\n                              {{\n                                asc: (\n                                  <IconSvg\n                                    icon={'sortUp'}\n                                    wrap={false}\n                                    sx={{\n                                      color: 'primary.main',\n                                      backgroundColor: 'none',\n                                      float: 'right',\n                                      marginRight: '5px',\n                                    }}\n                                  />\n                                ),\n                                desc: (\n                                  <IconSvg\n                                    icon={'sortDown'}\n                                    wrap={false}\n                                    sx={{\n                                      color: 'primary.main',\n                                      backgroundColor: 'none',\n                                      float: 'right',\n                                      marginRight: '5px',\n                                    }}\n                                  />\n                                ),\n                              }[header.column.getIsSorted() as string] ?? null}\n                            </div>\n                            {header.column.getCanFilter() &&\n                            totalRowCount > UNMANAGEABLE_SUBJECT_COUNT ? (\n                              <div>\n                                <Filter column={header.column} table={table} />\n                              </div>\n                            ) : null}\n                          </>\n                        )}\n                        {header.column.getCanResize() && (\n                          <div\n                            className={`resizer ${\n                              header.column.getIsResizing() ? 'isResizing' : ''\n                            }`}\n                            onMouseDown={header.getResizeHandler()}\n                            onTouchStart={header.getResizeHandler()}\n                          />\n                        )}\n                      </th>\n                    )\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {table.getRowModel().rows.map(row => {\n                return (\n                  <tr key={row.id} style={{ height: '30px' }}>\n                    {row.getVisibleCells().map(cell => {\n                      return (\n                        <td\n                          key={cell.id}\n                          style={{\n                            width: cell.column.getSize(),\n                          }}\n                        >\n                          {flexRender(\n                            cell.column.columnDef.cell,\n                            cell.getContext(),\n                          )}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </Box>\n      )}\n      <EntityFinderModal\n        configuration={{\n          selectMultiple: true,\n          selectableTypes: selectableTypes,\n          versionSelection: VersionSelectionType.DISALLOWED,\n          initialScope: FinderScope.ALL_PROJECTS,\n          initialContainer: 'root',\n        }}\n        promptCopy={'Select Entities to add to the Synapse ID list'}\n        show={showEntityFinder}\n        title={'Select Entities'}\n        confirmButtonCopy={'Add Entities'}\n        onConfirm={items => {\n          const newEntityIDsArray = items.map(ref => ref.targetId)\n          const newEntityIDsString =\n            newEntityIDs.trim().length > 0\n              ? newEntityIDs.concat(',')\n              : newEntityIDs\n          const newValue = newEntityIDsString.concat(\n            newEntityIDsArray.join(','),\n          )\n          setNewEntityIDs(newValue)\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => setShowEntityFinder(false)}\n      />\n      {isEditable && (\n        <Box sx={{ marginTop: '10px' }}>\n          <InputLabel htmlFor=\"synIDs\">Add Synapse IDs</InputLabel>\n\n          <Box sx={{ display: 'grid', gridTemplateColumns: 'auto 50px 150px' }}>\n            <TextField\n              id=\"synIDs\"\n              name=\"synIDs\"\n              fullWidth\n              onChange={e => {\n                setNewEntityIDs(e.target.value)\n              }}\n              value={newEntityIDs}\n              placeholder=\"Enter a list of Synapse IDs (i.e. 'syn123, syn456')\"\n            />\n            <Box sx={{ padding: '5px 0px 0px 5px' }}>\n              {/* Entity finder button.  On select, append the selected entity ID to the newSynIDs list */}\n              <Tooltip title=\"Add a Synapse ID to the list via the Entity Finder\">\n                <IconButton\n                  onClick={() => {\n                    setShowEntityFinder(true)\n                  }}\n                >\n                  <AddAd />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <Button\n              variant=\"outlined\"\n              onClick={addPastedValuesToArray}\n              disabled={isLoading || newEntityIDs.trim().length == 0}\n            >\n              <AddCircleTwoTone />\n              &nbsp;Add Entities\n            </Button>\n          </Box>\n          {parseErrors && parseErrors.length > 0 && (\n            <Alert severity={'error'} sx={{ my: 2 }}>\n              <AlertTitle>Parsing errors encountered:</AlertTitle>\n              <ul>\n                {parseErrors.map((error, index) => {\n                  return (\n                    <Typography\n                      component={parseErrors.length > 1 ? 'li' : 'span'}\n                      lineHeight={1.5}\n                      key={index}\n                      variant={'smallText1'}\n                    >\n                      {error}\n                    </Typography>\n                  )\n                })}\n              </ul>\n            </Alert>\n          )}\n        </Box>\n      )}\n    </div>\n  )\n}\n"],"names":["DebouncedInput","initialValue","onChange","options","delay","textFieldProps","value","setValue","useState","useDebouncedEffect","jsx","Autocomplete","option","value2","event","newValue","params","TextField","e","Filter","column","table","firstValue","_a","columnFilterValue","sortedUniqueValues","React","EntityHeaderNameCell","props","cell","row","original","id","isDummy","Link","PRODUCTION_ENDPOINT_CONFIG","EntityLink","EntityHeaderIDCell","Typography","EntityHeaderTypeCell","CheckBoxHeader","Checkbox","CheckBoxCell","AddAd","jsxs","useEntityHeaderTableState","references","onUpdateEntityIDsTextbox","onUpdate","rowSelection","setRowSelection","refsInState","_setRefsInState","cloneDeep","newEntityIDs","_setNewEntityIDs","parseErrors","setParseErrors","setNewEntityIDs","useCallback","setRefsInState","refs","UNMANAGEABLE_SUBJECT_COUNT","EntityHeaderTable","isEditable","removeSelectedRowsButtonText","columnFilters","setColumnFilters","showEntityFinder","setShowEntityFinder","setInvalidEntityIDError","invalidEntityIDs","addRefsFromEntityIDs","entityIDs","newReferences","addPastedValuesToArray","parse","result","newParseErrors","parseError","newParsedEntityIDs","SYNAPSE_ENTITY_ID_REGEX","selectColumns","useMemo","entityHeaderColumns","getEntityTypeFromHeader","columns","selectionCount","results","isSuccess","isLoading","useGetEntityHeaders","data","newData","newDataEntityIds","entityHeader","dummyEntityHeaders","ref","useReactTable","getCoreRowModel","getFilteredRowModel","getSortedRowModel","getFacetedRowModel","getFacetedUniqueValues","getFacetedMinMaxValues","SkeletonTable","Fragment","onRemoveFromAR","newRowRefs","_value","index","selectableTypes","EntityType","isSelection","totalRowCount","filteredRowCount","Box","Button","headerGroup","header","columnSize","flexRender","IconSvg","EntityFinderModal","VersionSelectionType","FinderScope","items","newEntityIDsArray","InputLabel","Tooltip","IconButton","AddCircleTwoTone","Alert","AlertTitle","error"],"mappings":"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"}