import{j as a}from"./jsx-runtime-095bf462.js";import{S,a as E,e as I,ad as O,ae as C}from"./SynapseClient-ee7f0def.js";import{h as T,g,f,i as P,j as k}from"./wikiHandlers-f63d5a40.js";import{M as t}from"./getEndpoint-ac94413e.js";import{l as p}from"./index-d77193ee.js";import{M as n}from"./mock_user_profile-09cb4e22.js";import{g as _}from"./accessRequirementHandlers-da0f262f.js";import{a as q}from"./userProfileHandlers-2f1d6fee.js";import{U as M}from"./SynapseTableCell-c7127b2e.js";import"./index-8db94870.js";import"./_commonjsHelpers-042e6b4d.js";import"./SynapseConstants-aa5872fb.js";import"./OrientationBanner-9d515953.js";import"./FullWidthAlert-b8575a86.js";import"./AlertTitle-af39c120.js";import"./styled-9c91c4fe.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-4abd396b.js";import"./createSvgIcon-fd8a55dc.js";import"./Paper-88da9df3.js";import"./IconButton-152addcf.js";import"./ButtonBase-7c3b1b89.js";import"./emotion-react.browser.esm-8f02f344.js";import"./assertThisInitialized-081f9914.js";import"./inheritsLoose-c82a83d4.js";import"./TransitionGroupContext-f2b81dde.js";import"./useForkRef-f2aa3d66.js";import"./useIsFocusVisible-bbf13f29.js";import"./Typography-d16533eb.js";import"./extendSxProp-e5d44a75.js";import"./Stack-c9edc483.js";import"./Box-49321e59.js";import"./useTheme-68d5aa8d.js";import"./Grow-426921c3.js";import"./isHostComponent-fa76b8d9.js";import"./index-8ce4a492.js";import"./utils-6b5ba2e3.js";import"./ClickAwayListener-36b79525.js";import"./Tooltip-6a83a77a.js";import"./Button-c45f00b4.js";import"./Link-fc5d7a73.js";import"./_getTag-861d442f.js";import"./isArray-5e3f9107.js";import"./StringUtils-2ea3ab4d.js";import"./dayjs.min-59ef0ea6.js";import"./index-58d3fd43.js";import"./tiny-invariant-dd7d57d2.js";import"./CheckCircleTwoTone-784a445a.js";import"./inputBaseClasses-f05f2ac2.js";import"./Fade-a19bf181.js";import"./mockProject-71495909.js";import"./times-1c9e275d.js";import"./_baseTimes-8715be3e.js";import"./identity-46f208ab.js";import"./isSymbol-7c514724.js";import"./mockWiki-078915a0.js";import"./mock_file_handle-c39bd7eb.js";import"./util-f846e4fa.js";import"./mockFileEntity-c76480ac.js";import"./DateFormatter-2b90f941.js";import"./IconSvg-e87e3e5e.js";import"./ErrorOutlined-dd0fb706.js";import"./GetAppTwoTone-325427e5.js";import"./InfoOutlined-3b5cb253.js";import"./SynapseTableConstants-5f56c39f.js";import"./UserBadge-b14fb834.js";import"./Popover-2892de5e.js";import"./Modal-c148ae5e.js";import"./Backdrop-c3498637.js";import"./getScrollbarSize-ac846fe6.js";import"./ownerWindow-2c76219e.js";import"./createChainedFunction-0bab83cf.js";import"./cloneDeep-63d67f0e.js";import"./_baseClone-46142ff2.js";import"./_Uint8Array-ab958ff7.js";import"./SkeletonTable-5263c31a.js";import"./Skeleton-2bd04c38.js";import"./ToastMessage-57fac76d.js";import"./hasClass-ec9efd32.js";import"./uniqueId-4d05949d.js";import"./toString-cc90cb98.js";import"./Avatar-281ced81.js";import"./EntityLink-c93b47f5.js";import"./useEntity-c364d8d3.js";import"./useMutation-80eb0e91.js";import"./useInfiniteQuery-53886cbd.js";import"./pick-9898b0e8.js";import"./hasIn-eb42bef1.js";import"./_baseSlice-cf92e063.js";import"./isPlainObject-bb3279fd.js";import"./_overRest-e67bd922.js";import"./useGetEntityHeaders-7342f7ef.js";import"./EntityIcon-62ad5f90.js";import"./ErrorChip-b4ad5863.js";import"./index-95cfb7c2.js";import"./RegularExpressions-bc0adf55.js";import"./SqlFunctions-a4a70d60.js";import"./UserSearchBoxV2-b812a696.js";import"./Select-ce3716e1.esm-2948b13e.js";import"./isNativeReflectConstruct-e378569d.js";import"./use-deep-compare-effect.esm-7a830988.js";import"./uniq-4844de1a.js";import"./_isIterateeCall-576d0dfd.js";import"./_cacheHas-4fa98ab9.js";import"./without-eb1011f3.js";import"./_baseRest-db360697.js";import"./isArrayLikeObject-bab2971f.js";import"./_setToArray-3d6ec6fd.js";import"./UserOrTeamBadge-30664b7e.js";import"./index-22c2370a.js";import"./Icon-4dab9b3e.js";import"./WideButton-58152e91.js";import"./LoadingScreen-9185dcf9.js";import"./LinearProgress-f638b645.js";import"./useTeamMembers-2abc831c.js";import"./ObservationCard-fb2c221f.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./uniq-fe955338.js";import"./mapValues-dee13770.js";import"./isPlainObject-1dec192d.js";import"./now-beb31482.js";import"./unCamelCase-ea0ec928.js";import"./sortBy-d3e0fe7c.js";import"./_getMatchData-e7922191.js";import"./_baseFor-d254fa1e.js";import"./isNil-f32149e1.js";import"./factory-275e83af.js";import"./NoSearchResults-460db635.js";import"./NoData-59ea70fa.js";import"./queryUtils-21e60b1b.js";import"./LastLoginInfo-d34820ec.js";import"./jsx-runtime_commonjs-proxy-57ba7161.js";import"./isMuiElement-08f54e3c.js";import"./Dialog-2dba707a.js";import"./DialogTitle-857583de.js";import"./useGetQueryResultBundle-bc8d04ab.js";import"./merge-2158e6a3.js";import"./TextField-356a53ab.js";import"./InputLabel-b63da0ce.js";import"./Select-6dcf8eff.js";import"./index-953d39fd.js";import"./MenuList-06d3cd4c.js";import"./tslib.es6-9c2726d7.js";import"./lodash-e374147d.js";import"./useAccessRequirements-7e2505b8.js";import"./StandaloneLoginForm-494f3dc3.js";import"./LoginFlowBackButton-c81a9c14.js";import"./TextField-d8035ef7.js";import"./StyledFormControl-80c3c2db.js";import"./LoginMethodButton-99e43ea7.js";import"./Grid-3201877c.js";import"./useDataAccessSubmission-3c9772ac.js";import"./RadioGroup-b7f85712.js";import"./Form-93e8509c.js";import"./ThemeProvider-c7f6a893.js";import"./Col-80cc1e4a.js";import"./createWithBsPrefix-d02901e3.js";import"./FileUpload-c6960249.js";import"./Divider-c7474078.js";import"./dividerClasses-94cb8e7e.js";import"./AuthenticatedRequirement-aebbe615.js";import"./RequirementItem-724a29d5.js";import"./ConditionalWrapper-51b8d1ed.js";import"./CheckTwoTone-8be00e66.js";import"./CertificationRequirement-c7ec2ae0.js";import"./ValidationRequirement-69552296.js";import"./TwoFactorAuthEnabledRequirement-4ae24f82.js";import"./TwoFactorEnrollmentForm-2d12cb4c.js";import"./LeftRightPanel-908871dc.js";import"./ActionRequiredCard-7218b3f1.js";import"./RequestDownloadCard-8ab19954.js";import"./ElementWithTooltip-5388cfc9.js";import"./Dropdown-0aa781b0.js";import"./Tabs-afe0c6f9.js";import"./QueryCount-8ea412e6.js";import"./SkeletonButton-53ae0bfd.js";import"./EnumFacetFilterUI-5b431a5c.js";import"./RangeSlider-6aeb6b22.js";import"./react-sizeme-5bfc490a.js";import"./ColorGradient-3d3e1969.js";import"./colorPalette-c43701fe.js";import"./SelectionCriteriaPill-455e22df.js";import"./useDownloadList-ee8ca59f.js";import"./SynapseVideo-b25b4be6.js";import"./IconList-56cf61b5.js";import"./UserCardList-16655a0d.js";const Ye={title:"Governance/Data Access Request Flow/Requirements/UnmanagedACTAccessRequirementItem",component:M,argTypes:{isAuthenticated:{control:{type:"boolean"},defaultValue:!0}},decorators:[(o,e)=>a(S,{children:r=>a(E,{synapseContext:{...r,accessToken:e.isAuthenticated?r.accessToken??"fake token":void 0},children:a(o,{})})})]},s={args:{accessRequirement:T},parameters:{msw:{handlers:[..._(t),...g(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:f.id,submitterId:n.toString(),accessorId:n.toString(),state:C.APPROVED};return e(r.status(201),r.json(i))})]}}},m={args:{accessRequirement:P},parameters:{msw:{handlers:[..._(t),...g(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:k.id,submitterId:n.toString(),accessorId:n.toString(),state:C.APPROVED};return e(r.status(201),r.json(i))})]}}};var c,d,u;s.parameters={...s.parameters,docs:{...(c=s.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirement
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirement.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(u=(d=s.parameters)==null?void 0:d.docs)==null?void 0:u.source}}};var R,A,l;m.parameters={...m.parameters,docs:{...(R=m.parameters)==null?void 0:R.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirementWithWiki
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirementWithWiki.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(l=(A=m.parameters)==null?void 0:A.docs)==null?void 0:l.source}}};const Ze=["LegacyACTAccessRequirement","LegacyACTAccessRequirementWithWiki"];export{s as LegacyACTAccessRequirement,m as LegacyACTAccessRequirementWithWiki,Ze as __namedExportsOrder,Ye as default};
//# sourceMappingURL=UnmanagedACTAccessRequirementItem.stories-ca94e75c.js.map
