{"version":3,"file":"isHostComponent-957231d5.js","sources":["../../../../node_modules/.pnpm/@mui+utils@5.11.13_react@18.2.0/node_modules/@mui/utils/esm/ownerDocument.js","../../../../node_modules/.pnpm/@mui+utils@5.11.13_react@18.2.0/node_modules/@mui/utils/esm/setRef.js","../../../../node_modules/.pnpm/@mui+utils@5.11.13_react@18.2.0/node_modules/@mui/utils/esm/useEnhancedEffect.js","../../../../node_modules/.pnpm/@mui+utils@5.11.13_react@18.2.0/node_modules/@mui/utils/esm/useForkRef.js","../../../../node_modules/.pnpm/@mui+base@5.0.0-alpha.119_5ndqzdd6t4rivxsukjv3i3ak2q/node_modules/@mui/base/utils/isHostComponent.js"],"sourcesContent":["export default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import * as React from 'react';\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nexport default function isHostComponent(element) {\n  return typeof element === 'string';\n}"],"names":["ownerDocument","node","setRef","ref","value","useEnhancedEffect","React.useLayoutEffect","React.useEffect","useEnhancedEffect$1","useForkRef","refs","React.useMemo","instance","isHostComponent","element"],"mappings":"wCAAe,SAASA,EAAcC,EAAM,CAC1C,OAAOA,GAAQA,EAAK,eAAiB,QACvC,CCWe,SAASC,EAAOC,EAAKC,EAAO,CACrC,OAAOD,GAAQ,WACjBA,EAAIC,CAAK,EACAD,IACTA,EAAI,QAAUC,EAElB,CClBA,MAAMC,EAAoB,OAAO,OAAW,IAAcC,EAAAA,gBAAwBC,EAAAA,UAClFC,EAAeH,ECAA,SAASI,KAAcC,EAAM,CAM1C,OAAOC,EAAa,QAAC,IACfD,EAAK,MAAMP,GAAOA,GAAO,IAAI,EACxB,KAEFS,GAAY,CACjBF,EAAK,QAAQP,GAAO,CAClBD,EAAOC,EAAKS,CAAQ,CAC5B,CAAO,CACP,EAEKF,CAAI,CACT,CChBe,SAASG,EAAgBC,EAAS,CAC/C,OAAO,OAAOA,GAAY,QAC5B"}