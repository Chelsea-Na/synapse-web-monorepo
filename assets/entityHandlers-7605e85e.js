import{l as m}from"./index-6f612cd1.js";import{E as S,bn as N,bo as E,bp as _,bq as $,br as v,bs as h,bt as C,bu as w,_ as M}from"./SynapseClient-0de7e8d0.js";import{g as A,B as L}from"./getEndpoint-ac94413e.js";import{M as y,a as j}from"./mock_user_profile-fba3a519.js";import{m as p,a as B}from"./mockProject-e2f1d293.js";import{m as O}from"./mockFileEntity-a7d77187.js";import{a as P}from"./mockTableEntity-6c8e486f.js";import{b as V}from"./userProfileHandlers-7073259c.js";import{m as Y}from"./mockSchema-7b8e1f5e.js";const u="syn60000",f="A Mocked Dataset",I={id:u,parentId:p.id,name:f,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:y.toString(),modifiedBy:j.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},R={id:u,type:"org.sagebionetworks.repo.model.table.Dataset",name:f,benefactorId:parseInt(p.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:y.toString(),modifiedBy:y.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},T={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:p.name,id:p.id,type:"org.sagebionetworks.repo.model.Project"},{name:f,id:u,type:"org.sagebionetworks.repo.model.FileEntity"}]},U={1:{...I,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...I,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},K=[{id:u,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:u,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],H={entity:I,entityType:S.DATASET,path:T,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},g={id:u,name:f,entity:I,entityHeader:R,path:T,bundle:H,versions:U,versionInfo:K},b="syn70000",D="A Mocked Dataset Collection",Z={id:b,parentId:p.id,name:D,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:y.toString(),modifiedBy:y.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:g.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},F={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:p.name,id:p.id,type:"org.sagebionetworks.repo.model.Project"},{name:D,id:b,type:"org.sagebionetworks.repo.model.FileEntity"}]},J={id:b,name:D,entity:Z,path:F},l=[O,...B,g,J,P],ne=c=>[m.rest.post(`${c}${N}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,i=l.find(a=>a.name===t.name);i?(o=i.entity,s=200):t.name===V&&(o.reason="Invalid project name",s=403)}return r(e.status(s),e.json(o))}),m.rest.get(`${c}${E(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t&&(o=t.entity,s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${_(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t&&t.versionInfo&&(o={results:t.versionInfo},s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${$(":entityId",":versionNumber")}`,async(n,r,e)=>{let s=404;const o=n.params.entityId,t=n.params.versionNumber.toString(),i=parseInt(t);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${t}`};const d=l.find(k=>k.id===n.params.entityId);return d&&d.versions&&d.versions[i]&&(a=d.versions[i],s=200),r(e.status(s),e.json(a))}),m.rest.post(`${c}${v(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t!=null&&t.bundle&&(o=t.bundle,s=200),r(e.status(s),e.json(o))}),m.rest.post(`${c}${v(":entityId",":versionNumber")}`,async(n,r,e)=>{const s=n.params.entityId,o=parseInt(n.params.versionNumber);let t=404,i={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const a=l.find(d=>d.id===s);if(a){const d=a.bundle;a.versions&&a.versions[o]?i={...d,entity:a.versions[o]}:i=d,t=200}return r(e.status(t),e.json(i))}),m.rest.get(`${c}${h(":entityId")}`,async(n,r,e)=>r(e.status(200),e.json(Y))),m.rest.get(`${c}${C(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t!=null&&t.json&&(o=t.json,s=200),r(e.status(s),e.json(o))}),m.rest.post(`${c}${w}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,i=l.filter(a=>t.references.find(d=>d.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return i&&(o={results:i},s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${E(":entityId")}/path`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=l.find(i=>n.params.entityId===i.id);return t&&t.path&&(o=t.path,s=200),r(e.status(s),e.json(o))}),m.rest.get(`${A(L.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,r,e)=>{const s={banner:"",storageLocationId:1,uploadType:M.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(e.status(200),e.json(s))})];export{ne as g};
//# sourceMappingURL=entityHandlers-7605e85e.js.map
