{"version":3,"file":"ChallengeRegisterButton-eee26ee7.js","sources":["../../src/components/ChallengeRegisterButton/ChallengeRegisterButton.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp'\nimport { Box } from '@mui/system'\nimport SpinnerButton from '../widgets/SpinnerButton'\nimport { useSynapseContext } from '../../utils'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityChallenge,\n  useGetUserSubmissionTeamsInfinite,\n} from '../../synapse-queries'\nimport { ANONYMOUS_PRINCIPAL_ID } from '../../utils/SynapseConstants'\nimport {\n  Challenge,\n  PaginatedIds,\n  UserProfile,\n} from '@sage-bionetworks/synapse-types'\nimport { useGetIsUserMemberOfTeam } from '../../synapse-queries/team/useTeamMembers'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\n\nexport interface ChallengeRegisterButtonProps {\n  projectId: string\n  onChallengeError?: (error: SynapseClientError) => void\n  onJoinClick?: () => void\n  onLeaveClick?: () => void\n}\n\nconst EMPTY_ID = ''\n\nconst ChallengeRegisterButton = ({\n  projectId,\n  onChallengeError,\n  onJoinClick,\n  onLeaveClick,\n}: ChallengeRegisterButtonProps) => {\n  const { accessToken } = useSynapseContext()\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)\n  const [isLoggedOut, setIsLoggedOut] = useState<boolean>(false)\n  const [challenge, setChallenge] = useState<Challenge>()\n  const [userProfile, setUserProfile] = useState<UserProfile>()\n  const [isRegistered, setIsRegistered] = useState<boolean>(false)\n  const [hasSubmissionTeam, setHasSubmissionTeam] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(true)\n  const [requestError, setRequestError] = useState<SynapseClientError>()\n\n  useEffect(() => {\n    if (userProfile) {\n      const loggedIn = userProfile.ownerId !== ANONYMOUS_PRINCIPAL_ID.toString()\n\n      const loggedOut =\n        userProfile.ownerId === ANONYMOUS_PRINCIPAL_ID.toString()\n      setIsLoggedIn(loggedIn)\n      setIsLoggedOut(loggedOut)\n    }\n  }, [userProfile])\n\n  useEffect(() => {\n    setUserProfile(undefined)\n  }, [accessToken])\n\n  useEffect(() => {\n    if (requestError && onChallengeError) onChallengeError(requestError)\n  }, [requestError, onChallengeError])\n\n  useGetCurrentUserProfile({\n    enabled: !isLoggedOut && !userProfile,\n    onSettled: (data, error) => {\n      if (data) {\n        setUserProfile(data)\n      }\n      if (error) {\n        setLoading(false)\n        setRequestError(error)\n      }\n    },\n  })\n\n  useGetEntityChallenge(projectId, {\n    enabled: isLoggedIn && !challenge,\n    onSettled: (data, error) => {\n      if (data) {\n        setChallenge(data)\n      }\n      if (error) {\n        setLoading(false)\n        setRequestError(error)\n      }\n    },\n  })\n\n  // Verify that user is a member of the participant team\n  useGetIsUserMemberOfTeam(\n    challenge?.participantTeamId ?? EMPTY_ID,\n    userProfile?.ownerId ?? EMPTY_ID,\n    {\n      enabled: !!challenge && !!userProfile,\n      onSettled: (data, error) => {\n        if (data === null) {\n          // User is not a member of the participant team\n          setIsRegistered(false)\n          setLoading(false)\n        }\n        if (data !== null) {\n          // User is a member of the participant team, continue\n          setIsRegistered(true)\n        }\n        if (error) {\n          // Could not determine if user is a member of the participant team\n          setLoading(false)\n          setRequestError(error)\n        }\n      },\n    },\n  )\n\n  useGetUserSubmissionTeamsInfinite(challenge?.id ?? '0', 500, {\n    enabled: !!challenge && !!accessToken,\n    onSettled: (data: PaginatedIds | undefined, error) => {\n      if (data) {\n        setHasSubmissionTeam(data.results.length > 0)\n      }\n      if (error) {\n        setRequestError(error)\n      }\n      setLoading(false)\n    },\n  })\n\n  if (loading) {\n    return <SpinnerButton showSpinner>Loading...</SpinnerButton>\n  }\n\n  return (\n    <Box>\n      {(!isRegistered || !hasSubmissionTeam) && (\n        <SpinnerButton\n          disableElevation={true}\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => (onJoinClick ? onJoinClick() : undefined)}\n          sx={{\n            color: 'white',\n            fontSize: '1.12em',\n            textTransform: 'none',\n            padding: '4px 18px',\n            fontWeight: 400,\n            ':hover': { color: 'white' },\n            ':active': { color: 'white' },\n            ':visited': { color: 'white' },\n          }}\n        >\n          Register for this Challenge\n        </SpinnerButton>\n      )}\n      {isRegistered && hasSubmissionTeam && (\n        <SpinnerButton\n          disableElevation={true}\n          variant=\"outlined\"\n          endIcon={<ExitToAppIcon />}\n          onClick={() => (onLeaveClick ? onLeaveClick() : undefined)}\n          sx={{\n            borderColor: 'white',\n            color: 'white',\n            fontSize: '1.12em',\n            textTransform: 'none',\n            padding: '4px 18px',\n            fontWeight: 400,\n            ':hover': {\n              color: '#172430',\n              borderColor: '#172430',\n            },\n          }}\n        >\n          Leave Challenge\n        </SpinnerButton>\n      )}\n    </Box>\n  )\n}\n\nexport default ChallengeRegisterButton\n"],"names":["EMPTY_ID","ChallengeRegisterButton","projectId","onChallengeError","onJoinClick","onLeaveClick","accessToken","useSynapseContext","isLoggedIn","setIsLoggedIn","useState","isLoggedOut","setIsLoggedOut","challenge","setChallenge","userProfile","setUserProfile","isRegistered","setIsRegistered","hasSubmissionTeam","setHasSubmissionTeam","loading","setLoading","requestError","setRequestError","useEffect","loggedIn","ANONYMOUS_PRINCIPAL_ID","loggedOut","useGetCurrentUserProfile","data","error","useGetEntityChallenge","useGetIsUserMemberOfTeam","useGetUserSubmissionTeamsInfinite","jsx","SpinnerButton","jsxs","Box","ExitToAppIcon"],"mappings":"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"}