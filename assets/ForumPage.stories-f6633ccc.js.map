{"version":3,"file":"ForumPage.stories-f6633ccc.js","sources":["../../src/lib/containers/discussion_forum/ForumTable.tsx","../../src/lib/containers/discussion_forum/ForumPage.tsx","../../src/lib/containers/discussion_forum/ForumPage.stories.tsx"],"sourcesContent":["import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport SortIcon from '../../assets/icons/Sort'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetCurrentUserProfile } from '../../utils/hooks/SynapseAPI'\nimport {\n  useGetForumInfinite,\n  useGetModerators,\n} from '../../utils/hooks/SynapseAPI/forum/useForum'\nimport { AVATAR, SMALL_USER_CARD } from '../../utils/SynapseConstants'\nimport { Direction } from '../../utils/synapseTypes'\nimport {\n  DiscussionFilter,\n  DiscussionThreadOrder,\n} from '../../utils/synapseTypes/DiscussionBundle'\nimport IconSvg from '../IconSvg'\nimport UserCard from '../UserCard'\n\nexport type ForumTableProps = {\n  forumId: string\n  limit: number\n  onClickLink: () => void\n  filter: DiscussionFilter\n}\n\nexport const ForumTable: React.FC<ForumTableProps> = ({\n  forumId,\n  limit,\n  filter,\n  onClickLink,\n}) => {\n  const [sort, setSort] = useState<DiscussionThreadOrder>(\n    DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY,\n  )\n  const [isAscending, setIsAscending] = useState(false)\n\n  const { data, hasNextPage, fetchNextPage } = useGetForumInfinite(\n    forumId,\n    limit,\n    sort,\n    isAscending,\n    filter,\n  )\n\n  const { data: moderatorList } = useGetModerators(forumId)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n  const threads = data?.pages.flatMap(page => page.results) ?? []\n\n  const getUrl = (threadId: string, projectId: string) => {\n    return `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${projectId}/discussion/threadId=${threadId}`\n  }\n\n  const onSort = (field: DiscussionThreadOrder) => {\n    if (sort == field) {\n      setSort(field)\n      setIsAscending(!isAscending)\n    } else {\n      setSort(field)\n      setIsAscending(false)\n    }\n  }\n  const isCurrentUserModerator = moderatorList?.results.includes(\n    currentUserProfile?.ownerId ?? '',\n  )\n\n  return (\n    <div className=\"ForumTable bootstrap-4-backport\">\n      <Table>\n        <thead>\n          <tr>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Topic</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Topic\"\n                  active={sort === DiscussionThreadOrder.THREAD_TITLE}\n                  direction={\n                    sort === 'THREAD_TITLE'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(DiscussionThreadOrder.THREAD_TITLE)}\n                />\n              </span>\n            </th>\n            <th>Author</th>\n            <th>Active Users</th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Replies</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Replies\"\n                  active={sort === DiscussionThreadOrder.NUMBER_OF_REPLIES}\n                  direction={\n                    sort === 'NUMBER_OF_REPLIES'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() =>\n                    onSort(DiscussionThreadOrder.NUMBER_OF_REPLIES)\n                  }\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Views</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Views\"\n                  active={sort === DiscussionThreadOrder.NUMBER_OF_VIEWS}\n                  direction={\n                    sort === 'NUMBER_OF_VIEWS'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(DiscussionThreadOrder.NUMBER_OF_VIEWS)}\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Activity</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Last Activity\"\n                  active={\n                    sort === DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY\n                  }\n                  direction={\n                    sort === 'PINNED_AND_LAST_ACTIVITY'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() =>\n                    onSort(DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY)\n                  }\n                />\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {threads.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <a onClick={() => onClickLink()}>\n                    {item.isPinned ? <IconSvg icon=\"pushpin\" /> : <></>}\n                    {item.title}\n                  </a>\n                </td>\n                <td>\n                  <UserCard size={SMALL_USER_CARD} ownerId={item.createdBy} />\n                </td>\n                <td>\n                  {item.activeAuthors.map(user => (\n                    <div key={user} className=\"avatarContainer\">\n                      <UserCard\n                        showCardOnHover={true}\n                        className=\"ActiveUsers\"\n                        size={AVATAR}\n                        avatarSize={'MEDIUM'}\n                        ownerId={user}\n                      />\n                    </div>\n                  ))}\n                </td>\n                <td>{item.numberOfReplies}</td>\n                <td>{item.numberOfViews}</td>\n                <td>{dayjs(item.lastActivity).format('L')}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {hasNextPage && (\n        <Button\n          variant=\"outline-primary\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show more results\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { Typography } from '@mui/material'\nimport React, { useState } from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { useGetCurrentUserProfile } from '../../utils/hooks/SynapseAPI'\nimport { useGetModerators } from '../../utils/hooks/SynapseAPI/forum/useForum'\nimport { useSubscription } from '../../utils/hooks/SynapseAPI/subscription/useSubscription'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport { DiscussionFilter } from '../../utils/synapseTypes/DiscussionBundle'\nimport { SubscriptionObjectType } from '../../utils/synapseTypes/Subscription'\nimport { displayToast } from '../ToastMessage'\nimport { ForumTable } from './ForumTable'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport { SubscribersModal } from './SubscribersModal'\n\nexport type ForumPageProps = {\n  forumId: string\n  limit: number\n  onClickLink: () => void\n}\n\nconst SIGN_IN_TEXT = 'You will need to sign in for access to that resource'\n\nexport const ForumPage: React.FC<ForumPageProps> = ({\n  forumId,\n  limit,\n  onClickLink,\n}) => {\n  const [showThreadModal, setShowThreadModal] = useState(false)\n  const [showSignInModal, setShowSignInModal] = useState(false)\n  const [showDeletedThread, setShowDeletedThread] = useState(false)\n  const [showSubscriberModal, setShowSubscriberModal] = useState(false)\n  const { subscription, isLoading, toggleSubscribed } = useSubscription(\n    forumId,\n    SubscriptionObjectType.FORUM,\n  )\n\n  function handleFollowBtn() {\n    try {\n      toggleSubscribed()\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n  const { data: moderatorList } = useGetModerators(forumId)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n\n  const isCurrentUserModerator = moderatorList?.results.includes(\n    currentUserProfile?.ownerId ?? '',\n  )\n\n  const handleNewThreadBtn = () => {\n    if (currentUserProfile?.userName == 'anonymous') {\n      setShowSignInModal(true)\n    } else {\n      setShowThreadModal(true)\n    }\n  }\n\n  return (\n    <div className=\"ForumTable bootstrap-4-backport\">\n      <div className=\"ForumTable__top-level-control\">\n        <SubscribersModal\n          id={forumId}\n          objectType={SubscriptionObjectType.FORUM}\n          showModal={showSubscriberModal}\n          handleModal={setShowSubscriberModal}\n        />\n        <Button\n          variant={subscription ? 'outline-primary' : 'primary'}\n          onClick={() => handleFollowBtn()}\n          disabled={isLoading}\n        >\n          {subscription ? 'Unfollow' : 'Follow'}\n        </Button>\n        {\n          <Button variant=\"primary\" onClick={() => handleNewThreadBtn()}>\n            New Thread\n          </Button>\n        }\n        {isCurrentUserModerator && (\n          <Button onClick={() => setShowDeletedThread(!showDeletedThread)}>\n            {showDeletedThread\n              ? 'Hide Deleted Threads'\n              : 'Show Deleted Threads'}\n          </Button>\n        )}\n      </div>\n      {showDeletedThread && (\n        <>\n          <Typography variant=\"h4\">Deleted Threads</Typography>\n          <ForumTable\n            onClickLink={onClickLink}\n            forumId={forumId}\n            limit={limit}\n            filter={DiscussionFilter.DELETED_ONLY}\n          />\n        </>\n      )}\n      <ForumTable\n        onClickLink={onClickLink}\n        forumId={forumId}\n        limit={limit}\n        filter={DiscussionFilter.EXCLUDE_DELETED}\n      />\n      <Modal\n        size=\"lg\"\n        show={showThreadModal}\n        onHide={() => setShowThreadModal(false)}\n        animation={false}\n      >\n        <Modal.Header>\n          <Modal.Title>New Thread</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ForumThreadEditor\n            isReply={false}\n            id={forumId}\n            onClose={() => setShowThreadModal(false)}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal\n        className=\"bootstrap-4-backport\"\n        show={showSignInModal}\n        onHide={() => setShowSignInModal(false)}\n        animation={false}\n      >\n        <Modal.Header closeButton />\n        <Modal.Body>{SIGN_IN_TEXT}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => setShowSignInModal(false)}\n            className={SRC_SIGN_IN_CLASS}\n          >\n            Sign In\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n","import React from 'react';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport { ForumPage } from './ForumPage';\nexport default ({\n  title: 'Synapse/ForumPage',\n  component: ForumPage,\n  argTypes: {}\n} as ComponentMeta<typeof ForumPage>);\nconst Template: ComponentStory<typeof ForumPage> = args => <ForumPage {...args} />;\nexport const ForumPageDemo = Template.bind({});\nForumPageDemo.args = {\n  forumId: '381943',\n  limit: 20,\n  onClickLink: () => alert('This functionality has not been implemented yet')\n};\nForumPageDemo.parameters = {\n  ...ForumPageDemo.parameters,\n  docs: {\n    ...ForumPageDemo.parameters?.docs,\n    source: {\n      originalSource: \"args => <ForumPage {...args} />\",\n      ...ForumPageDemo.parameters?.docs?.source\n    }\n  }\n};"],"names":["ForumTable","forumId","limit","filter","onClickLink","sort","setSort","useState","DiscussionThreadOrder","isAscending","setIsAscending","data","hasNextPage","fetchNextPage","useGetForumInfinite","moderatorList","useGetModerators","currentUserProfile","useGetCurrentUserProfile","threads","page","onSort","field","jsxs","Table","jsx","SortIcon","Direction","item","IconSvg","Fragment","UserCard","SMALL_USER_CARD","user","AVATAR","dayjs","Button","SIGN_IN_TEXT","ForumPage","showThreadModal","setShowThreadModal","showSignInModal","setShowSignInModal","showDeletedThread","setShowDeletedThread","showSubscriberModal","setShowSubscriberModal","subscription","isLoading","toggleSubscribed","useSubscription","SubscriptionObjectType","handleFollowBtn","err","displayToast","isCurrentUserModerator","handleNewThreadBtn","SubscribersModal","Typography","DiscussionFilter","Modal","ForumThreadEditor","SRC_SIGN_IN_CLASS","ForumPage_stories","Template","args","ForumPageDemo","_a","_c","_b"],"mappings":"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"}