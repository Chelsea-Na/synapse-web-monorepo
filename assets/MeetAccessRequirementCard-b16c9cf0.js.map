{"version":3,"file":"MeetAccessRequirementCard-b16c9cf0.js","sources":["../../src/lib/containers/download_list_v2/MeetAccessRequirementCard.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useGetAccessRequirements } from '../../utils/hooks/SynapseAPI/dataaccess/useAccessRequirements'\nimport { SelfSignAccessRequirement } from '../../utils/synapseTypes'\nimport {\n  EASY_DIFFICULTY,\n  MEDIUM_DIFFICULTY,\n  VARIABLE_DIFFICULTY,\n} from '../../utils/SynapseConstants'\nimport AccessRequirementList from '../AccessRequirementList/AccessRequirementList'\nimport { ActionRequiredCard } from './ActionRequiredCard'\nimport WideButton from '../../components/styled/WideButton'\n\nexport type MeetAccessRequirementCardProps = {\n  accessRequirementId: number\n  count: number\n}\nexport const TERMS_OF_USE_TITLE =\n  'Requires Acceptance of Data-Specific Terms of Use'\nexport const SELF_SIGN_TITLE =\n  'Requires Acceptance of Data-Specific Terms of Use'\nexport const ACT_TITLE =\n  'Requires Approval of Data-Specific Access Requirements'\nexport const LOCK_TITLE = 'Access Restricted'\n\nexport const MeetAccessRequirementCard: React.FunctionComponent<\n  MeetAccessRequirementCardProps\n> = ({ accessRequirementId, count }: MeetAccessRequirementCardProps) => {\n  const { data: ar, isLoading } = useGetAccessRequirements(\n    accessRequirementId,\n    { useErrorBoundary: true },\n  )\n  const [isShowingAccessRequirement, setIsShowingAccessRequirement] =\n    useState<boolean>(false)\n  let title: string | undefined = undefined\n  let iconType = ''\n  let description = ''\n\n  if (!isLoading && ar) {\n    switch (ar.concreteType) {\n      case 'org.sagebionetworks.repo.model.TermsOfUseAccessRequirement':\n        title = TERMS_OF_USE_TITLE\n        iconType = EASY_DIFFICULTY\n        description = ar.name ?? ''\n        break\n      case 'org.sagebionetworks.repo.model.SelfSignAccessRequirement': {\n        title = SELF_SIGN_TITLE\n        const selfSignAR: SelfSignAccessRequirement = ar\n        if (selfSignAR.isValidatedProfileRequired) {\n          iconType = VARIABLE_DIFFICULTY\n        } else if (selfSignAR.isCertifiedUserRequired) {\n          iconType = MEDIUM_DIFFICULTY\n        } else {\n          iconType = EASY_DIFFICULTY\n        }\n        description = ar.name ?? ''\n        break\n      }\n      case 'org.sagebionetworks.repo.model.ManagedACTAccessRequirement':\n      case 'org.sagebionetworks.repo.model.ACTAccessRequirement':\n        title = ACT_TITLE\n        iconType = VARIABLE_DIFFICULTY\n        description = ar.name ?? ''\n        break\n      case 'org.sagebionetworks.repo.model.LockAccessRequirement':\n        title = LOCK_TITLE\n        iconType = VARIABLE_DIFFICULTY\n        description =\n          'Access restricted pending review by Synapse Access and Compliance Team.'\n        break\n    }\n  }\n\n  return (\n    <>\n      <ActionRequiredCard\n        isLoading={isLoading}\n        title={title}\n        description={description}\n        iconType={iconType}\n        count={count}\n        actionNode={\n          <WideButton\n            variant=\"contained\"\n            onClick={() => setIsShowingAccessRequirement(true)}\n          >\n            Start\n          </WideButton>\n        }\n      />\n      {isShowingAccessRequirement && ar && (\n        <AccessRequirementList\n          entityId={ar.subjectIds[0].id}\n          accessRequirementFromProps={[ar]}\n          renderAsModal={true}\n          numberOfFilesAffected={count}\n          onHide={() => setIsShowingAccessRequirement(false)}\n        />\n      )}\n    </>\n  )\n}\n"],"names":["TERMS_OF_USE_TITLE","SELF_SIGN_TITLE","ACT_TITLE","LOCK_TITLE","MeetAccessRequirementCard","accessRequirementId","count","ar","isLoading","useGetAccessRequirements","isShowingAccessRequirement","setIsShowingAccessRequirement","useState","title","iconType","description","EASY_DIFFICULTY","selfSignAR","VARIABLE_DIFFICULTY","MEDIUM_DIFFICULTY","jsxs","Fragment","jsx","ActionRequiredCard","WideButton","AccessRequirementList"],"mappings":"sXAgBO,MAAAA,EAAA,oDAEAC,EAAA,oDAEAC,EAAA,yDAEAC,EAAA,oBAEAC,EAAA,CAAA,CAAA,oBAAAC,EAAA,MAAAC,KAAA,CAGL,KAAA,CAAA,KAAAC,EAAA,UAAAC,CAAA,EAAAC,EAAgCJ,EAC9B,CAAA,iBAAA,EAAA,CACyB,EAE3B,CAAAK,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,IAAAC,EACAC,EAAA,GACAC,EAAA,GAEA,GAAA,CAAAP,GAAAD,EACE,OAAAA,EAAA,aAAA,CAAyB,IAAA,6DAErBM,EAAAb,EACAc,EAAAE,EACAD,EAAAR,EAAA,MAAA,GACA,MAAA,IAAA,2DAAA,CAEAM,EAAAZ,EACA,MAAAgB,EAAAV,EACAU,EAAA,2BACEH,EAAAI,EAAWD,EAAA,wBAEXH,EAAAK,EAEAL,EAAAE,EAEFD,EAAAR,EAAA,MAAA,GACA,KAAA,CACF,IAAA,6DACK,IAAA,sDAEHM,EAAAX,EACAY,EAAAI,EACAH,EAAAR,EAAA,MAAA,GACA,MAAA,IAAA,uDAEAM,EAAAV,EACAW,EAAAI,EACAH,EAAA,0EAEA,KAAA,CAIN,OAAAK,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,UAAAf,EACC,MAAAK,EACA,YAAAE,EACA,SAAAD,EACA,MAAAR,EACA,WAAAgB,EAEEE,EAAC,CAAA,QAAA,YACS,QAAA,IAAAb,EAAA,EAAA,EACyC,SAAA,OAClD,CAAA,CAED,CAAA,EAEJD,GAAAH,GAAAe,EAEEG,EAAC,CAAA,SAAAlB,EAAA,WAAA,CAAA,EAAA,GAC4B,2BAAA,CAAAA,CAAA,EACI,cAAA,GAChB,sBAAAD,EACQ,OAAA,IAAAK,EAAA,EAAA,CAC0B,CAAA,CACnD,CAAA,CAAA,CAIR"}