{"version":3,"file":"StorybookComponentWrapper-d920e29a.js","sources":["../../../../node_modules/.pnpm/react-query@3.39.1_biqbaboplfbrettd7655fr4n2y/node_modules/react-query/devtools/index.js","../../src/lib/containers/StorybookComponentWrapper.tsx"],"sourcesContent":["if (process.env.NODE_ENV !== 'development') {\n  module.exports = {\n    ReactQueryDevtools: function () {\n      return null\n    },\n    ReactQueryDevtoolsPanel: function () {\n      return null\n    },\n  }\n} else {\n  module.exports = require('./development')\n}\n","import React, { useEffect, useMemo } from 'react'\nimport { MemoryRouter } from 'react-router-dom'\nimport {\n  defaultQueryClientConfig,\n  SynapseContextProvider,\n  SynapseContextType,\n} from '../utils/SynapseContext'\nimport { QueryClient } from 'react-query'\nimport { SynapseClient } from '../utils'\nimport { SynapseToastContainer } from './ToastMessage'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport dayjs from 'dayjs'\nimport {\n  detectSSOCode,\n  getAccessTokenFromCookie,\n  getUserProfile,\n  getAuthenticatedOn,\n  signOut,\n} from '../utils/SynapseClient'\nimport { SynapseClientError } from '../utils/SynapseClientError'\nimport { STACK_MAP, SynapseStack } from '../utils/functions/getEndpoint'\nimport defaultMuiTheme from '../utils/theme/DefaultTheme'\nimport {\n  adKnowledgePortalPalette,\n  arkPortalPalette,\n  bsmnPortalPalette,\n  cancerComplexityPortalPalette,\n  crcResearcherPortalPalette,\n  digitalHealthPortalPalette,\n  mtbPalette,\n  nfPortalPalette,\n  palette,\n  psychEncodePortalPalette,\n  sageBionetworksPalette,\n  stopAdPortalPalette,\n} from '../utils/theme/palette/Palettes'\n\nexport async function sessionChangeHandler() {\n  detectSSOCode()\n  let accessToken: string | undefined = await getAccessTokenFromCookie()\n  let profile\n  try {\n    profile = await getUserProfile(accessToken)\n  } catch (err) {\n    if (err instanceof SynapseClientError && err.status === 401) {\n      console.error(\n        'Encountered error fetching profile: ',\n        err,\n        'Signing out...',\n      )\n      await signOut(() => {})\n      accessToken = undefined\n    }\n    // Otherwise rethrow\n    throw err\n  }\n  let date\n  if (accessToken) {\n    getAuthenticatedOn(accessToken).then(authenticatedOn => {\n      date = dayjs(authenticatedOn.authenticatedOn).format('L LT')\n    })\n  }\n  return { accessToken, profile, authenticatedOn: date }\n}\nconst storybookQueryClient = new QueryClient(defaultQueryClientConfig)\n\nfunction overrideEndpoint(stack: SynapseStack) {\n  const endpointConfig = STACK_MAP[stack]\n  window['SRC'] = {\n    OVERRIDE_ENDPOINT_CONFIG: endpointConfig,\n  }\n  storybookQueryClient.resetQueries()\n}\n\nconst paletteMap = {\n  default: palette,\n  sageBionetworks: sageBionetworksPalette,\n  mtb: mtbPalette,\n  arkPortal: arkPortalPalette,\n  adKnowledgePortal: adKnowledgePortalPalette,\n  nfPortal: nfPortalPalette,\n  bsmnPortal: bsmnPortalPalette,\n  psychEncodePortal: psychEncodePortalPalette,\n  stopAdPortal: stopAdPortalPalette,\n  digitalHealthPortal: digitalHealthPortalPalette,\n  crcResearcherPortal: crcResearcherPortalPalette,\n  cancerComplexityPortal: cancerComplexityPortalPalette,\n}\n\n/**\n * Wraps storybook story components to ensure that all components receive required context.\n * @param props\n * @returns\n */\nexport function StorybookComponentWrapper(props: {\n  children: React.ReactNode\n  /* This will match the `globalTypes` object in preview.jsx. */\n  storybookContext: any\n}) {\n  const { storybookContext } = props\n\n  useEffect(() => {\n    overrideEndpoint(storybookContext.globals.stack as SynapseStack)\n  }, [storybookContext.globals.stack])\n\n  const [accessToken, setAccessToken] = React.useState<string | undefined>(\n    undefined,\n  )\n  useEffect(() => {\n    sessionChangeHandler().then(data => {\n      setAccessToken(data.accessToken)\n    })\n  })\n\n  useEffect(() => {\n    async function resetCache() {\n      await storybookQueryClient.cancelQueries()\n      storybookQueryClient.removeQueries()\n      await storybookQueryClient.invalidateQueries()\n    }\n    resetCache()\n  }, [accessToken])\n\n  const synapseContext: SynapseContextType = useMemo(\n    () => ({\n      accessToken: accessToken,\n      isInExperimentalMode: SynapseClient.isInSynapseExperimentalMode(),\n      utcTime: SynapseClient.getUseUtcTimeFromCookie(),\n      withErrorBoundary: true,\n      downloadCartPageUrl: '/?path=/story/download-downloadcartpage--demo',\n    }),\n    [accessToken],\n  )\n\n  return (\n    <SynapseContextProvider\n      queryClient={storybookQueryClient}\n      key={accessToken}\n      synapseContext={synapseContext}\n      theme={{\n        ...defaultMuiTheme,\n        palette: paletteMap[storybookContext.globals.palette],\n      }}\n    >\n      <MemoryRouter>\n        {storybookContext.globals.showReactQueryDevtools && (\n          <ReactQueryDevtools />\n        )}\n        <SynapseToastContainer />\n        <main>{props.children}</main>\n      </MemoryRouter>\n    </SynapseContextProvider>\n  )\n}\n\nexport default StorybookComponentWrapper\n"],"names":["devtoolsModule","sessionChangeHandler","detectSSOCode","accessToken","getAccessTokenFromCookie","profile","getUserProfile","err","SynapseClientError","signOut","date","getAuthenticatedOn","authenticatedOn","dayjs","storybookQueryClient","QueryClient","defaultQueryClientConfig","overrideEndpoint","stack","endpointConfig","STACK_MAP","paletteMap","palette","sageBionetworksPalette","mtbPalette","arkPortalPalette","adKnowledgePortalPalette","nfPortalPalette","bsmnPortalPalette","psychEncodePortalPalette","stopAdPortalPalette","digitalHealthPortalPalette","crcResearcherPortalPalette","cancerComplexityPortalPalette","StorybookComponentWrapper","props","storybookContext","useEffect","setAccessToken","React","data","resetCache","synapseContext","useMemo","SynapseClient.isInSynapseExperimentalMode","SynapseClient.getUseUtcTimeFromCookie","jsx","SynapseContextProvider","defaultMuiTheme","jsxs","MemoryRouter","ReactQueryDevtools","SynapseToastContainer"],"mappings":"8hBACEA,UAAiB,CACf,mBAAoB,UAAY,CAC9B,OAAO,IACR,EACD,wBAAyB,UAAY,CACnC,OAAO,IACR,CACF,EC6BH,eAAAC,GAAA,CACEC,IACA,IAAAC,EAAA,MAAAC,IACAC,EACA,GAAA,CACEA,EAAA,MAAAC,EAAAH,CAAA,CAA0C,OAAAI,EAAA,CAE1C,MAAAA,aAAAC,GAAAD,EAAA,SAAA,MACE,QAAA,MAAQ,uCACNA,EACA,gBACA,EAEF,MAAAE,EAAA,IAAA,CAAoB,CAAA,EACpBN,EAAA,QAGFI,CAAM,CAER,IAAAG,EACA,OAAAP,GACEQ,EAAAR,CAAA,EAAA,KAAAS,GAAA,CACEF,EAAAG,EAAAD,EAAA,eAAA,EAAA,OAAA,MAAA,CAA2D,CAAA,EAG/D,CAAA,YAAAT,EAAA,QAAAE,EAAA,gBAAAK,CAAA,CACF,CACA,MAAAI,EAAA,IAAAC,EAAAC,CAAA,EAEA,SAAAC,EAAAC,EAAA,CACE,MAAAC,EAAAC,EAAAF,CAAA,EACA,OAAA,IAAA,CAAgB,yBAAAC,CACY,EAE5BL,EAAA,aAAA,CACF,CAEA,MAAAO,EAAA,CAAmB,QAAAC,EACR,gBAAAC,EACQ,IAAAC,EACZ,UAAAC,EACM,kBAAAC,EACQ,SAAAC,EACT,WAAAC,EACE,kBAAAC,EACO,aAAAC,EACL,oBAAAC,EACO,oBAAAC,EACA,uBAAAC,CAEvB,EAOO,SAAAC,EAAAC,EAAA,CAKL,KAAA,CAAA,iBAAAC,CAAA,EAAAD,EAEAE,EAAAA,UAAA,IAAA,CACEpB,EAAAmB,EAAA,QAAA,KAAA,CAA+D,EAAA,CAAAA,EAAA,QAAA,KAAA,CAAA,EAGjE,KAAA,CAAAjC,EAAAmC,CAAA,EAAAC,EAAA,SAA4C,MAC1C,EAEFF,EAAAA,UAAA,IAAA,CACEpC,EAAA,EAAA,KAAAuC,GAAA,CACEF,EAAAE,EAAA,WAAA,CAA+B,CAAA,CAChC,CAAA,EAGHH,EAAAA,UAAA,IAAA,CACE,eAAAI,GAAA,CACE,MAAA3B,EAAA,gBACAA,EAAA,cAAA,EACA,MAAAA,EAAA,mBAA6C,CAE/C2B,GAAW,EAAA,CAAAtC,CAAA,CAAA,EAGb,MAAAuC,EAAAC,EAAA,QAA2C,KAAA,CAClC,YAAAxC,EACL,qBAAAyC,EAAA,EACgE,QAAAC,EAAA,EACjB,kBAAA,GAC5B,oBAAA,+CACE,GACvB,CAAA1C,CAAA,CACY,EAGd,OAAA2C,EACEC,EAAC,CAAA,YAAAjC,EACc,eAAA4B,EAEb,MAAA,CACO,GAAAM,EACF,QAAA3B,EAAAe,EAAA,QAAA,OAAA,CACiD,EACtD,SAAAa,EAAAC,EAAA,CAAA,SAAA,CAGGd,EAAA,QAAA,wBAAAU,EAAAK,EAAAA,mBAAA,CAAA,CAAA,EACqBL,EAAAM,EAAA,EAAA,EAECN,EAAA,OAAA,CAAA,SAAAX,EAAA,QAAA,CAAA,CACD,EAAA,CACxB,EAAAhC,CAbK,CAgBX"}