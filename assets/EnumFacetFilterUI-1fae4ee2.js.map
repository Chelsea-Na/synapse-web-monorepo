{"version":3,"file":"EnumFacetFilterUI-1fae4ee2.js","sources":["../../src/components/widgets/Checkbox.tsx","../../src/assets/icons/IconPlus.tsx","../../src/assets/icons/IconMinus.tsx","../../src/components/widgets/query-filter/FacetFilterHeader.tsx","../../src/components/widgets/query-filter/EnumFacetFilter/EnumFacetFilterOption.tsx","../../src/components/widgets/query-filter/EnumFacetFilter/EnumFacetFilterDropdown.tsx","../../src/components/widgets/query-filter/EnumFacetFilter/EnumFacetFilterUI.tsx"],"sourcesContent":["import Typography from '@mui/material/Typography'\nimport { uniqueId as _uniqueId } from 'lodash-es'\nimport React, { useState } from 'react'\n\nexport type CheckboxProps = React.PropsWithChildren<\n  {\n    hideLabel?: boolean\n    checked?: boolean\n    className?: string\n    onChange: (newValue: boolean) => void\n    isSelectAll?: boolean\n    onClick?: (event: React.SyntheticEvent<HTMLDivElement>) => void\n    disabled?: boolean\n    'data-testid'?: string\n    'aria-label'?: string\n  } & (\n    | {\n        label?: React.ReactNode\n        /* If the label is not a string, then we require an aria-label */\n        'aria-label': string\n      }\n    | { label: string }\n  )\n>\n\nexport const Checkbox: React.FunctionComponent<CheckboxProps> = (\n  props: CheckboxProps,\n) => {\n  const {\n    checked = false,\n    hideLabel = false,\n    isSelectAll = false,\n    disabled = false,\n    onChange,\n  } = props\n  const [uniqueId] = useState(_uniqueId('src-checkbox-'))\n\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isSelectAll && event.target.checked === false) {\n      /* \n         You can click the all checkbox from off -> on\n         but clicking it off is a no-op\n      */\n      onChange(true)\n    } else {\n      onChange(event.target.checked)\n    }\n  }\n\n  let className = 'checkbox'\n  if (props.className) {\n    className += ` ${props.className}`\n  }\n\n  return (\n    <div className={className} onClick={props.onClick}>\n      <input\n        aria-label={'aria-label' in props ? props['aria-label'] : props.label}\n        type=\"checkbox\"\n        checked={checked}\n        id={uniqueId}\n        onChange={handleCheckboxChange}\n        disabled={disabled}\n        data-testid={props['data-testid']}\n      />\n      <Typography\n        component={'label'}\n        variant={'smallText1'}\n        htmlFor={uniqueId}\n        sx={hideLabel ? { display: 'none' } : {}}\n      >\n        {props.label}\n      </Typography>\n      {props.children ?? <></>}\n    </div>\n  )\n}\n","import React from 'react'\n\ntype IconPlusProps = {\n  title?: string\n}\n\nconst IconPlus = (props: React.SVGProps<SVGSVGElement> & IconPlusProps) => (\n  <svg\n    {...props}\n    className={`Icon-Plus ${props.className ?? ''}`}\n    width=\"15\"\n    height=\"14\"\n    viewBox=\"0 0 15 14\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {props.title && <title>{props.title}</title>}\n    <path d=\"M14.3887 8H8.38867V14H6.38867V8H0.388672V6H6.38867V0H8.38867V6H14.3887V8Z\" />\n  </svg>\n)\n\nexport default IconPlus\n","import React from 'react'\n\ntype IconMinusProps = {\n  title?: string\n}\n\nconst IconMinus = (props: React.SVGProps<SVGSVGElement> & IconMinusProps) => (\n  <svg\n    {...props}\n    className={`Icon-Minus ${props.className ?? ''}`}\n    width=\"15\"\n    height=\"2\"\n    viewBox=\"0 0 15 2\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {props.title && <title>{props.title}</title>}\n    <path d=\"M14.3887 2H8.38867H6.38867H0.388672V0H6.38867H8.38867H14.3887V2Z\" />\n  </svg>\n)\n\nexport default IconMinus\n","import React from 'react'\nimport IconPlus from '../../../assets/icons/IconPlus'\nimport IconMinus from '../../../assets/icons/IconMinus'\n\nexport type FacetFilterHeaderProps = {\n  label: string\n  hideCollapsible?: boolean\n  isCollapsed: boolean\n  onClick: (newValue: boolean) => void\n}\n\nexport function FacetFilterHeader(props: FacetFilterHeaderProps) {\n  const { label, isCollapsed, onClick, hideCollapsible = false } = props\n  return (\n    <div className=\"FacetFilterHeader\">\n      <label className=\"FacetFilterHeader__label\">{label}</label>\n      {!hideCollapsible && (\n        <button\n          className=\"FacetFilterHeader__collapseToggleBtn\"\n          onClick={() => onClick(!isCollapsed)}\n        >\n          {isCollapsed ? (\n            <IconPlus className=\"icon-plus\" title=\"Expand Menu\" />\n          ) : (\n            <IconMinus className=\"icon-minus\" title=\"Collapse Menu\" />\n          )}\n        </button>\n      )}\n    </div>\n  )\n}\n","import { Checkbox } from '../../Checkbox'\nimport React from 'react'\n\ntype EnumFacetFilterOptionProps = {\n  readonly id: string\n  readonly label: string\n  readonly count: number\n  readonly isDropdown: boolean\n  readonly checked: boolean\n  readonly onChange: (selected: boolean) => void\n}\n\nexport function EnumFacetFilterOption(props: EnumFacetFilterOptionProps) {\n  const { id, label, count, isDropdown, checked, onChange } = props\n  return (\n    <div\n      className=\"EnumFacetFilter__checkboxContainer\"\n      onClick={() => {\n        // If this is a dropdown option, clicking anywhere in the field should toggle selection\n        if (isDropdown) {\n          onChange(!checked)\n        }\n      }}\n    >\n      <Checkbox\n        className=\"EnumFacetFilter__checkbox\"\n        onClick={event => event.stopPropagation()}\n        onChange={newValue => {\n          onChange(newValue)\n        }}\n        key={`${id}`}\n        checked={checked}\n        label={label}\n      ></Checkbox>\n      {isDropdown && (\n        <span className=\"EnumFacetFilter__count\">\n          ({count.toLocaleString()})\n        </span>\n      )}\n      {!isDropdown && (\n        <div className=\"EnumFacetFilter__count\">{count.toLocaleString()}</div>\n      )}\n    </div>\n  )\n}\n","import { Dropdown } from 'react-bootstrap'\nimport React, { useState } from 'react'\nimport { Fade, IconButton, Menu, Tooltip } from '@mui/material'\nimport IconSvg from '../../../IconSvg'\n\nexport type EnumFacetFilterDropdownProps = React.PropsWithChildren<{\n  menuText: string\n  hasSelection: boolean\n  dropdownType?: 'Icon' | 'SelectBox'\n}>\n\nfunction EnumFacetFilterSelectBox(\n  props: Omit<EnumFacetFilterDropdownProps, 'dropdownType'>,\n) {\n  const { menuText, children } = props\n\n  const [isShowDropdown, setIsShowDropdown] = useState<boolean>(false)\n  const onToggle = () => setIsShowDropdown(!isShowDropdown)\n\n  return (\n    <Dropdown\n      className={'EnumFacetFilter EnumFacetFilterSelect'}\n      show={isShowDropdown}\n      onToggle={onToggle}\n    >\n      <Dropdown.Toggle className=\"secondary-caret\" variant=\"gray-select\">\n        {menuText}\n      </Dropdown.Toggle>\n      <Dropdown.Menu>{children}</Dropdown.Menu>\n    </Dropdown>\n  )\n}\n\nfunction EnumFacetFilterIconDropdown(\n  props: Omit<EnumFacetFilterDropdownProps, 'dropdownType'>,\n) {\n  const { children, hasSelection } = props\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n  const handleClickDropdownIcon = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n\n  return (\n    <div className=\"EnumFacetFilter\">\n      <Tooltip title={'Filter by specific facet'}>\n        <IconButton onClick={handleClickDropdownIcon} size={'small'}>\n          <IconSvg\n            icon={'filter'}\n            wrap={false}\n            sx={{\n              color: hasSelection ? 'primary.main' : 'grey.700',\n              fontSize: '20px',\n            }}\n          />\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        TransitionComponent={Fade}\n      >\n        {children}\n      </Menu>\n    </div>\n  )\n}\n\nexport default function EnumFacetFilterDropdown(\n  props: EnumFacetFilterDropdownProps,\n) {\n  const { dropdownType } = props\n  if (dropdownType === 'SelectBox') {\n    return <EnumFacetFilterSelectBox {...props} />\n  } else {\n    return <EnumFacetFilterIconDropdown {...props} />\n  }\n}\n","import { Collapse, IconButton, TextField, Tooltip } from '@mui/material'\nimport React, { useMemo, useState } from 'react'\nimport { FacetColumnResultValueCount } from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../../../IconSvg/IconSvg'\nimport { Checkbox } from '../../Checkbox'\nimport { FacetFilterHeader } from '../FacetFilterHeader'\nimport { EnumFacetFilterOption } from './EnumFacetFilterOption'\nimport EnumFacetFilterDropdown from './EnumFacetFilterDropdown'\n\nconst MAX_ENUMERATION_VALUES_TO_SHOW = 5\n\nexport type RenderedFacetValue = FacetColumnResultValueCount & {\n  /* Text displayed for the option, and also used to filter in search */\n  displayText: string\n}\n\nexport type EnumFacetFilterUIProps = {\n  /* The title of the faceted column to be displayed */\n  facetTitle: string\n  /* List of all facet values and information associated with each value */\n  facetValues: RenderedFacetValue[]\n  /* Whether the 'All' checkbox should be selected. */\n  allIsSelected: boolean // allIsSelected cannot be derived from facetValues[*].isSelected. See PORTALS-2680\n  /* The EnumFacetFilter can be rendered as a collapsible panel or a dropdown. Default is `'Collapsible'` */\n  containerAs?: 'Collapsible' | 'Dropdown'\n  /* If `containerAs` is a dropdown, the dropdown can be either an IconButton or a SelectBox. Default is `'Icon'` */\n  dropdownType?: 'Icon' | 'SelectBox'\n  /* If true, hides the button to collapse the panel (only shown if `containerAs` is 'Collapsible'). Default is false.*/\n  hideCollapsible?: boolean\n  /* Called when an unselected value is selected */\n  onAddValueToSelection: (value: string) => void\n  /* Called when a selected value is unselected */\n  onRemoveValueFromSelection: (value: string) => void\n  /* Called when all values should be unselected (e.g. 'All' is clicked) */\n  onRemoveAllFacetSelections: () => void\n}\n\nfunction removeWhitespace(value: string): string {\n  return value.replace(/\\s/g, '').toLowerCase()\n}\n\nexport default function EnumFacetFilterUI(props: EnumFacetFilterUIProps) {\n  const {\n    allIsSelected,\n    containerAs = 'Collapsible',\n    dropdownType = 'Icon',\n    hideCollapsible = false,\n    facetValues,\n    onAddValueToSelection,\n    onRemoveValueFromSelection,\n    facetTitle,\n    onRemoveAllFacetSelections,\n  } = props\n  const [toggleShowAll, setToggleShowAll] = useState<boolean>(false)\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false)\n  const [showSearch, setShowSearch] = useState<boolean>(false)\n  const [searchTerm, setSearchText] = useState<string>('')\n\n  // e.g. we show a subset of facet values before hiding the rest behind \"Show More\"\n  // If the user has selected a value that would normally be hidden, always show all of the values\n  const valueIndexedGreaterThanMaxToShowIsSelected =\n    facetValues.length > MAX_ENUMERATION_VALUES_TO_SHOW &&\n    facetValues\n      .slice(MAX_ENUMERATION_VALUES_TO_SHOW)\n      .some(({ isSelected }) => isSelected)\n  const showAll =\n    toggleShowAll || showSearch || valueIndexedGreaterThanMaxToShowIsSelected\n\n  const facetValuesToShow = useMemo(() => {\n    if (showSearch && searchTerm.length > 0) {\n      return facetValues.filter(({ displayText }) => {\n        return (\n          displayText.toLowerCase().indexOf(searchTerm.trim().toLowerCase()) >\n          -1\n        )\n      })\n    }\n    if (showAll) {\n      return facetValues\n    }\n    return facetValues.slice(0, MAX_ENUMERATION_VALUES_TO_SHOW)\n  }, [facetValues, searchTerm, showSearch, showAll])\n\n  const textInput: React.RefObject<HTMLInputElement> = React.createRef()\n\n  const isDropdown = containerAs === 'Dropdown'\n  const showMoreButtonIsVisible =\n    !showAll && facetValues.length > MAX_ENUMERATION_VALUES_TO_SHOW\n  const showLessButtonIsVisible =\n    showAll &&\n    !searchTerm &&\n    !valueIndexedGreaterThanMaxToShowIsSelected &&\n    facetValues.length > MAX_ENUMERATION_VALUES_TO_SHOW\n\n  const content = (\n    <div className={isDropdown ? 'EnumFacetFilter__dropdown_menu' : ''}>\n      <div className=\"EnumFacetFilter__checkboxContainer--forAll\">\n        <TextField // Search Filter Text\n          sx={{\n            display: showSearch ? undefined : 'none',\n          }}\n          size={'small'}\n          fullWidth={true}\n          InputProps={{\n            startAdornment: (\n              <Tooltip title={'Close search'}>\n                <IconButton\n                  size={'small'}\n                  onClick={() => {\n                    setShowSearch(false)\n                    setToggleShowAll(false)\n                  }}\n                >\n                  <IconSvg\n                    sx={{ fontSize: 'inherit' }}\n                    wrap={false}\n                    icon=\"arrowBack\"\n                  />\n                </IconButton>\n              </Tooltip>\n            ),\n            endAdornment: searchTerm.length > 0 && (\n              <Tooltip title={'Clear'}>\n                <IconButton\n                  size={'small'}\n                  onClick={() => {\n                    setSearchText('')\n                    textInput.current?.focus()\n                  }}\n                >\n                  <IconSvg\n                    sx={{ fontSize: 'inherit' }}\n                    wrap={false}\n                    icon=\"close\"\n                  />\n                </IconButton>\n              </Tooltip>\n            ),\n          }}\n          type=\"text\"\n          placeholder=\"Find values\"\n          value={searchTerm}\n          ref={textInput}\n          onChange={e => {\n            setSearchText(e.target.value)\n          }}\n        />\n        {!showSearch && (\n          <div className=\"EnumFacetFilter__checkAll\">\n            <Checkbox\n              className=\"EnumFacetFilter__checkbox\"\n              onChange={() => {\n                if (!allIsSelected) {\n                  onRemoveAllFacetSelections()\n                }\n              }}\n              key=\"select_all\"\n              checked={allIsSelected}\n              label=\"All\"\n              isSelectAll={true}\n            />\n            <Tooltip title={'Search'}>\n              <IconButton\n                size={'small'}\n                className=\"EnumFacetFilter__searchbtn\"\n                onClick={() => {\n                  setSearchText('')\n                  setShowSearch(true)\n                  textInput.current?.focus()\n                }}\n              >\n                <IconSvg\n                  sx={{ fontSize: 'inherit' }}\n                  wrap={false}\n                  icon=\"search\"\n                />\n              </IconButton>\n            </Tooltip>\n          </div>\n        )}\n      </div>\n      <div>\n        {facetValuesToShow.map((facetValueAndCount, index: number) => {\n          const { isSelected, displayText, value, count } = facetValueAndCount\n\n          return (\n            <EnumFacetFilterOption\n              key={value}\n              id={[\n                removeWhitespace(facetTitle),\n                removeWhitespace(value),\n                index,\n              ].join('-')}\n              label={displayText}\n              count={count}\n              isDropdown={isDropdown}\n              checked={isSelected}\n              onChange={(newIsSelected: boolean) => {\n                if (newIsSelected) {\n                  onAddValueToSelection(value)\n                } else {\n                  onRemoveValueFromSelection(value)\n                }\n              }}\n            />\n          )\n        })}\n        {!isDropdown && (\n          <>\n            {showMoreButtonIsVisible && (\n              <button\n                className=\"EnumFacetFilter__showMoreFacetsBtn\"\n                onClick={() => setToggleShowAll(true)}\n              >\n                <div className=\"EnumFacetFilter__checkboxContainer\">\n                  <div className=\"EnumFacetFilter__showMoreFacetsLabel\">\n                    Show all ({facetValues.length})\n                  </div>\n                </div>\n              </button>\n            )}\n            {showLessButtonIsVisible && (\n              <button\n                className=\"EnumFacetFilter__showMoreFacetsBtn\"\n                onClick={() => setToggleShowAll(false)}\n              >\n                <div className=\"EnumFacetFilter__checkboxContainer\">\n                  <div className=\"EnumFacetFilter__showMoreFacetsLabel\">\n                    Show less\n                  </div>\n                </div>\n              </button>\n            )}\n          </>\n        )}\n        {facetValuesToShow.length <= 0 && (\n          <div className=\"EnumFacetFilter__noMatch\">No match found</div>\n        )}\n      </div>\n    </div>\n  )\n\n  const menuText = useMemo(() => {\n    if (allIsSelected) {\n      return 'All'\n    } else if (\n      !allIsSelected &&\n      facetValuesToShow.filter(item => item.isSelected).length === 1\n    ) {\n      return facetValuesToShow.filter(item => item.isSelected)[0].value\n    } else {\n      return 'Multiple Values Selected'\n    }\n  }, [allIsSelected, facetValuesToShow])\n\n  if (isDropdown) {\n    return (\n      <EnumFacetFilterDropdown\n        dropdownType={dropdownType}\n        menuText={menuText}\n        hasSelection={!allIsSelected}\n      >\n        {content}\n      </EnumFacetFilterDropdown>\n    )\n  } else {\n    return (\n      <>\n        <FacetFilterHeader\n          hideCollapsible={hideCollapsible}\n          isCollapsed={isCollapsed}\n          label={facetTitle}\n          onClick={(isCollapsed: boolean) => setIsCollapsed(isCollapsed)}\n        />\n        <Collapse className=\"EnumFacetFilter\" in={!isCollapsed}>\n          {content}\n        </Collapse>\n      </>\n    )\n  }\n}\n"],"names":["Checkbox","props","checked","hideLabel","isSelectAll","disabled","onChange","uniqueId","useState","_uniqueId","handleCheckboxChange","event","className","jsxs","jsx","Typography","Fragment","IconPlus","IconMinus","FacetFilterHeader","label","isCollapsed","onClick","hideCollapsible","EnumFacetFilterOption","id","count","isDropdown","newValue","EnumFacetFilterSelectBox","menuText","children","isShowDropdown","setIsShowDropdown","Dropdown","EnumFacetFilterIconDropdown","hasSelection","anchorEl","setAnchorEl","React","Tooltip","IconButton","IconSvg","Menu","Fade","EnumFacetFilterDropdown","dropdownType","MAX_ENUMERATION_VALUES_TO_SHOW","removeWhitespace","value","EnumFacetFilterUI","allIsSelected","containerAs","facetValues","onAddValueToSelection","onRemoveValueFromSelection","facetTitle","onRemoveAllFacetSelections","toggleShowAll","setToggleShowAll","setIsCollapsed","showSearch","setShowSearch","searchTerm","setSearchText","valueIndexedGreaterThanMaxToShowIsSelected","isSelected","showAll","facetValuesToShow","useMemo","displayText","textInput","showMoreButtonIsVisible","showLessButtonIsVisible","content","TextField","_a","e","facetValueAndCount","index","newIsSelected","item","isCollapsed2","Collapse"],"mappings":"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"}