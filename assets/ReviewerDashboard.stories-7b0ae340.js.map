{"version":3,"file":"ReviewerDashboard.stories-7b0ae340.js","sources":["../../src/synapse-queries/dataaccess/useAccessApprovals.ts","../../src/components/dataaccess/AccessApprovalsTable.tsx","../../src/components/dataaccess/AccessRequestSubmissionTable.tsx","../../src/components/dataaccess/AccessHistoryDashboard.tsx","../../src/components/dataaccess/AccessRequirementTable.tsx","../../src/components/dataaccess/AccessRequirementDashboard.tsx","../../src/components/dataaccess/AccessSubmissionDashboard.tsx","../../src/components/dataaccess/ReviewerDashboard.tsx"],"sourcesContent":["import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessApprovalSearchRequest,\n  AccessApprovalSearchResponse,\n} from '@sage-bionetworks/synapse-types'\n\nexport function useSearchAccessApprovalsInfinite(\n  params: AccessApprovalSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    AccessApprovalSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessApprovalSearchResponse, SynapseClientError>(\n    keyFactory.searchAccessApprovalsQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessApprovals(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useMemo, useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport {\n  AccessApprovalSearchRequest,\n  AccessApprovalSearchSort,\n  AccessApprovalSortField,\n  Direction,\n} from '@sage-bionetworks/synapse-types'\nimport { Button, Typography } from '@mui/material'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useSearchAccessApprovalsInfinite } from '../../synapse-queries/dataaccess/useAccessApprovals'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport SortIcon from '../../assets/icons/Sort'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { upperFirst } from 'lodash-es'\nimport { UserBadge } from '../UserCard/UserBadge'\n\nexport type AccessApprovalsTableProps = {\n  accessorId: string\n  accessRequirementId?: string\n}\nexport const AccessApprovalsTable: React.FunctionComponent<\n  AccessApprovalsTableProps\n> = ({ accessorId, accessRequirementId }) => {\n  const [sort, setSort] = useState<AccessApprovalSearchSort>({\n    field: AccessApprovalSortField.MODIFIED_ON,\n    direction: Direction.DESC,\n  })\n\n  const searchRequest: AccessApprovalSearchRequest = useMemo(\n    () => ({\n      accessorId,\n      accessRequirementId,\n      sort: [sort],\n    }),\n    [accessorId, accessRequirementId, sort],\n  )\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessApprovalsInfinite(searchRequest)\n  const accessApprovals = data?.pages.flatMap(page => page.results) ?? []\n\n  const onSort = (field: AccessApprovalSortField) => {\n    if (sort.field === field) {\n      setSort({\n        field,\n        direction:\n          sort.direction === Direction.DESC ? Direction.ASC : Direction.DESC,\n      })\n    } else {\n      setSort({ field, direction: Direction.DESC })\n    }\n  }\n  return (\n    <div className=\"AccessApprovalsTable bootstrap-4-backport\">\n      <Table striped borderless bordered={false}>\n        <thead>\n          <tr>\n            <th>AR ID</th>\n            <th>Access Requirement Name</th>\n            <th>Submitter</th>\n            <th>Status</th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Modified Date</span>\n                <SortIcon\n                  role=\"button\"\n                  active={sort.field === AccessApprovalSortField.MODIFIED_ON}\n                  direction={\n                    sort.field === 'MODIFIED_ON'\n                      ? sort.direction === 'DESC'\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(AccessApprovalSortField.MODIFIED_ON)}\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Expires</span>\n                <SortIcon\n                  role=\"button\"\n                  active={sort.field === AccessApprovalSortField.EXPIRED_ON}\n                  direction={\n                    sort.field === 'EXPIRED_ON'\n                      ? sort.direction === 'DESC'\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(AccessApprovalSortField.EXPIRED_ON)}\n                />\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {accessApprovals.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <a\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!AccessRequirement:AR_ID=${item.accessRequirementId}`}\n                  >\n                    {item.accessRequirementId}\n                  </a>\n                </td>\n                <td>{item.accessRequirementName}</td>\n                <td>\n                  <UserBadge userId={item.submitterId} />\n                </td>\n                <td>{upperFirst(item.state.toLocaleLowerCase())}</td>\n                <td>{formatDate(dayjs(item.modifiedOn))}</td>\n                <td\n                  className={`${\n                    item.expiredOn\n                      ? new Date() > new Date(item.expiredOn)\n                        ? 'expired'\n                        : ''\n                      : 'non-expire'\n                  } remove-border`}\n                >\n                  {item.expiredOn ? formatDate(dayjs(item.expiredOn)) : 'Never'}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {isLoading && (\n        <div className=\"SRC-center-text\">\n          <SynapseSpinner size={40} />\n        </div>\n      )}\n      {!isLoading && accessApprovals.length === 0 && (\n        <Typography className=\"SRC-center-text\" variant=\"body1\">\n          No Results\n        </Typography>\n      )}\n      {hasNextPage && (\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show More\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { upperFirst } from 'lodash-es'\nimport dayjs from 'dayjs'\nimport React, { useMemo, useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport SortIcon from '../../assets/icons/Sort'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { useSearchAccessSubmissionsInfinite } from '../../synapse-queries/dataaccess/useDataAccessSubmission'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\nimport {\n  Direction,\n  SubmissionReviewerFilterType,\n  SubmissionSearchRequest,\n  SubmissionSearchSort,\n  SubmissionSortField,\n  SubmissionState,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport { Button, Typography } from '@mui/material'\nimport UserOrTeamBadge from '../UserOrTeamBadge/UserOrTeamBadge'\nimport { UserBadge } from '../UserCard/UserBadge'\n\nexport type AccessRequestSubmissionTableProps = {\n  showSubmitter?: boolean\n  showStatus?: boolean\n  showRequesters?: boolean\n  accessorId?: string\n  accessRequirementId?: string\n  reviewerId?: string\n  submissionState?: SubmissionState\n  reviewerFilterType?: SubmissionReviewerFilterType\n}\n\nexport const AccessRequestSubmissionTable: React.FunctionComponent<\n  AccessRequestSubmissionTableProps\n> = ({\n  showSubmitter,\n  showStatus,\n  showRequesters,\n  accessorId,\n  accessRequirementId,\n  reviewerId,\n  submissionState,\n  reviewerFilterType,\n}) => {\n  const [sort, setSort] = useState<SubmissionSearchSort>({\n    field: SubmissionSortField.CREATED_ON,\n    direction: Direction.DESC,\n  })\n\n  const searchRequest: SubmissionSearchRequest = useMemo(\n    () => ({\n      accessorId,\n      accessRequirementId,\n      submissionState,\n      reviewerId,\n      reviewerFilterType,\n      sort: [sort],\n    }),\n    [\n      accessorId,\n      accessRequirementId,\n      submissionState,\n      reviewerId,\n      reviewerFilterType,\n      sort,\n    ],\n  )\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessSubmissionsInfinite(searchRequest)\n\n  const accessSubmissions = data?.pages.flatMap(page => page.results) ?? []\n\n  const onSort = (field: SubmissionSortField) => {\n    if (sort.field === field) {\n      setSort({ field, direction: sort.direction === 'DESC' ? 'ASC' : 'DESC' })\n    } else {\n      setSort({ field, direction: 'DESC' })\n    }\n  }\n  return (\n    <div className=\"bootstrap-4-backport AccessSubmissionTable\">\n      <Table striped borderless bordered={false}>\n        <thead>\n          <tr>\n            <th>REQUEST</th>\n            <th>Access Requirement Name</th>\n            {showSubmitter && <th>Submitter</th>}\n            {showStatus && <th>Status</th>}\n            {showRequesters && <th>Requesters</th>}\n            <th>Reviewer(s)</th>\n            <th>\n              Created Date\n              <SortIcon\n                role=\"button\"\n                style={{ float: 'right' }}\n                active={sort.field === 'CREATED_ON'}\n                aria-label=\"Sort by Created On\"\n                direction={\n                  sort.field === 'CREATED_ON'\n                    ? sort.direction === 'DESC'\n                      ? 'DESC'\n                      : 'ASC'\n                    : 'DESC'\n                }\n                onClick={() => onSort(SubmissionSortField.CREATED_ON)}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {accessSubmissions.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <Link to={`/Submissions/${item.id}`}>{item.id}</Link>\n                </td>\n                <td>{item.accessRequirementName}</td>\n                {showSubmitter && (\n                  <td>\n                    <UserOrTeamBadge principalId={item.submitterId} />\n                  </td>\n                )}\n                {showStatus && (\n                  <td>{upperFirst(item.state.toLocaleLowerCase())}</td>\n                )}\n                {showRequesters && (\n                  <td>\n                    <UserOrTeamBadge principalId={item.submitterId} />\n                    {item.accessorChanges\n                      .filter(user => item.submitterId !== user.userId)\n                      .map(requester => (\n                        <li key={requester.userId}>\n                          <UserBadge\n                            userId={requester.userId}\n                            className=\"requester\"\n                          />\n                        </li>\n                      ))}\n                  </td>\n                )}\n                <td>\n                  {item.accessRequirementReviewerIds.length === 0 ? (\n                    <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n                  ) : (\n                    item.accessRequirementReviewerIds.map(reviewerId => (\n                      <UserOrTeamBadge\n                        key={reviewerId}\n                        principalId={reviewerId}\n                      />\n                    ))\n                  )}\n                </td>\n                <td>{formatDate(dayjs(item.createdOn))}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {isLoading && (\n        <div className=\"SRC-center-text\">\n          <SynapseSpinner size={40} />\n        </div>\n      )}\n      {!isLoading && accessSubmissions.length == 0 && (\n        <Typography className=\"SRC-center-text\" variant=\"body1\">\n          No Results\n        </Typography>\n      )}\n      {!hasNextPage ? (\n        ''\n      ) : (\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show More\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { TYPE_FILTER } from '@sage-bionetworks/synapse-types'\nimport { Typography } from '@mui/material'\nimport {\n  AccessApprovalsTable,\n  AccessApprovalsTableProps,\n} from './AccessApprovalsTable'\nimport {\n  AccessRequestSubmissionTable,\n  AccessRequestSubmissionTableProps,\n} from './AccessRequestSubmissionTable'\nimport UserOrTeamBadge from '../UserOrTeamBadge/UserOrTeamBadge'\nimport UserSearchBoxV2 from '../UserSearchBox/UserSearchBoxV2'\nimport AccessRequirementSearchBox from './AccessRequirementSearchBox/AccessRequirementSearchBox'\nimport { useGetCurrentUserBundle } from '../../synapse-queries'\n\nexport const UserHistoryDashboard = () => {\n  const [accessRequirementId, setAccessRequirementId] = useState<\n    string | undefined\n  >()\n  const [accessorId, setAccessorId] = useState<string>('')\n  const [approvalTableProps, setApprovalTableProps] =\n    useState<AccessApprovalsTableProps>({\n      accessorId,\n      accessRequirementId,\n    })\n  const [submissionTableProps, setSubmissionTableProps] =\n    useState<AccessRequestSubmissionTableProps>({\n      showStatus: true,\n      showSubmitter: true,\n      accessorId,\n      accessRequirementId,\n    })\n\n  const { data: userBundle } = useGetCurrentUserBundle()\n  const hasActPermissions = userBundle?.isACTMember\n\n  const location = useLocation()\n  const history = useHistory()\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  const onAccessorChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setAccessorId(selected)\n    } else {\n      setAccessorId('')\n    }\n  }, [])\n\n  useEffect(() => {\n    const initializeFromSearchParam = () => {\n      const initialParams = new URLSearchParams(location.search)\n      setAccessRequirementId(\n        initialParams.get('accessRequirementId') ?? undefined,\n      )\n      setAccessorId(initialParams.get('accessorId') ?? '')\n    }\n    initializeFromSearchParam()\n  }, [location.search])\n\n  useDebouncedEffect(\n    () => {\n      const updateQueryParams = (\n        accessRequirementId: string | undefined,\n        accessorId: string,\n      ) => {\n        const params = new URLSearchParams(\n          omitBy(\n            {\n              accessRequirementId,\n              accessorId,\n            },\n            item => item === undefined || item === '',\n          ) as Record<string, string>,\n        )\n        history.replace({\n          pathname: location.pathname,\n          search: params.toString(),\n        })\n      }\n\n      updateQueryParams(accessRequirementId, accessorId)\n      setApprovalTableProps({\n        accessorId,\n        accessRequirementId,\n      })\n      setSubmissionTableProps({\n        showStatus: true,\n        showSubmitter: true,\n        accessorId,\n        accessRequirementId,\n      })\n    },\n    [accessRequirementId, accessorId, history, location.pathname],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const NoSearchResultComponent = () => {\n    return (\n      <div className=\"text-center\">\n        <img\n          className=\"SearchPlaceholderImage\"\n          alt=\"Begin searching\"\n          src=\"https://s3.amazonaws.com/static.synapse.org/images/search-happy.svg\"\n        />\n        <Typography variant=\"body1Italic\">\n          Select a user using the search field above to view their data access\n          history\n        </Typography>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"UserHistoryDashboard bootstrap-4-backport\">\n      <div className=\"InputPanel\">\n        <div>\n          <Typography\n            component=\"label\"\n            variant=\"smallText2\"\n            htmlFor=\"user-filter\"\n          >\n            Select a user to view their access history\n          </Typography>\n          <UserSearchBoxV2\n            inputId=\"user-filter\"\n            onChange={onAccessorChange}\n            defaultValue={accessorId}\n            placeholder=\"Search for a user name\"\n            typeFilter={TYPE_FILTER.USERS_ONLY}\n          />\n        </div>\n\n        {accessorId && (\n          <div>\n            <Typography\n              component=\"label\"\n              variant=\"smallText2\"\n              htmlFor=\"arName-filter\"\n            >\n              Filter by Access Requirement Name\n            </Typography>\n            <AccessRequirementSearchBox\n              inputId=\"arName-filter\"\n              placeholder=\"Search for an Access Requirement Name \"\n              onChange={setAccessRequirementId}\n            />\n          </div>\n        )}\n      </div>\n\n      {accessorId ? (\n        <>\n          <Typography variant=\"headline3\">\n            Submissions including <UserOrTeamBadge principalId={accessorId} />\n          </Typography>\n          <AccessRequestSubmissionTable {...submissionTableProps} />\n          {hasActPermissions && (\n            <>\n              <Typography variant=\"headline3\">\n                Status in Access Requirements\n              </Typography>\n              <AccessApprovalsTable {...approvalTableProps} />\n            </>\n          )}\n        </>\n      ) : (\n        <NoSearchResultComponent />\n      )}\n    </div>\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useMemo, useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport SortIcon from '../../assets/icons/Sort'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useSearchAccessRequirementsInfinite } from '../../synapse-queries/dataaccess/useAccessRequirements'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\nimport {\n  ACCESS_REQUIREMENT_CONCRETE_TYPE,\n  ACCESS_TYPE,\n  ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE,\n  ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE,\n  LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE,\n  LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE,\n  MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE,\n  MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE,\n  SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE,\n  SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE,\n  TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE,\n  TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  AccessRequirementSearchRequest,\n  AccessRequirementSearchSort,\n} from '@sage-bionetworks/synapse-types'\nimport { Button, Typography } from '@mui/material'\nimport { EntityLink } from '../EntityLink'\nimport { StarTwoTone } from '@mui/icons-material'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport UserOrTeamBadge from '../UserOrTeamBadge/UserOrTeamBadge'\n\nexport type AccessRequirementTableProps = {\n  nameOrID?: string\n  relatedProjectId?: string\n  reviewerId?: string\n  accessType?: ACCESS_TYPE\n  onCreateNewAccessRequirementClicked?: () => void\n}\n\nexport function accessRequirementConcreteTypeValueToDisplayValue(\n  accessRequirementConcreteTypeValue: ACCESS_REQUIREMENT_CONCRETE_TYPE,\n) {\n  switch (accessRequirementConcreteTypeValue) {\n    case TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE:\n      return TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE\n    case SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE: {\n      return SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE\n    }\n    case MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE:\n      return MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE\n    case ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE:\n      return ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE\n    case LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE:\n      return LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE\n    default:\n      return 'Unknown'\n  }\n}\nconst isIntegerInput = (v: string): boolean => {\n  return /^\\d+$/.test(v)\n}\n\nexport function AccessRequirementTable(props: AccessRequirementTableProps) {\n  const {\n    nameOrID,\n    relatedProjectId,\n    reviewerId,\n    accessType,\n    onCreateNewAccessRequirementClicked,\n  } = props\n\n  const [sort, setSort] = useState<AccessRequirementSearchSort>({\n    field: 'CREATED_ON',\n    direction: 'DESC',\n  })\n\n  const searchRequest: Omit<AccessRequirementSearchRequest, 'nextPageToken'> =\n    useMemo(() => {\n      // SWC-6615: If the input string is a single integer, assume it's the AR ID.  Otherwise use as the nameContains field.\n      let nameContains: string | undefined = undefined\n      let ids: number[] | undefined = undefined\n      if (nameOrID !== undefined) {\n        const nameOrIDTrimmed = nameOrID.trim()\n        if (isIntegerInput(nameOrIDTrimmed)) {\n          ids = [Number.parseInt(nameOrIDTrimmed)]\n        } else {\n          nameContains = nameOrIDTrimmed\n        }\n      }\n      return {\n        ids,\n        nameContains,\n        relatedProjectId,\n        reviewerId,\n        accessType,\n        sort: [sort],\n      }\n    }, [nameOrID, relatedProjectId, reviewerId, accessType, sort])\n\n  const { data, hasNextPage, fetchNextPage, isLoading } =\n    useSearchAccessRequirementsInfinite(searchRequest)\n\n  const accessRequirements = data?.pages.flatMap(page => page.results) ?? []\n  const onSort = (field: AccessRequirementSearchSort['field']) => {\n    if (sort.field === field) {\n      setSort({ field, direction: sort.direction === 'DESC' ? 'ASC' : 'DESC' })\n    } else {\n      setSort({ field, direction: 'DESC' })\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <div className=\"SRC-split\">\n        <Typography variant=\"headline3\" style={{ marginBottom: 0 }}>\n          Access Requirements\n        </Typography>\n        {onCreateNewAccessRequirementClicked && (\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={onCreateNewAccessRequirementClicked}\n            startIcon={<StarTwoTone />}\n          >\n            New Access Requirement\n          </Button>\n        )}\n      </div>\n\n      <div className=\"AccessRequirementsTable\">\n        <Table striped borderless bordered={false}>\n          <thead className=\"access-requirements-header\">\n            <tr>\n              <th>AR ID</th>\n              <th>\n                <span className=\"SRC-split\">\n                  <span>Access Requirement Name</span>\n                  <SortIcon\n                    role=\"button\"\n                    onClick={() => onSort('NAME')}\n                    aria-label=\"Sort by Name\"\n                    active={sort.field === 'NAME'}\n                    direction={sort.field === 'NAME' ? sort.direction : 'DESC'}\n                  />\n                </span>\n              </th>\n              <th>Type</th>\n              <th>Related to Projects</th>\n              <th>Reviewer</th>\n              <th>Last Modified</th>\n              <th>\n                <span className=\"SRC-split\">\n                  <span>Created On</span>\n                  <SortIcon\n                    role=\"button\"\n                    onClick={() => onSort('CREATED_ON')}\n                    active={sort.field === 'CREATED_ON'}\n                    aria-label=\"Sort by Created On\"\n                    direction={\n                      sort.field === 'CREATED_ON' ? sort.direction : 'DESC'\n                    }\n                  />\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {accessRequirements.map(ar => {\n              return (\n                <tr key={ar.id}>\n                  <td>\n                    <a\n                      href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!AccessRequirement:AR_ID=${ar.id}`}\n                    >\n                      {ar.id}\n                    </a>\n                  </td>\n                  <td>{ar.name}</td>\n                  <td>\n                    {accessRequirementConcreteTypeValueToDisplayValue(ar.type)}\n                  </td>\n                  <td>\n                    {ar.relatedProjectIds.map(projectId => (\n                      <React.Fragment key={projectId}>\n                        <EntityLink entity={projectId} />{' '}\n                        <span className=\"InlineLabel\">({projectId})</span>\n                        <br />\n                      </React.Fragment>\n                    ))}\n                  </td>\n                  <td>\n                    {ar.reviewerIds.length === 0 ? (\n                      <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n                    ) : (\n                      ar.reviewerIds.map(reviewerId => (\n                        <UserOrTeamBadge\n                          key={reviewerId}\n                          principalId={reviewerId}\n                        />\n                      ))\n                    )}\n                  </td>\n                  <td>{formatDate(dayjs(ar.modifiedOn))}</td>\n                  <td>{formatDate(dayjs(ar.createdOn))}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </Table>\n        {isLoading && (\n          <div className=\"SRC-center-text\">\n            <SynapseSpinner size={40} />\n          </div>\n        )}\n        {!isLoading && accessRequirements.length === 0 && (\n          <Typography className=\"SRC-center-text\" variant=\"body1\">\n            No Results\n          </Typography>\n        )}\n        {!hasNextPage ? (\n          <></>\n        ) : (\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {\n              fetchNextPage()\n            }}\n          >\n            Show More\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Box, InputAdornment, TextField, Typography } from '@mui/material'\nimport { SearchOutlined } from '@mui/icons-material'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { EntityType } from '@sage-bionetworks/synapse-types'\nimport { EntityFinderModal } from '../EntityFinder/EntityFinderModal'\nimport { FinderScope } from '../EntityFinder/tree/EntityTree'\nimport UserSearchBoxV2 from '../UserSearchBox/UserSearchBoxV2'\nimport {\n  AccessRequirementTable,\n  AccessRequirementTableProps,\n} from './AccessRequirementTable'\nimport { SYNAPSE_ENTITY_ID_REGEX } from '../../utils/functions/RegularExpressions'\nimport { InputSizedButton } from '../styled/InputSizedButton'\n\nexport type AccessRequirementDashboardProps = {\n  onCreateNewAccessRequirementClicked?: () => void\n}\n\nexport function AccessRequirementDashboard(\n  props: AccessRequirementDashboardProps,\n) {\n  // Amount of time to wait after an input value changes before sending a new request\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  const { onCreateNewAccessRequirementClicked } = props\n\n  const location = useLocation()\n  const history = useHistory()\n\n  const [nameOrID, setNameOrID] = useState<string>('')\n  const [relatedProjectId, setRelatedProjectId] = useState<string | undefined>(\n    undefined,\n  )\n  const [reviewerId, setReviewerId] = useState<string | undefined>(undefined)\n\n  const projectFilterFieldIsError: boolean = useMemo(\n    () =>\n      !!(relatedProjectId && !SYNAPSE_ENTITY_ID_REGEX.exec(relatedProjectId)),\n    [relatedProjectId],\n  )\n\n  useEffect(() => {\n    function initializeFromSearchParams() {\n      const initialParams = new URLSearchParams(location.search)\n      setNameOrID(initialParams.get('nameOrID') ?? '')\n      setRelatedProjectId(initialParams.get('relatedProjectId') ?? undefined)\n      setReviewerId(initialParams.get('reviewerId') ?? undefined)\n    }\n    initializeFromSearchParams()\n  }, [location.search])\n\n  const [showEntityFinder, setShowEntityFinder] = useState(false)\n\n  const [tableProps, setTableProps] = useState<AccessRequirementTableProps>({\n    nameOrID,\n    relatedProjectId,\n    reviewerId,\n    onCreateNewAccessRequirementClicked,\n  })\n\n  /**\n   * When an input changes, update the props passed to the table and update the search params.\n   *\n   * Debounced to prevent firing many queries while the user is entering text.\n   */\n  useDebouncedEffect(\n    () => {\n      function updateQueryParams(\n        nameOrID: string | undefined,\n        relatedProjectId: string | undefined,\n        reviewerId: string | undefined,\n      ) {\n        // Don't include undefined/empty parameters\n        const params = omitBy(\n          {\n            nameOrID,\n            relatedProjectId,\n            reviewerId,\n          },\n          item => item === undefined || item === '',\n        ) as Record<string, string>\n\n        // Add the new params to the URL\n        // Replace history because intuitively, the user has not navigated to a new page\n        const paramsObject = new URLSearchParams(params)\n        history.replace({\n          pathname: location.pathname,\n          search: paramsObject.toString(),\n        })\n      }\n\n      setTableProps({\n        nameOrID,\n        relatedProjectId,\n        reviewerId,\n        onCreateNewAccessRequirementClicked,\n      })\n      updateQueryParams(nameOrID, relatedProjectId, reviewerId)\n    },\n    [\n      nameOrID,\n      relatedProjectId,\n      reviewerId,\n      onCreateNewAccessRequirementClicked,\n      history,\n      location.pathname,\n    ],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const onReviewerChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setReviewerId(selected)\n    } else {\n      setReviewerId(undefined)\n    }\n  }, [])\n\n  return (\n    <div className=\"AccessRequirementDashboard\">\n      <EntityFinderModal\n        configuration={{\n          initialScope: FinderScope.ALL_PROJECTS,\n          initialContainer: null,\n          selectMultiple: false,\n          selectableTypes: [EntityType.PROJECT],\n          treeOnly: true,\n        }}\n        show={showEntityFinder}\n        onCancel={() => {\n          setShowEntityFinder(false)\n        }}\n        title={'Select Project to Filter Access Requirements'}\n        promptCopy={\n          'Select a project to find Access Requirements that are associated with that project. Access Requirements will be found if the Access Requirement is applied to the project, or if it is applied to any item inside the project.'\n        }\n        onConfirm={selected => {\n          setRelatedProjectId(selected[0].targetId)\n          setShowEntityFinder(false)\n        }}\n        confirmButtonCopy={'Select'}\n      />\n      <form className=\"InputPanel\">\n        <div>\n          <TextField\n            label=\"Filter by Access Requirement Name or ID\"\n            id=\"ar-name-filter\"\n            type=\"text\"\n            fullWidth\n            placeholder=\"Search for an Access Requirement Name or ID\"\n            value={nameOrID}\n            onChange={e => {\n              setNameOrID(e.target.value)\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <SearchOutlined />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <Box display=\"flex\" gap=\"5px\" alignItems=\"stretch\">\n          <TextField\n            label=\"Filter by Project\"\n            id=\"project-id-filter\"\n            type=\"text\"\n            fullWidth\n            placeholder=\"Enter a project SynID\"\n            error={projectFilterFieldIsError}\n            helperText={\n              projectFilterFieldIsError\n                ? 'Value must be a Synapse ID, e.g. \"syn1234\"'\n                : undefined\n            }\n            value={relatedProjectId}\n            onChange={e => {\n              const newValue = e.target.value\n              if (newValue === '') {\n                setRelatedProjectId(undefined)\n              } else {\n                setRelatedProjectId(newValue)\n              }\n            }}\n          />\n          <InputSizedButton\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {\n              setShowEntityFinder(true)\n            }}\n          >\n            Browse\n          </InputSizedButton>\n        </Box>\n        <div>\n          <Typography\n            component=\"label\"\n            variant=\"smallText2\"\n            htmlFor=\"reviewer-filter\"\n          >\n            Filter by Reviewer\n          </Typography>\n          <UserSearchBoxV2\n            inputId=\"reviewer-filter\"\n            placeholder=\"Search for a username or team name\"\n            defaultValue={reviewerId}\n            onChange={onReviewerChange}\n          />\n        </div>\n      </form>\n      <AccessRequirementTable {...tableProps} />\n    </div>\n  )\n}\n\nexport default AccessRequirementDashboard\n","import { omitBy } from 'lodash-es'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useDebouncedEffect } from '../../utils/hooks/useDebouncedEffect'\nimport { SubmissionState } from '@sage-bionetworks/synapse-types'\nimport { TYPE_FILTER } from '@sage-bionetworks/synapse-types'\nimport { Typography } from '@mui/material'\nimport {\n  AccessRequestSubmissionTable,\n  AccessRequestSubmissionTableProps,\n} from './AccessRequestSubmissionTable'\nimport UserSearchBoxV2 from '../UserSearchBox/UserSearchBoxV2'\nimport AccessRequirementSearchBox from './AccessRequirementSearchBox/AccessRequirementSearchBox'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\n\nexport const getReviewerFilterID = (selected: string | null) => {\n  if (selected && selected !== ACT_TEAM_ID.toString()) {\n    return selected\n  } else {\n    return undefined\n  }\n}\n\nexport const DataAccessSubmissionDashboard = () => {\n  const [accessRequirementId, setAccessRequirementId] = useState<\n    string | undefined\n  >()\n  const [accessorId, setAccessorId] = useState<string | undefined>()\n  const [reviewerId, setReviewerId] = useState<string | undefined>()\n  const [tableProps, setTableProps] =\n    useState<AccessRequestSubmissionTableProps>({\n      accessRequirementId,\n      accessorId,\n      reviewerId,\n      showRequesters: true,\n      submissionState: SubmissionState.SUBMITTED,\n    })\n\n  const location = useLocation()\n  const history = useHistory()\n  const INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\n  useEffect(() => {\n    const initializeFromSearchParam = () => {\n      const initialParams = new URLSearchParams(location.search)\n      setAccessRequirementId(\n        initialParams.get('accessRequirementId') ?? undefined,\n      )\n      setAccessorId(initialParams.get('accessorId') ?? undefined)\n      setReviewerId(initialParams.get('reviewerId') ?? undefined)\n    }\n    initializeFromSearchParam()\n  }, [location.search])\n\n  const onRequesterChange = useCallback((selected: string | null) => {\n    if (selected) {\n      setAccessorId(selected)\n    } else {\n      setAccessorId(undefined)\n    }\n  }, [])\n\n  const onReviewerChange = useCallback((selected: string | null) => {\n    setReviewerId(getReviewerFilterID(selected))\n  }, [])\n\n  useDebouncedEffect(\n    () => {\n      const updateQueryParams = (\n        accessRequirementId: string | undefined,\n        accessorId: string | undefined,\n        reviewerId: string | undefined,\n      ) => {\n        const params = new URLSearchParams(\n          omitBy(\n            {\n              accessRequirementId,\n              accessorId,\n              reviewerId,\n            },\n            item => item === undefined || item === '',\n          ) as Record<string, string>,\n        )\n        history.replace({\n          pathname: location.pathname,\n          search: params.toString(),\n        })\n      }\n\n      updateQueryParams(accessRequirementId, accessorId, reviewerId)\n      setTableProps({\n        accessRequirementId,\n        accessorId,\n        reviewerId,\n        showRequesters: true,\n        submissionState: SubmissionState.SUBMITTED,\n      })\n    },\n    [accessRequirementId, accessorId, reviewerId, history, location.pathname],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  return (\n    <div className=\"AccessSubmissionDashboard\">\n      <div className=\"InputPanel\">\n        <div>\n          <Typography\n            component=\"label\"\n            variant=\"smallText2\"\n            htmlFor=\"arId-filter\"\n          >\n            Filter by Access Requirement Name\n          </Typography>\n          <AccessRequirementSearchBox\n            inputId=\"arId-filter\"\n            onChange={setAccessRequirementId}\n            placeholder=\"Search for an Access Requirement Name \"\n          />\n        </div>\n        <div>\n          <Typography\n            component=\"label\"\n            variant=\"smallText2\"\n            htmlFor=\"requester-filter\"\n          >\n            Filter by Requester\n          </Typography>\n          <UserSearchBoxV2\n            inputId=\"requester-filter\"\n            placeholder=\"Search for a user name\"\n            defaultValue={accessorId}\n            onChange={onRequesterChange}\n            typeFilter={TYPE_FILTER.USERS_ONLY}\n          />\n        </div>\n        <div>\n          <Typography\n            component=\"label\"\n            variant=\"smallText2\"\n            htmlFor=\"reviewer-filter\"\n          >\n            Filter by Reviewer\n          </Typography>\n          <UserSearchBoxV2\n            inputId=\"reviewer-filter\"\n            placeholder=\"Search for a user or team name\"\n            defaultValue={reviewerId}\n            onChange={onReviewerChange}\n          />\n        </div>\n      </div>\n\n      <Typography variant=\"headline3\">Access Request Submissions</Typography>\n      <AccessRequestSubmissionTable {...tableProps} />\n    </div>\n  )\n}\n","import React, { useCallback } from 'react'\nimport {\n  BrowserRouter,\n  BrowserRouterProps,\n  MemoryRouter,\n  MemoryRouterProps,\n  NavLink,\n  Route,\n  Switch,\n  useParams,\n} from 'react-router-dom'\nimport { useGetCurrentUserBundle } from '../../synapse-queries/user/useUserBundle'\nimport { Typography } from '@mui/material'\nimport { SynapseErrorBoundary } from '../error/ErrorBanner'\nimport IconSvg, { IconName } from '../IconSvg/IconSvg'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport { UserHistoryDashboard } from './AccessHistoryDashboard'\nimport { AccessRequirementDashboard } from './AccessRequirementDashboard'\nimport { DataAccessSubmissionDashboard } from './AccessSubmissionDashboard'\nimport SubmissionPage from './SubmissionPage'\nimport OrientationBanner from '../OrientationBanner'\n\nfunction LinkTab(props: {\n  href: string\n  children: React.ReactNode\n  icon: IconName\n}) {\n  const { href, children, icon } = props\n  return (\n    <NavLink className=\"Tab\" role=\"tab\" to={href}>\n      <IconSvg\n        icon={icon}\n        sx={{\n          paddingRight: '0.2rem',\n        }}\n      />\n      <Typography variant=\"buttonLink\">{children}</Typography>\n    </NavLink>\n  )\n}\n\ntype ReviewerDashboardProps = {\n  /** Used to determine the base path for the component. Default is #!DataAccessManagement:default */\n  routerBaseName?: string\n  /** If true use a MemoryRouter, which prevents the browser URL from updating. For demo purposes only. */\n  useMemoryRouter?: boolean\n}\n\nexport function ReviewerDashboard(props: ReviewerDashboardProps) {\n  const {\n    routerBaseName = '#!DataAccessManagement:default',\n    useMemoryRouter = false,\n  } = props\n\n  const { data: userBundle, isLoading } = useGetCurrentUserBundle()\n\n  const hasActPermissions = userBundle?.isACTMember\n  const hasReviewerPermissions =\n    userBundle?.isACTMember || userBundle?.isARReviewer\n\n  const Router = useCallback(\n    (props: MemoryRouterProps | BrowserRouterProps) => {\n      if (useMemoryRouter) {\n        return <MemoryRouter {...props} />\n      } else {\n        return <BrowserRouter {...props} />\n      }\n    },\n    [useMemoryRouter],\n  )\n\n  if (isLoading) {\n    return <SynapseSpinner size={50} />\n  }\n\n  return (\n    <Router basename={routerBaseName}>\n      <div className=\"ReviewerDashboard\">\n        <div className=\"Tabs\" role=\"tablist\">\n          {hasActPermissions && (\n            <LinkTab href=\"/AccessRequirements\" icon=\"accessClosed\">\n              Access Requirements\n            </LinkTab>\n          )}\n          {hasReviewerPermissions && (\n            <LinkTab href=\"/Submissions\" icon=\"discussion\">\n              Submissions\n            </LinkTab>\n          )}\n          {hasReviewerPermissions && (\n            <LinkTab href=\"/UserAccessHistory\" icon=\"history\">\n              User Access History\n            </LinkTab>\n          )}\n        </div>\n        <div className=\"TabContentContainer\">\n          <SynapseErrorBoundary>\n            <Switch>\n              {hasActPermissions && (\n                <Route path=\"/AccessRequirements\">\n                  <AccessRequirementDashboard />\n                </Route>\n              )}\n              {hasReviewerPermissions && [\n                <Route exact path=\"/Submissions\" key=\"/Submissions\">\n                  {!hasActPermissions && (\n                    <OrientationBanner\n                      name=\"DataAccessManagement\"\n                      title=\"Getting Started With Data Access Management\"\n                      text=\"When someone requests access to data, that request will show up here. Clicking on the Request ID will take you to a page where you can review the request.\"\n                      sx={{ margin: '-20px -30px 20px -30px', width: 'auto' }}\n                    />\n                  )}\n                  <DataAccessSubmissionDashboard />\n                </Route>,\n\n                <Route path=\"/Submissions/:id\" key=\"/Submissions/:id\">\n                  <SubmissionPageRouteRenderer />\n                </Route>,\n              ]}\n              {\n                <Route exact path=\"/UserAccessHistory\">\n                  <UserHistoryDashboard />\n                </Route>\n              }\n            </Switch>\n          </SynapseErrorBoundary>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nfunction SubmissionPageRouteRenderer() {\n  const { id } = useParams<{ id: string }>()\n  return <SubmissionPage submissionId={id} />\n}\n\nexport default ReviewerDashboard\n"],"names":["useSearchAccessApprovalsInfinite","params","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","page","AccessApprovalsTable","accessorId","accessRequirementId","sort","setSort","useState","AccessApprovalSortField","Direction","searchRequest","useMemo","data","hasNextPage","fetchNextPage","isLoading","accessApprovals","onSort","field","jsxs","Table","jsx","SortIcon","item","PRODUCTION_ENDPOINT_CONFIG","UserBadge","upperFirst","formatDate","dayjs","SynapseSpinner","Typography","Button","AccessRequestSubmissionTable","showSubmitter","showStatus","showRequesters","reviewerId","submissionState","reviewerFilterType","SubmissionSortField","useSearchAccessSubmissionsInfinite","accessSubmissions","Link","UserOrTeamBadge","user","requester","ACT_TEAM_ID","reviewerId2","UserHistoryDashboard","setAccessRequirementId","setAccessorId","approvalTableProps","setApprovalTableProps","submissionTableProps","setSubmissionTableProps","userBundle","useGetCurrentUserBundle","hasActPermissions","location","useLocation","history","useHistory","INPUT_CHANGE_DEBOUNCE_DELAY_MS","onAccessorChange","useCallback","selected","useEffect","initialParams","useDebouncedEffect","omitBy","NoSearchResultComponent","UserSearchBoxV2","TYPE_FILTER","AccessRequirementSearchBox","Fragment","accessRequirementConcreteTypeValueToDisplayValue","accessRequirementConcreteTypeValue","TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE","TERMS_OF_USE_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE","SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE","SELF_SIGN_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE","MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE","MANAGED_ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE","ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE","ACT_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE","LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_VALUE","LOCK_ACCESS_REQUIREMENT_CONCRETE_TYPE_DISPLAY_VALUE","isIntegerInput","v","AccessRequirementTable","props","nameOrID","relatedProjectId","accessType","onCreateNewAccessRequirementClicked","nameContains","ids","nameOrIDTrimmed","useSearchAccessRequirementsInfinite","accessRequirements","StarTwoTone","ar","projectId","React","EntityLink","AccessRequirementDashboard","setNameOrID","setRelatedProjectId","setReviewerId","projectFilterFieldIsError","SYNAPSE_ENTITY_ID_REGEX","initializeFromSearchParams","showEntityFinder","setShowEntityFinder","tableProps","setTableProps","updateQueryParams","nameOrID2","relatedProjectId2","paramsObject","onReviewerChange","EntityFinderModal","FinderScope","EntityType","TextField","e","InputAdornment","SearchOutlined","Box","newValue","InputSizedButton","getReviewerFilterID","DataAccessSubmissionDashboard","SubmissionState","onRequesterChange","accessRequirementId2","accessorId2","LinkTab","href","children","icon","NavLink","IconSvg","ReviewerDashboard","routerBaseName","useMemoryRouter","hasReviewerPermissions","Router","props2","MemoryRouter","BrowserRouter","SynapseErrorBoundary","Switch","Route","OrientationBanner","SubmissionPageRouteRenderer","id","useParams","SubmissionPage"],"mappings":"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"}