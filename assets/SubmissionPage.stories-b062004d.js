import{l as m}from"./index-5d294096.js";import{a2 as s,j as I,k as _}from"./SynapseClient-4fd58c49.js";import{g as E,j as S,m as e}from"./MockSubmission-ec6d4845.js";import{M as i}from"./getEndpoint-ac94413e.js";import{g as R}from"./tableQueryHandlers-ee38b94e.js";import{m as O}from"./mockRejectionReasonsTableQueryResultBundle-59be1fd8.js";import{S as g}from"./SubmissionPage-c2294cd0.js";import{a as C}from"./userProfileHandlers-dc2abbf9.js";import"./_commonjsHelpers-de833af9.js";import"./util-1969ce74.js";import"./index-17a77bb8.js";import"./SynapseConstants-c93e8ee4.js";import"./OrientationBanner-c0eacdfc.js";import"./jsx-runtime-9dc53467.js";import"./index-76fb7be0.js";import"./FullWidthAlert-77167a31.js";import"./Alert-f631f725.js";import"./styled-87b6157a.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-55b21f7f.js";import"./createSvgIcon-397996e3.js";import"./Paper-625f2e68.js";import"./IconButton-30f6f351.js";import"./ButtonBase-651ec7a9.js";import"./emotion-react.browser.esm-6130a288.js";import"./assertThisInitialized-081f9914.js";import"./inheritsLoose-c82a83d4.js";import"./TransitionGroupContext-1474f578.js";import"./useForkRef-8feb2ebf.js";import"./useIsFocusVisible-e5f6c995.js";import"./Stack-eb200119.js";import"./extendSxProp-c4113ea3.js";import"./Box-737945d6.js";import"./AlertTitle-38884730.js";import"./Typography-62cfc992.js";import"./useTheme-58bb7d64.js";import"./Grow-08403985.js";import"./isHostComponent-fa76b8d9.js";import"./index-d3ea75b5.js";import"./utils-830530e5.js";import"./ClickAwayListener-3907f9d7.js";import"./Tooltip-e8bd1358.js";import"./Button-a2b8b546.js";import"./InfoTwoTone-bbc735a3.js";import"./CheckCircleTwoTone-8a62494f.js";import"./inputBaseClasses-888452c9.js";import"./Fade-3c4a970e.js";import"./Link-adab3de3.js";import"./_getTag-dcd38d76.js";import"./_Map-02912bad.js";import"./isArray-5e3f9107.js";import"./StringUtils-2ea3ab4d.js";import"./index-9195daf0.js";import"./dayjs.min-f79c4412.js";import"./index-9d475cdf.js";import"./tiny-invariant-dd7d57d2.js";import"./mockProject-a47c3d48.js";import"./mock_user_profile-6e6bce0c.js";import"./times-c23b3cf2.js";import"./_baseTimes-8715be3e.js";import"./identity-46f208ab.js";import"./toInteger-8c467ff1.js";import"./isSymbol-7c514724.js";import"./mockWiki-445b3fa7.js";import"./mock_file_handle-5864be09.js";import"./uniqueId-4d05949d.js";import"./toString-cc90cb98.js";import"./cloneDeep-4246eae0.js";import"./_baseClone-9db79a00.js";import"./_Uint8Array-595ed3dd.js";import"./_initCloneObject-b3d76b79.js";import"./_getAllKeys-fa8e70cf.js";import"./DateFormatter-10da315c.js";import"./timezone-f53425a4.js";import"./useDataAccessSubmission-f5be4d36.js";import"./useMutation-c710bef5.js";import"./useInfiniteQuery-5b67d66a.js";import"./useAccessRequirements-71a1505b.js";import"./useMediaQuery-51d2162c.js";import"./sortBy-b8b8cfbe.js";import"./_baseIteratee-19775889.js";import"./_getMatchData-2b75febc.js";import"./_cacheHas-cc8fa475.js";import"./_setToArray-3d6ec6fd.js";import"./_baseFor-d254fa1e.js";import"./_baseRest-a17404df.js";import"./_overRest-54674ae8.js";import"./_isIterateeCall-984cc862.js";import"./HelpPopover-6cef0b43.js";import"./WideButton-1d3f7341.js";import"./LoadingScreen-ed61dd72.js";import"./Backdrop-f4f4944d.js";import"./LinearProgress-5f66ed75.js";import"./UserBadge-6a7fd38f.js";import"./Menu-b29d7520.js";import"./index-c71daf5e.js";import"./Modal-a7690934.js";import"./getScrollbarSize-ac846fe6.js";import"./ownerWindow-2c76219e.js";import"./createChainedFunction-0bab83cf.js";import"./MenuList-7e60caa0.js";import"./List-507b8078.js";import"./IconSvg-b2c8dc9b.js";import"./ErrorOutlined-20d019ce.js";import"./GetAppTwoTone-ce03f56d.js";import"./InfoOutlined-e67f3aa8.js";import"./SkeletonTable-04ae7db3.js";import"./Skeleton-b82f86a8.js";import"./ToastMessage-9aa3d9c5.js";import"./CSSTransition-cd764f80.js";import"./hasClass-ec9efd32.js";import"./Divider-1f110b7b.js";import"./dividerClasses-3ebb5c26.js";import"./MenuItem-100d659d.js";import"./Card-1fb1094a.js";import"./Avatar-ae1c3f3d.js";import"./useTeamMembers-fa8585be.js";import"./RegularExpressions-bc0adf55.js";import"./index-e4fc7078.js";import"./EntityIcon-ed166490.js";import"./pluralize-9f2b9a2f.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./index.modern-ebb8621a.js";import"./mapValues-a94bd5d1.js";import"./isPlainObject-cb19acc1.js";import"./now-3316c47d.js";import"./ThemesPlot-3409e3ee.js";import"./ElementWithTooltip-38ead293.js";import"./SynapseTableConstants-5f56c39f.js";import"./index-11cab16a.js";import"./Icon-4134b372.js";import"./ShowMore-0d3229ca.js";import"./Dropdown-69bcea53.js";import"./ThemeProvider-ab8de9d2.js";import"./createWithBsPrefix-ce711ec4.js";import"./SqlFunctions-b36cf938.js";import"./factory-33ef2009.js";import"./pick-89ddd0c3.js";import"./_baseIndexOf-c808ca38.js";import"./_baseSlice-cf92e063.js";import"./isPlainObject-9a905694.js";import"./uniq-f9854dd4.js";import"./without-9cea2dc4.js";import"./isArrayLikeObject-333fcb04.js";import"./merge-6d426093.js";import"./isNil-938d8733.js";import"./isEqualWith-7a8dbfc5.js";import"./useGetEntityHeaders-113de10c.js";import"./useGetQueryResultBundle-6daef737.js";import"./useEntity-db96b9ee.js";import"./InfiniteQueryUtils-54ae7e6b.js";import"./useDownloadList-549a0a9b.js";import"./use-deep-compare-effect.esm-3f8944c0.js";import"./NoSearchResults-37a4f967.js";import"./NoData-300108e2.js";import"./queryUtils-d0e04d0b.js";import"./LastLoginInfo-c4ea7c08.js";import"./jsx-runtime_commonjs-proxy-dd7a2d35.js";import"./isMuiElement-bce4c331.js";import"./Dialog-4b9f6058.js";import"./DialogTitle-c06d2eca.js";import"./DialogContent-c6186c64.js";import"./TextField-4b8d3337.js";import"./InputLabel-060c2cf9.js";import"./useFormControl-41ba3265.js";import"./Select-826bcf04.js";import"./tslib.es6-9c2726d7.js";import"./lodash-bd8c10bc.js";import"./UserSearchBoxV2-3260598f.js";import"./Select-ce3716e1.esm-ea0ad4cf.js";import"./isNativeReflectConstruct-e378569d.js";import"./UserOrTeamBadge-a71ce75f.js";import"./StandaloneLoginForm-529d18af.js";import"./LoginFlowBackButton-22703794.js";import"./TextField-1929bba2.js";import"./StyledFormControl-3c074021.js";import"./LoginMethodButton-9687c5a3.js";import"./Grid-eca0ba8c.js";import"./RadioGroup-13ffdadd.js";import"./Form-7e5a7319.js";import"./Col-41f8dcbc.js";import"./FileUpload-d440a4be.js";import"./AuthenticatedRequirement-d8efc2e4.js";import"./RequirementItem-d64f7e51.js";import"./ConditionalWrapper-28a47e51.js";import"./CheckTwoTone-59107e3d.js";import"./CertificationRequirement-90563d72.js";import"./ValidationRequirement-5dea8e6a.js";import"./TwoFactorAuthEnabledRequirement-f163d6c5.js";import"./TwoFactorEnrollmentForm-a77f942a.js";import"./LeftRightPanel-a0ff7d81.js";import"./ActionRequiredCard-3e41ef82.js";import"./RequestDownloadCard-fccafafc.js";import"./Tabs-78e208f3.js";import"./QueryCount-f60a54e0.js";import"./SkeletonButton-96bd3884.js";import"./Checkbox-b459ce46.js";import"./SelectionCriteriaPill-408d80a6.js";import"./EnumFacetFilterUI-8089d9da.js";import"./RangeSlider-bf40ad0a.js";import"./react-sizeme-a86e205b.js";import"./ColorGradient-982494fb.js";import"./colorPalette-c43701fe.js";import"./UpsetPlot-c85ddb78.js";import"./lz-string-8d18d2e5.js";import"./LargeButton-fcf70eaf.js";import"./Chip-99c1f106.js";import"./IconList-c7b79757.js";import"./Box-424979b7.js";import"./LightTooltip-e8d4c709.js";import"./UserCardList-2be2c3e0.js";import"./EntityLink-08a00235.js";import"./ErrorChip-be1ecb03.js";import"./SynapseVideo-d1d6ef3c.js";import"./WarningDialog-ca028467.js";import"./RejectDataAccessRequestModal-aac00a1b.js";import"./immutable.es-400ccb6d.js";import"./FormControlLabel-825bc21f.js";import"./mockEntity-9f841947.js";import"./mockFileEntity-c578d087.js";const Ti={title:"Governance/SubmissionPage",component:g,parameters:{stack:"mock"}},p={name:"SubmissionPage",parameters:{msw:{handlers:[...C(i),...E(i),m.rest.get(`${i}${s(":id")}`,async(o,t,r)=>{const d=S.find(u=>o.params.id===u.id);return t(r.status(200),r.json(d))}),m.rest.get(`${i}${I(":id")}`,async(o,t,r)=>t(r.status(200),r.json(e))),m.rest.get(`${i}${_(":id")}`,async(o,t,r)=>t(r.status(200),r.json({wikiPageId:123,ownerObjectId:e.id,ownerObjectType:"ACCESS_REQUIREMENT"}))),m.rest.get(`${i}/repo/v1/accessRequirement/:id/acl`,async(o,t,r)=>t(r.status(200),r.json({id:o.id,creationDate:"2022-05-20T14:32:31.665Z",etag:"f4fbd4f2-751d-40dd-9421-1d2693231217",resourceAccess:[{principalId:3350396,accessType:["REVIEW_SUBMISSIONS"]}]}))),...R(O),m.rest.put(`${i}${s(":id")}`,async(o,t,r)=>t(r.status(201),r.json(await o.json())))]}},args:{submissionId:1}};var n,a,c;p.parameters={...p.parameters,docs:{...(n=p.parameters)==null?void 0:n.docs,source:{originalSource:`{
  name: 'SubmissionPage',
  parameters: {
    msw: {
      handlers: [...getUserProfileHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN),
      // Return submission based on ID
      rest.get(\`\${MOCK_REPO_ORIGIN}\${DATA_ACCESS_SUBMISSION_BY_ID(':id')}\`, async (req, res, ctx) => {
        const submission = mockSubmissions.find(submission => req.params.id === submission.id);
        return res(ctx.status(200), ctx.json(submission));
      }),
      // Return a mocked access requirement
      rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_BY_ID(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json(mockManagedACTAccessRequirement));
      }), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_WIKI_PAGE_KEY(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json({
          wikiPageId: 123,
          ownerObjectId: mockManagedACTAccessRequirement.id,
          ownerObjectType: 'ACCESS_REQUIREMENT'
        }));
      }), rest.get(\`\${MOCK_REPO_ORIGIN}/repo/v1/accessRequirement/:id/acl\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json({
          id: req.id,
          creationDate: '2022-05-20T14:32:31.665Z',
          etag: 'f4fbd4f2-751d-40dd-9421-1d2693231217',
          resourceAccess: [{
            principalId: 3350396,
            accessType: ['REVIEW_SUBMISSIONS']
          }]
        }));
      }), ...getHandlersForTableQuery(mockRejectionReasonsTableQueryResultBundle), rest.put(\`\${MOCK_REPO_ORIGIN}\${DATA_ACCESS_SUBMISSION_BY_ID(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(201), ctx.json(await req.json()));
      })]
    }
  },
  args: {
    submissionId: 1
  }
}`,...(c=(a=p.parameters)==null?void 0:a.docs)==null?void 0:c.source}}};const ji=["Demo"];export{p as Demo,ji as __namedExportsOrder,Ti as default};
