{"version":3,"file":"index-7324eb7f.js","sources":["../../src/components/row_renderers/utils/CardFooter.tsx","../../src/components/row_renderers/utils/ChipContainer.tsx","../../src/components/ShowMore/ShowMore.tsx"],"sourcesContent":["import React from 'react'\nimport IconSVG from '../../IconSvg/IconSvg'\nimport { ColumnIconConfigs } from '../../CardContainerLogic'\nimport { DOI_REGEX } from '../../../utils/functions/RegularExpressions'\n\ntype State = {\n  isShowMoreOn: boolean\n  isDesktop: boolean\n}\n\ntype CardFooterProps = {\n  values: any[]\n  isHeader: boolean\n  secondaryLabelLimit?: number\n  columnIconOptions?: ColumnIconConfigs\n  className?: string\n}\n\nclass CardFooter extends React.Component<CardFooterProps, State> {\n  constructor(props: CardFooterProps) {\n    super(props)\n    this.state = {\n      isShowMoreOn: false,\n      isDesktop: false,\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n    this.updatePredicate = this.updatePredicate.bind(this)\n  }\n\n  toggleShowMore() {\n    this.setState({\n      isShowMoreOn: !this.state.isShowMoreOn,\n    })\n  }\n\n  componentDidMount() {\n    this.updatePredicate()\n    window.addEventListener('resize', this.updatePredicate)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updatePredicate)\n  }\n\n  updatePredicate() {\n    this.setState({ isDesktop: window.innerWidth > 600 })\n  }\n\n  renderRowValue = (\n    columnName: string,\n    value: string,\n    tableColumnName: string,\n  ) => {\n    const columnIconOptions = this.props.columnIconOptions\n    if (!value.match || !value.trim) {\n      // value can sometimes be a react element, so it doesn't have a .match function, interestingly I didn't\n      // see typeof return 'object' for that case which would be a better check.\n      return value\n    }\n    value = value.trim()\n    if (value.match(DOI_REGEX)) {\n      return (\n        <a\n          data-search-handle={columnName}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`https://dx.doi.org/${value}`}\n        >\n          {value}\n        </a>\n      )\n    }\n    // Only display icon when columnIconOptions is set in config file\n    if (\n      columnIconOptions &&\n      columnIconOptions.columns &&\n      Object.keys(columnIconOptions.columns).includes(tableColumnName)\n    ) {\n      const iconProps = columnIconOptions.columns[tableColumnName][value]\n      if (!iconProps) {\n        // if we can't find an icon to match, just return the value\n        return <span>{value}</span>\n      } else {\n        iconProps.sx = { ...iconProps.sx, paddingRight: '0.2rem' }\n        return (\n          <>\n            <IconSVG {...iconProps}></IconSVG>\n            <span style={{ verticalAlign: 'middle' }}>{value}</span>\n          </>\n        )\n      }\n    }\n\n    return value\n  }\n  renderRows = (values: string[][], limit: number, isDesktop: boolean) => {\n    return values.map((kv, index) => {\n      const hideClass = index >= limit ? 'SRC-hidden' : ''\n      const columnName = kv[0]\n      const value = this.renderRowValue(columnName, kv[1], kv[2])\n      if (isDesktop) {\n        return (\n          <tr className={'SRC-cardRowDesktop ' + hideClass} key={index}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}>\n              {columnName}\n            </td>\n            <td\n              data-search-handle={columnName}\n              className={'SRC-row-data SRC-limitMaxWidth '}\n            >\n              {value}\n            </td>\n          </tr>\n        )\n      }\n      return (\n        <React.Fragment key={index}>\n          <tr className={'SRC-cardRowMobile ' + hideClass}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}>\n              {columnName}\n            </td>\n          </tr>\n          <tr className={'SRC-cardRowMobile ' + hideClass}>\n            <td\n              data-search-handle={columnName}\n              className=\"SRC-row-data SRC-limitMaxWidth\"\n            >\n              {value}\n            </td>\n          </tr>\n        </React.Fragment>\n      )\n    })\n  }\n\n  render() {\n    const { values, secondaryLabelLimit = 3 } = this.props\n    const { isShowMoreOn, isDesktop } = this.state\n    const valuesFiltered = values.filter(el => el[1])\n    const hasMoreValuesThanLimit = valuesFiltered.length > secondaryLabelLimit\n    const limit =\n      !hasMoreValuesThanLimit || isShowMoreOn ? Infinity : secondaryLabelLimit\n    return (\n      <div\n        data-testid=\"CardFooter\"\n        className={`SRC-cardMetadata ${this.props.className ?? ''}`}\n      >\n        <table>\n          <tbody>\n            {this.renderRows(valuesFiltered, limit, isDesktop)}\n            {hasMoreValuesThanLimit && (\n              <tr className=\"SRC-cardRow\">\n                <td>\n                  <a\n                    style={{ textAlign: 'left', margin: 0, padding: 0 }}\n                    onClick={this.toggleShowMore}\n                    className=\"highlight-link\"\n                  >\n                    Show {isShowMoreOn ? 'Less' : 'More'}\n                    <IconSVG\n                      icon={isShowMoreOn ? 'expandLess' : 'expandMore'}\n                    />\n                  </a>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\nexport default CardFooter\n","import React from 'react'\n\ntype ChipContainerProps = {\n  chips: any[]\n}\n\nconst ChipContainer = ({ chips }: ChipContainerProps) => {\n  const chipsFormatted = chips.map((el, index) => {\n    if (!el) {\n      return false\n    }\n    return <span key={index}> {el}</span>\n  })\n  return <React.Fragment>{chipsFormatted}</React.Fragment>\n}\nexport default ChipContainer\n","import React from 'react'\nconst CHAR_COUNT_CUTOFF = 400\n\ntype ShowMoreState = {\n  showMore: boolean\n}\n\nexport type ShowMoreProps = {\n  summary: string\n  maxCharacterCount?: number\n}\n\nexport default class ShowMore extends React.Component<\n  ShowMoreProps,\n  ShowMoreState\n> {\n  constructor(props: ShowMoreProps) {\n    super(props)\n    this.state = {\n      showMore: false,\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n  }\n\n  public toggleShowMore(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    this.setState({\n      showMore: true,\n    })\n  }\n\n  getCutoff = (summary: string, maxCharacterCount: number) => {\n    let previewText = ''\n    if (!summary) {\n      return { previewText }\n    }\n    let hiddenText = ''\n    const summarySplit = summary.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < maxCharacterCount && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    if (i < summarySplit.length - 1) {\n      hiddenText = summarySplit.slice(i).join(' ')\n    }\n    return { previewText, hiddenText }\n  }\n\n  public render() {\n    const { summary, maxCharacterCount = CHAR_COUNT_CUTOFF } = this.props\n    const meetsCharRequirements = summary && summary.length >= maxCharacterCount\n    const { previewText, hiddenText } = this.getCutoff(\n      summary,\n      maxCharacterCount,\n    )\n    const showMoreButton = meetsCharRequirements && (\n      <a\n        style={{ fontSize: '14px', cursor: 'pointer', marginLeft: '5px' }}\n        onClick={this.toggleShowMore}\n        className=\"highlight-link\"\n      >\n        ...Show More\n      </a>\n    )\n    return (\n      <React.Fragment>\n        <span>\n          {previewText}\n          <span className={this.state.showMore ? '' : 'SRC-hidden'}>\n            {hiddenText}\n          </span>\n        </span>\n        {!this.state.showMore && showMoreButton}\n      </React.Fragment>\n    )\n  }\n}\n"],"names":["CardFooter","React","props","__publicField","columnName","value","tableColumnName","columnIconOptions","DOI_REGEX","jsx","iconProps","jsxs","Fragment","IconSVG","values","limit","isDesktop","kv","index","hideClass","secondaryLabelLimit","isShowMoreOn","valuesFiltered","el","hasMoreValuesThanLimit","ChipContainer","chips","chipsFormatted","CHAR_COUNT_CUTOFF","ShowMore","summary","maxCharacterCount","previewText","hiddenText","summarySplit","i","event","meetsCharRequirements","showMoreButton"],"mappings":"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"}