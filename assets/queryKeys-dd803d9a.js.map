{"version":3,"file":"queryKeys-dd803d9a.js","sources":["../../src/lib/utils/hooks/SynapseAPI/entity/queryKeys.ts"],"sourcesContent":["import { QueryClient } from 'react-query'\nimport {\n  EntityBundleRequest,\n  EntityChildrenRequest,\n  QueryBundleRequest,\n} from '../../../synapseTypes'\n\n/**\n * Co-location of react-query keys for queries related to Synapse entity data. Two objectives of this strategy are\n * - minimize the risk of inappropriate cache key collisions\n * - simplify clearing the approprate query caches when the entity data is updated\n *\n * For more information, see https://tkdodo.eu/blog/leveraging-the-query-function-context\n */\nexport const entityQueryKeys = {\n  /** Query key for all entities */\n  all: [{ objectType: 'entity' }],\n  // Data for an entity\n  entity: (id: string) => [{ ...entityQueryKeys.all[0], id: id }],\n  // Data for a particular version of an entity\n  version: (id: string, versionNumber?: string | number) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      versionNumber: versionNumber,\n    },\n  ],\n\n  // List of Entity Versions\n  versions: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'versions',\n    },\n  ],\n  versionsQuery: (id: string, limit: number, offset: number) => [\n    {\n      ...entityQueryKeys.versions(id)[0],\n      versionQuery: {\n        limit: limit,\n        offset: offset,\n      },\n    },\n  ],\n\n  // JSON Representation of an entity\n  json: (id: string) => [{ ...entityQueryKeys.entity(id)[0], scope: 'json' }],\n\n  // Entity path\n  path: (id: string) => [{ ...entityQueryKeys.entity(id)[0], scope: 'path' }],\n\n  // Entity bundle\n  bundle: (\n    id: string,\n    versionNumber: string | number | undefined,\n    bundleRequest: EntityBundleRequest,\n  ) => [\n    {\n      ...entityQueryKeys.version(id, versionNumber)[0],\n      scope: 'entityBundle',\n      entityBundleRequest: bundleRequest,\n    },\n  ],\n\n  children: (request: EntityChildrenRequest, infinite: boolean) => [\n    {\n      ...entityQueryKeys.entity(request.parentId ?? 'root')[0],\n      scope: 'children',\n      isInfinite: infinite,\n      entityChildrenRequest: request,\n    },\n  ],\n\n  tableQueryResult: (\n    queryBundleRequest: QueryBundleRequest,\n    infinite: boolean,\n  ) => [\n    {\n      ...entityQueryKeys.entity(queryBundleRequest.entityId)[0],\n      scope: 'tableQueryResult',\n      isInfinite: infinite,\n      tableQueryBundleRequest: queryBundleRequest,\n    },\n  ],\n\n  tableQueryResultWithAsyncStatus: (\n    queryBundleRequest: QueryBundleRequest,\n    infinite: boolean,\n  ) => [\n    {\n      ...entityQueryKeys.entity(queryBundleRequest.entityId)[0],\n      scope: 'tableQueryResultWithAsyncStatus',\n      isInfinite: infinite,\n      tableQueryBundleRequest: queryBundleRequest,\n    },\n  ],\n\n  fullTableQueryResult: (queryBundleRequest: QueryBundleRequest) => [\n    {\n      ...entityQueryKeys.entity(queryBundleRequest.entityId)[0],\n      scope: 'fullTableQueryResult',\n      tableQueryBundleRequest: queryBundleRequest,\n    },\n  ],\n\n  boundJSONSchema: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'boundJSONSchema',\n    },\n  ],\n\n  schemaValidationResults: (id: string) => [\n    {\n      ...entityQueryKeys.entity(id)[0],\n      scope: 'schemaValidationResults',\n    },\n  ],\n}\n\nexport function invalidateAllQueriesForEntity(\n  queryClient: QueryClient,\n  id: string,\n) {\n  // TODO: Figure out how to handle cases where the change can affect other entities.\n  // Some examples:\n  //  - deleting an entity should invalidate the parent's children\n  //  - moving an entity should invalidate the old and new parent's children\n  return queryClient.invalidateQueries(entityQueryKeys.entity(id))\n}\n"],"names":["entityQueryKeys","id","versionNumber","limit","offset","bundleRequest","request","infinite","queryBundleRequest","invalidateAllQueriesForEntity","queryClient"],"mappings":"AAcO,MAAMA,EAAkB,CAE7B,IAAK,CAAC,CAAE,WAAY,SAAU,EAE9B,OAASC,GAAe,CAAC,CAAE,GAAGD,EAAgB,IAAI,CAAC,EAAG,GAAAC,EAAQ,EAE9D,QAAS,CAACA,EAAYC,IAAoC,CACxD,CACE,GAAGF,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAC/B,cAAAC,CACF,CACF,EAGA,SAAWD,GAAe,CACxB,CACE,GAAGD,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAC/B,MAAO,UACT,CACF,EACA,cAAe,CAACA,EAAYE,EAAeC,IAAmB,CAC5D,CACE,GAAGJ,EAAgB,SAASC,CAAE,EAAE,CAAC,EACjC,aAAc,CACZ,MAAAE,EACA,OAAAC,CACF,CACF,CACF,EAGA,KAAOH,GAAe,CAAC,CAAE,GAAGD,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAAG,MAAO,OAAQ,EAG1E,KAAOA,GAAe,CAAC,CAAE,GAAGD,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAAG,MAAO,OAAQ,EAG1E,OAAQ,CACNA,EACAC,EACAG,IACG,CACH,CACE,GAAGL,EAAgB,QAAQC,EAAIC,CAAa,EAAE,CAAC,EAC/C,MAAO,eACP,oBAAqBG,CACvB,CACF,EAEA,SAAU,CAACC,EAAgCC,IAAsB,CAC/D,CACE,GAAGP,EAAgB,OAAOM,EAAQ,UAAY,MAAM,EAAE,CAAC,EACvD,MAAO,WACP,WAAYC,EACZ,sBAAuBD,CACzB,CACF,EAEA,iBAAkB,CAChBE,EACAD,IACG,CACH,CACE,GAAGP,EAAgB,OAAOQ,EAAmB,QAAQ,EAAE,CAAC,EACxD,MAAO,mBACP,WAAYD,EACZ,wBAAyBC,CAC3B,CACF,EAEA,gCAAiC,CAC/BA,EACAD,IACG,CACH,CACE,GAAGP,EAAgB,OAAOQ,EAAmB,QAAQ,EAAE,CAAC,EACxD,MAAO,kCACP,WAAYD,EACZ,wBAAyBC,CAC3B,CACF,EAEA,qBAAuBA,GAA2C,CAChE,CACE,GAAGR,EAAgB,OAAOQ,EAAmB,QAAQ,EAAE,CAAC,EACxD,MAAO,uBACP,wBAAyBA,CAC3B,CACF,EAEA,gBAAkBP,GAAe,CAC/B,CACE,GAAGD,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAC/B,MAAO,iBACT,CACF,EAEA,wBAA0BA,GAAe,CACvC,CACE,GAAGD,EAAgB,OAAOC,CAAE,EAAE,CAAC,EAC/B,MAAO,yBACT,CACF,CACF,EAEgB,SAAAQ,EACdC,EACAT,EACA,CAKA,OAAOS,EAAY,kBAAkBV,EAAgB,OAAOC,CAAE,CAAC,CACjE"}