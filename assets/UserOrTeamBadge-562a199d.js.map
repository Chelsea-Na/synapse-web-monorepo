{"version":3,"file":"UserOrTeamBadge-562a199d.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/useUserGroupHeader.ts","../../src/lib/containers/TeamBadge.tsx","../../src/lib/containers/UserOrTeamBadge.tsx"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { TYPE_FILTER, UserGroupHeader } from '../../../synapseTypes'\n\nexport function useGetUserGroupHeader(\n  principalId: string,\n  options?: UseQueryOptions<UserGroupHeader, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryKey = ['userGroupHeader', principalId]\n\n  return useQuery<UserGroupHeader, SynapseClientError>(\n    queryKey,\n    async () => {\n      const responsePage = await SynapseClient.getGroupHeadersBatch(\n        [principalId],\n        accessToken,\n      )\n      if (responsePage.children.length !== 1) {\n        throw new Error(\n          `Expected one response in useGetUserGroupHeader for id: ${principalId}, got ${responsePage.children.length}`,\n        )\n      }\n      return responsePage.children[0]\n    },\n    options,\n  )\n}\n\nexport function useSearchUserGroupHeaders(\n  prefix: string,\n  filter?: TYPE_FILTER,\n  options?: UseQueryOptions<UserGroupHeader[], SynapseClientError>,\n) {\n  const queryKey = ['userGroupHeader', 'search', prefix, filter]\n\n  return useQuery<UserGroupHeader[], SynapseClientError>(\n    queryKey,\n    async () => {\n      const responsePage = await SynapseClient.getUserGroupHeaders(\n        prefix,\n        filter,\n      )\n      return responsePage.children\n    },\n    options,\n  )\n}\n\nexport function useGetUserGroupHeaderWithAlias(\n  aliases: string[],\n  options?: UseQueryOptions<UserGroupHeader[], SynapseClientError>,\n) {\n  const queryKey = ['userGroupHeader', aliases]\n\n  return useQuery<UserGroupHeader[], SynapseClientError>(\n    queryKey,\n    async () => {\n      const response = await SynapseClient.postUserGroupHeadersWithAlias(\n        aliases,\n      )\n      return response.list\n    },\n    options,\n  )\n}\n","import React from 'react'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport IconSvg from './IconSvg'\n\nexport type TeamBadgeProps = {\n  teamId: string | number\n  teamName: string\n  disableHref?: boolean\n}\n\nexport default function TeamBadge(props: TeamBadgeProps) {\n  const { teamId, teamName, disableHref } = props\n\n  return (\n    <span>\n      <IconSvg icon=\"team\" />\n      <a\n        style={{ marginLeft: '5px' }}\n        href={\n          disableHref\n            ? undefined\n            : `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Team:${teamId}`\n        }\n      >\n        {teamName}\n      </a>\n    </span>\n  )\n}\n","import { Skeleton } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport { useGetUserGroupHeader } from '../utils/hooks/SynapseAPI/user/useUserGroupHeader'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport { useSynapseContext } from '../utils/SynapseContext'\nimport { UserGroupHeader } from '../utils/synapseTypes'\nimport TeamBadge from './TeamBadge'\nimport UserCard from './UserCard'\n\ntype UserOrTeamBadgeProps = {\n  /* The principal ID of the user or team. Required if userGroupHeader is undefined. */\n  principalId?: string | number\n  /* The userGroupHeader of the user or team. Required if principalId is undefined. */\n  userGroupHeader?: UserGroupHeader\n  showFullName?: boolean\n  disableHref?: boolean\n}\n\nexport default function UserOrTeamBadge(props: UserOrTeamBadgeProps) {\n  let principalId = props.principalId\n  const {\n    disableHref,\n    showFullName,\n    userGroupHeader: providedUserGroupHeader,\n  } = props\n\n  if (principalId == null) {\n    principalId = providedUserGroupHeader?.ownerId\n  }\n\n  const { accessToken } = useSynapseContext()\n  const [userGroupHeader, setUserGroupHeader] = useState<\n    UserGroupHeader | undefined\n  >(providedUserGroupHeader)\n\n  const { data: fetchedUserGroupHeader } = useGetUserGroupHeader(\n    (principalId ?? '').toString(),\n    {\n      enabled: !providedUserGroupHeader,\n    },\n  )\n\n  useEffect(() => {\n    if (principalId && userGroupHeader == undefined && fetchedUserGroupHeader) {\n      setUserGroupHeader(fetchedUserGroupHeader)\n    }\n  }, [accessToken, principalId, userGroupHeader, fetchedUserGroupHeader])\n\n  if (principalId == null && providedUserGroupHeader == null) {\n    console.error(\n      'Expected one of principalId or userGroupHeader to be defined but both were null or undefined',\n    )\n    return <></>\n  } else if (userGroupHeader === undefined) {\n    return <Skeleton width={125} height={30} />\n  } else if (userGroupHeader.isIndividual) {\n    return (\n      <UserCard\n        ownerId={principalId!.toString()}\n        size={SMALL_USER_CARD}\n        disableLink={disableHref}\n        showFullName={showFullName}\n      />\n    )\n  } else {\n    return (\n      <TeamBadge\n        teamId={principalId!}\n        teamName={userGroupHeader.userName}\n        disableHref={disableHref}\n      />\n    )\n  }\n}\n"],"names":["useGetUserGroupHeader","principalId","options","accessToken","useSynapseContext","useQuery","responsePage","SynapseClient.getGroupHeadersBatch","useSearchUserGroupHeaders","prefix","filter","SynapseClient.getUserGroupHeaders","useGetUserGroupHeaderWithAlias","aliases","SynapseClient.postUserGroupHeadersWithAlias","TeamBadge","props","teamId","teamName","disableHref","jsxs","jsx","IconSvg","PRODUCTION_ENDPOINT_CONFIG","UserOrTeamBadge","showFullName","providedUserGroupHeader","userGroupHeader","setUserGroupHeader","useState","fetchedUserGroupHeader","useEffect","Fragment","Skeleton","UserCard","SMALL_USER_CARD"],"mappings":"kZAMgB,SAAAA,EACdC,EACAC,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAGjB,OAAAC,EAFU,CAAC,kBAAmBJ,CAAW,EAI9C,SAAY,CACJ,MAAAK,EAAe,MAAMC,EACzB,CAACN,CAAW,EACZE,CAAA,EAEE,GAAAG,EAAa,SAAS,SAAW,EACnC,MAAM,IAAI,MACR,0DAA0DL,UAAoBK,EAAa,SAAS,QAAA,EAGjG,OAAAA,EAAa,SAAS,CAAC,CAChC,EACAJ,CAAA,CAEJ,CAEgB,SAAAM,EACdC,EACAC,EACAR,EACA,CAGO,OAAAG,EAFU,CAAC,kBAAmB,SAAUI,EAAQC,CAAM,EAI3D,UACuB,MAAMC,EACzBF,EACAC,CAAA,GAEkB,SAEtBR,CAAA,CAEJ,CAEgB,SAAAU,EACdC,EACAX,EACA,CAGO,OAAAG,EAFU,CAAC,kBAAmBQ,CAAO,EAI1C,UACmB,MAAMC,EACrBD,CAAA,GAEc,KAElBX,CAAA,CAEJ,CCzDA,SAAAa,EAAAC,EAAA,CACE,KAAA,CAAA,OAAAC,EAAA,SAAAC,EAAA,YAAAC,CAAA,EAAAH,EAEA,OAAAI,EAAA,OAAA,CAAA,SAAA,CAEIC,EAAAC,EAAA,CAAA,KAAA,MAAA,CAAA,EAAqBD,EACrB,IAAC,CAAA,MAAA,CAAA,WAAA,KAAA,EAC4B,KAAAF,EAAA,OAAA,GAAAI,EAAA,gBAAAN,IAIyB,SAAAC,CAGnD,CAAA,CACH,CAAA,CAAA,CAGN,yYCVA,SAAAM,EAAAR,EAAA,CACE,IAAAf,EAAAe,EAAA,YACA,KAAA,CAAM,YAAAG,EACJ,aAAAM,EACA,gBAAAC,CACiB,EAAAV,EAGnBf,GAAA,OACEA,EAAAyB,GAAA,YAAAA,EAAA,SAGF,KAAA,CAAA,YAAAvB,GAAAC,IACA,CAAAuB,EAAAC,CAAA,EAAAC,EAAA,SAAAH,CAAA,EAIA,CAAA,KAAAI,CAAA,EAAA9B,GAAyCC,GAAA,IAAA,SAAA,EACV,CAC7B,QAAA,CAAAyB,CACY,CACZ,EASF,OANAK,EAAAA,UAAA,IAAA,CACE9B,GAAA0B,GAAA,MAAAG,GACEF,EAAAE,CAAA,CACF,EAAA,CAAA3B,EAAAF,EAAA0B,EAAAG,CAAA,CAAA,EAGF7B,GAAA,MAAAyB,GAAA,MACE,QAAA,MAAQ,8FACN,EAEFL,EAAAW,EAAA,CAAA,CAAA,GAASL,IAAA,OAETN,EAAAY,EAAA,CAAA,MAAA,IAAA,OAAA,EAAA,CAAA,EAAyCN,EAAA,aAEzCN,EACEa,EAAC,CAAA,QAAAjC,EAAA,SAAA,EACgC,KAAAkC,EACzB,YAAAhB,EACO,aAAAM,CACb,CAAA,EAIJJ,EACEN,EAAC,CAAA,OAAAd,EACS,SAAA0B,EAAA,SACkB,YAAAR,CAC1B,CAAA,CAIR"}