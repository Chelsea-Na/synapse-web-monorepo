{"version":3,"file":"contains-584479aa.js","sources":["../../../../node_modules/.pnpm/@restart+hooks@0.4.8_react@18.2.0/node_modules/@restart/hooks/esm/useMounted.js","../../../../node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/querySelectorAll.js","../../../../node_modules/.pnpm/@restart+hooks@0.4.8_react@18.2.0/node_modules/@restart/hooks/esm/usePrevious.js","../../../../node_modules/.pnpm/@restart+hooks@0.4.8_react@18.2.0/node_modules/@restart/hooks/esm/useCallbackRef.js","../../../../node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/contains.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import { useState } from 'react';\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nexport default function useCallbackRef() {\n  return useState(null);\n}","/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}"],"names":["useMounted","mounted","useRef","isMounted","useEffect","toArray","qsa","element","selector","usePrevious","value","ref","useCallbackRef","useState","contains","context","node"],"mappings":"wCAsBe,SAASA,GAAa,CACnC,IAAIC,EAAUC,SAAO,EAAI,EACrBC,EAAYD,EAAAA,OAAO,UAAY,CACjC,OAAOD,EAAQ,OACnB,CAAG,EACDG,OAAAA,EAAAA,UAAU,UAAY,CACpB,OAAAH,EAAQ,QAAU,GACX,UAAY,CACjBA,EAAQ,QAAU,EACxB,CACG,EAAE,CAAE,CAAA,EACEE,EAAU,OACnB,CClCA,IAAIE,EAAU,SAAS,UAAU,KAAK,KAAK,SAAS,UAAU,KAAM,GAAG,KAAK,EAQ7D,SAASC,EAAIC,EAASC,EAAU,CAC7C,OAAOH,EAAQE,EAAQ,iBAAiBC,CAAQ,CAAC,CACnD,CCSe,SAASC,EAAYC,EAAO,CACzC,IAAIC,EAAMT,SAAO,IAAI,EACrBE,OAAAA,EAAAA,UAAU,UAAY,CACpBO,EAAI,QAAUD,CAClB,CAAG,EACMC,EAAI,OACb,CCCe,SAASC,GAAiB,CACvC,OAAOC,EAAAA,SAAS,IAAI,CACtB,CCpBe,SAASC,EAASC,EAASC,EAAM,CAG9C,GAAID,EAAQ,SAAU,OAAOA,EAAQ,SAASC,CAAI,EAClD,GAAID,EAAQ,wBAAyB,OAAOA,IAAYC,GAAQ,CAAC,EAAED,EAAQ,wBAAwBC,CAAI,EAAI,GAC7G","x_google_ignoreList":[0,1,2,3,4]}