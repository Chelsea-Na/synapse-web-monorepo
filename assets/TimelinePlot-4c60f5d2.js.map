{"version":3,"file":"TimelinePlot-4c60f5d2.js","sources":["../../src/components/TimelinePlot/phasesQueryResponseData.ts","../../src/components/TimelinePlot/TimelinePhase.tsx","../../src/components/TimelinePlot/TimelineLegendItem.tsx","../../src/components/TimelinePlot/TimelinePlotSpeciesSelector.tsx","../../src/components/TimelinePlot/TimelinePlot.tsx"],"sourcesContent":["import { QueryResultBundle } from '@sage-bionetworks/synapse-types'\n\nconst SPECIES_COLUMN_NAME = 'species'\nconst OBSERVATION_PHASE_COLUMN_NAME = 'observationphase'\n\nconst hardcodedPhasesQueryResponseData: QueryResultBundle = {\n  concreteType: 'org.sagebionetworks.repo.model.table.QueryResultBundle',\n  queryResult: {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryResult',\n    queryResults: {\n      concreteType: 'org.sagebionetworks.repo.model.table.RowSet',\n      tableId: 'syn52408661',\n      etag: 'a3270cb2-4373-4e12-9981-e12326e54ad1',\n      headers: [\n        {\n          name: 'species',\n          columnType: 'STRING',\n          id: '152514',\n        },\n        {\n          name: 'observationPhase',\n          columnType: 'STRING',\n          id: '197976',\n        },\n        {\n          name: 'observationPhaseOrder',\n          columnType: 'INTEGER',\n          id: '198102',\n        },\n        {\n          name: 'observationTimeMax',\n          columnType: 'INTEGER',\n          id: '198103',\n        },\n        {\n          name: 'observationTimeUnits',\n          columnType: 'STRING',\n          id: '198101',\n        },\n      ],\n      rows: [\n        {\n          rowId: 9,\n          versionNumber: 4,\n          values: ['Danio rerio', 'embryo', '1', '7', 'days'],\n        },\n        {\n          rowId: 10,\n          versionNumber: 4,\n          values: ['Danio rerio', 'larval', '2', '3', 'months'],\n        },\n        {\n          rowId: 11,\n          versionNumber: 4,\n          values: ['Danio rerio', 'juvenile', '3', '6', 'months'],\n        },\n        {\n          rowId: 12,\n          versionNumber: 4,\n          values: ['Danio rerio', 'adult', '4', '12', 'months'],\n        },\n        {\n          rowId: 16,\n          versionNumber: 4,\n          values: ['Drosophila', 'embryo', '1', '24', 'hours'],\n        },\n        {\n          rowId: 17,\n          versionNumber: 4,\n          values: ['Drosophila', 'larval', '2', '5', 'days'],\n        },\n        {\n          rowId: 18,\n          versionNumber: 4,\n          values: ['Drosophila', 'pupal', '3', '12', 'days'],\n        },\n        {\n          rowId: 19,\n          versionNumber: 4,\n          values: ['Drosophila', 'adult', '4', '5', 'weeks'],\n        },\n        {\n          rowId: 1,\n          versionNumber: 4,\n          values: ['Mus musculus', 'prenatal', '1', '21', 'days'],\n        },\n        {\n          rowId: 2,\n          versionNumber: 4,\n          values: ['Mus musculus', 'postnatal', '2', '6', 'months'],\n        },\n        {\n          rowId: 20,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'prenatal', '1', '23', 'days'],\n        },\n        {\n          rowId: 21,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'neonatal', '2', '4', 'weeks'],\n        },\n        {\n          rowId: 22,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'weanling', '3', '2', 'months'],\n        },\n        {\n          rowId: 23,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'juvenile', '4', '3', 'months'],\n        },\n        {\n          rowId: 24,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'adolescent', '5', '6', 'months'],\n        },\n        {\n          rowId: 25,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'adult', '6', '12', 'months'],\n        },\n        {\n          rowId: 13,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'log phase', '1', '7', 'days'],\n        },\n        {\n          rowId: 14,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'stationary phase', '2', '2', 'weeks'],\n        },\n        {\n          rowId: 15,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'death phase', '3', '3', 'weeks'],\n        },\n        {\n          rowId: 3,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'prenatal', '1', '115', 'days'],\n        },\n        {\n          rowId: 4,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'neonatal', '2', '3', 'months'],\n        },\n        {\n          rowId: 5,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'weanling', '3', '6', 'months'],\n        },\n        {\n          rowId: 6,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'juvenile', '4', '12', 'months'],\n        },\n        {\n          rowId: 7,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'adolescent', '5', '2', 'years'],\n        },\n        {\n          rowId: 8,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'adult', '6', '3', 'years'],\n        },\n      ],\n    },\n  },\n}\n\nexport const phaseSpeciesIndex =\n  hardcodedPhasesQueryResponseData.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === SPECIES_COLUMN_NAME,\n  )!\nexport const phaseObservationIndex =\n  hardcodedPhasesQueryResponseData.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === OBSERVATION_PHASE_COLUMN_NAME,\n  )!\n\nexport default hardcodedPhasesQueryResponseData\n","import React, { useRef, useState } from 'react'\nimport Plotly, { Layout } from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport dayjs, { ManipulateType } from 'dayjs'\nimport { Dialog } from '@mui/material'\nimport {\n  ObservationCard,\n  ObservationCardSchema,\n} from '../row_renderers/ObservationCard'\nimport { Row } from '@sage-bionetworks/synapse-types'\nimport pluralize from 'pluralize'\nconst Plot = createPlotlyComponent(Plotly)\n\ntype TimepointData = {\n  timepoints: dayjs.Dayjs[]\n  hoverOverIndex: number\n}\n\nconst getTimepointData = (\n  start: dayjs.Dayjs,\n  rowData: Row[],\n  schema: ObservationCardSchema,\n  hoverEventRowId?: number, //if supplied, will return the index of this row\n): TimepointData => {\n  let hoverOverIndex = -1\n  const timepoints = rowData.map((row, index) => {\n    const time = parseInt(row.values[schema.time]!)\n    const timeUnit = row.values[schema.timeUnits]\n    if (row.rowId == hoverEventRowId) {\n      hoverOverIndex = index\n    }\n    return start.add(time, timeUnit as ManipulateType)\n  })\n  return {\n    timepoints,\n    hoverOverIndex,\n  }\n}\n\nexport const getMaxDate = (timepoints: dayjs.Dayjs[]) => {\n  return timepoints.reduce(\n    (maxDateItem: dayjs.Dayjs, currentDateItem: dayjs.Dayjs) => {\n      if (!maxDateItem || currentDateItem.isAfter(maxDateItem)) {\n        return currentDateItem\n      }\n      return maxDateItem\n    },\n  )\n}\n\nconst getTimelineData = (timepointData: TimepointData, rowData: Row[]) => {\n  const data = timepointData.timepoints.map((timepoint, index) => {\n    const utcFormattedTimepoint = timepoint.format()\n    const isHoveredOver = index == timepointData.hoverOverIndex\n    const rowId = rowData[index].rowId\n    return {\n      x: [utcFormattedTimepoint, utcFormattedTimepoint, utcFormattedTimepoint],\n      y: [0, 0.5, 1],\n      mode: 'lines',\n      line: {\n        color: isHoveredOver ? 'black' : 'gray',\n        width: 2,\n      },\n      // Add event into in the customdata\n      customdata: [rowId, rowId, rowId],\n      // but tell Plotly that we do not want it to show a hover tooltip (we're going to handle this)\n      hoverinfo: 'none',\n    }\n  })\n  return data\n}\n\nconst getLayout = (\n  start: dayjs.Dayjs,\n  end: dayjs.Dayjs,\n  color: string,\n  annotateTime?: number,\n  annotateTimeUnits?: ManipulateType,\n): Partial<Layout> => {\n  const annotations: Partial<Plotly.Annotations>[] = [\n    {\n      x: start.add(1, 'day').format(),\n      y: -1,\n      text: '                             ', // hacky annotation in the middle of the plot so it does not shift when showing other annotations\n      showarrow: false,\n      textangle: '270',\n      height: 15,\n    },\n  ]\n  if (annotateTime && annotateTimeUnits) {\n    const x = start.add(annotateTime, annotateTimeUnits)\n    annotations.push({\n      x: x.format(),\n      y: -1,\n      text: `${annotateTime} ${pluralize(annotateTimeUnits, annotateTime)}`,\n      showarrow: false,\n      textangle: '270',\n      height: 15,\n    })\n  }\n  return {\n    hovermode: 'closest',\n    dragmode: false, //disallow interaction\n    showlegend: false,\n    xaxis: {\n      showgrid: false,\n      showticklabels: false,\n      showline: false,\n      zeroline: false,\n    },\n\n    yaxis: {\n      range: [-1, 1],\n      showgrid: false,\n      zeroline: false,\n      showline: false,\n      showticklabels: false,\n    },\n    annotations: annotations,\n    // Each phase has a shape\n    shapes: [\n      {\n        type: 'rect',\n        x0: start.subtract(end.diff(start) / 10).format(), // add 10% to the left side of the graph\n        x1: end.add(end.diff(start) / 3).format(), // add 33% to right side of the graph\n        y0: 0.25,\n        y1: 0.75,\n        fillcolor: color,\n        opacity: 0.8,\n        line: {\n          width: 0,\n        },\n      },\n    ],\n    margin: {\n      l: 0,\n      r: 0,\n      t: 60,\n      b: 60,\n    },\n    // autosize: false,\n  }\n}\n\ntype TimelinePhaseProps = {\n  name: string\n  color: string\n  rowData: Row[]\n  schema: ObservationCardSchema\n  widthPx: number\n}\n\nconst TimelinePhase = ({\n  color,\n  rowData,\n  schema,\n  widthPx,\n}: TimelinePhaseProps) => {\n  const [clickEvent, setClickEvent] = useState<Plotly.PlotMouseEvent>()\n  const [hoverEvent, setHoverEvent] = useState<Plotly.PlotHoverEvent>()\n  const start = dayjs()\n\n  // hide the hover UI if we detect that the user moves the mouse outside of this component boundary\n  const componentRef = useRef<HTMLDivElement>(null)\n  const rowId = clickEvent?.points[0].customdata as number\n  const selectedRow = rowData.filter(row => {\n    return row.rowId === rowId\n  })[0]\n  const hoverEventRowId = hoverEvent?.points[0].customdata as number\n  const hoverRow = rowData.filter(row => {\n    return row.rowId === hoverEventRowId\n  })[0]\n  const annotateTime = hoverRow\n    ? parseInt(hoverRow.values[schema.time]!)\n    : undefined\n  const annotateTimeUnits = hoverRow\n    ? (hoverRow.values[schema.timeUnits] as ManipulateType)\n    : undefined\n  const timepointData = getTimepointData(\n    start,\n    rowData,\n    schema,\n    hoverEventRowId,\n  )\n\n  const end = getMaxDate(timepointData.timepoints)\n  return (\n    <div ref={componentRef}>\n      <Plot\n        style={{ width: widthPx, height: '220px' }}\n        data={getTimelineData(timepointData, rowData)}\n        layout={getLayout(start, end, color, annotateTime, annotateTimeUnits)}\n        config={{ displayModeBar: false }}\n        useResizeHandler={true}\n        onClick={eventData => {\n          setClickEvent(eventData)\n          setHoverEvent(undefined)\n        }}\n        onHover={eventData => {\n          setHoverEvent(eventData)\n        }}\n        onUnhover={() => {\n          setHoverEvent(undefined)\n        }}\n      />\n      {selectedRow && (\n        <Dialog onClose={() => setClickEvent(undefined)} open={!!selectedRow}>\n          <ObservationCard\n            data={selectedRow.values}\n            schema={schema}\n            includePortalCardClass={false}\n          />\n        </Dialog>\n      )}\n    </div>\n  )\n}\n\nexport default TimelinePhase\n","import React from 'react'\nimport { Box } from '@mui/system'\nimport { Typography } from '@mui/material'\n\ntype TimelineLegendItemProps = {\n  color: string\n  phaseName: string | null\n}\nconst TimelineLegendItem = ({ color, phaseName }: TimelineLegendItemProps) => {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: '7px' }}>\n      <Box\n        sx={{\n          backgroundColor: color,\n          width: '20px',\n          height: '20px',\n        }}\n      />\n      <Typography variant=\"body1\">{phaseName?.toUpperCase()}</Typography>\n    </Box>\n  )\n}\n\nexport default TimelineLegendItem\n","import React, { useEffect } from 'react'\nimport { useGetFullTableQueryResults } from '../../synapse-queries'\nimport { BUNDLE_MASK_QUERY_RESULTS } from '../../utils/SynapseConstants'\nimport { Box } from '@mui/system'\nimport { parseEntityIdFromSqlStatement } from '../../utils/functions'\nimport { InputLabel, Select, MenuItem } from '@mui/material'\nimport { StyledFormControl } from '../styled'\nimport { QueryFilter } from '@sage-bionetworks/synapse-types'\n\nexport type TimelinePlotSpeciesSelectorProps = {\n  sql: string\n  additionalFilters?: QueryFilter[]\n  species?: string | null\n  setSpecies: React.Dispatch<React.SetStateAction<string | null | undefined>>\n}\nexport const TimelinePlotSpeciesSelector = ({\n  sql,\n  additionalFilters = [],\n  species,\n  setSpecies,\n}: TimelinePlotSpeciesSelectorProps) => {\n  const eventsTableId = parseEntityIdFromSqlStatement(sql)\n  // Fetch the species\n  const eventTableQuery = useGetFullTableQueryResults({\n    entityId: eventsTableId,\n    query: {\n      sql: `SELECT species FROM ${eventsTableId} WHERE species IS NOT null GROUP BY species`,\n      additionalFilters: additionalFilters,\n    },\n    partMask: BUNDLE_MASK_QUERY_RESULTS,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n  })\n\n  const { data: speciesData, isLoading } = eventTableQuery\n  const rows = speciesData?.queryResult?.queryResults?.rows\n\n  useEffect(() => {\n    if (rows) {\n      setSpecies(rows.length > 0 ? rows[0].values[0] : null)\n    }\n  }, [rows, setSpecies])\n\n  // Hide if loading, there are no rows, or there's only 1 species option\n  if (isLoading || !rows || rows.length < 2) {\n    return <></>\n  }\n\n  return (\n    <Box>\n      <StyledFormControl>\n        <InputLabel>Species</InputLabel>\n        <Select\n          sx={{ marginLeft: '2px', marginBottom: '2px' }}\n          value={species}\n          defaultValue={rows[0].values[0]}\n          label=\"Species\"\n          onChange={event => setSpecies(event.target.value)}\n        >\n          {rows?.map(row => {\n            const species = row.values[0]!\n            return (\n              <MenuItem key={species} value={species}>\n                {species}\n              </MenuItem>\n            )\n          })}\n        </Select>\n      </StyledFormControl>\n    </Box>\n  )\n}\nexport default TimelinePlotSpeciesSelector\n","import React, { useState } from 'react'\nimport { useGetFullTableQueryResults } from '../../synapse-queries'\nimport { BUNDLE_MASK_QUERY_RESULTS } from '../../utils/SynapseConstants'\nimport hardcodedPhasesQueryResponseData, {\n  phaseObservationIndex,\n  phaseSpeciesIndex,\n} from './phasesQueryResponseData'\nimport TimelinePhase from './TimelinePhase'\nimport getColorPalette from '../ColorGradient/ColorGradient'\nimport { Box } from '@mui/system'\nimport {\n  ColumnSingleValueFilterOperator,\n  ColumnSingleValueQueryFilter,\n  Row,\n} from '@sage-bionetworks/synapse-types'\nimport { ObservationCardSchema } from '../row_renderers/ObservationCard'\nimport {\n  SQLOperator,\n  getAdditionalFilters,\n  parseEntityIdFromSqlStatement,\n} from '../../utils/functions'\nimport { SizeMe } from 'react-sizeme'\nimport TimelineLegendItem from './TimelineLegendItem'\nimport { Skeleton } from '@mui/material'\nimport TimelinePlotSpeciesSelector from './TimelinePlotSpeciesSelector'\nimport NoContentAvailable from '../SynapseTable/NoContentAvailable'\nimport { getHeaderIndex } from '../../utils/functions/queryUtils'\n\nconst OBSERVATION_PHASE_COLUMN_NAME = 'phase'\nconst OBSERVATION_TIME_COLUMN_NAME = 'time'\nconst OBSERVATION_TIME_UNITS_COLUMN_NAME = 'timeunits'\nconst OBSERVATION_SUBMITTER_NAME_COLUMN_NAME = 'submittername'\nconst OBSERVATION_TEXT_COLUMN_NAME = 'text'\nconst OBSERVATION_TYPE_COLUMN_NAME = 'tag'\nconst OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME = 'submitteruserid'\n\nexport type TimelinePlotProps = {\n  sql: string\n  searchParams?: Record<string, string>\n  sqlOperator?: SQLOperator\n  defaultSpecies?: string //for test\n}\nexport const TimelinePlot = ({\n  sql,\n  searchParams,\n  sqlOperator,\n  defaultSpecies,\n}: TimelinePlotProps) => {\n  // Fetch the table data\n  const eventsTableId = parseEntityIdFromSqlStatement(sql)\n  const [species, setSpecies] = useState<string | undefined | null>(\n    defaultSpecies,\n  )\n  const queryFilters =\n    getAdditionalFilters(eventsTableId, searchParams, sqlOperator) ?? []\n  const speciesFilter: ColumnSingleValueQueryFilter | undefined = species\n    ? {\n        columnName: 'species',\n        concreteType:\n          'org.sagebionetworks.repo.model.table.ColumnSingleValueQueryFilter',\n        values: [species],\n        operator: ColumnSingleValueFilterOperator.EQUAL,\n      }\n    : undefined\n  const additionalFilters = [...queryFilters]\n  if (speciesFilter) {\n    additionalFilters.push(speciesFilter)\n  }\n  const eventTableQuery = useGetFullTableQueryResults(\n    {\n      entityId: eventsTableId,\n      query: {\n        sql: `${sql} WHERE observationTime IS NOT NULL`,\n        sort: [\n          {\n            column: 'observationTime',\n            direction: 'ASC',\n          },\n        ],\n        additionalFilters: additionalFilters,\n      },\n\n      partMask: BUNDLE_MASK_QUERY_RESULTS,\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    },\n    {\n      enabled: !!species,\n    },\n  )\n\n  const { data: eventsData, isLoading } = eventTableQuery\n\n  if (isLoading) {\n    return <LoadingTimelinePlot />\n  }\n  const observationPhaseIndex = getHeaderIndex(\n    OBSERVATION_PHASE_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTimeIndex = getHeaderIndex(\n    OBSERVATION_TIME_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTimeUnitIndex = getHeaderIndex(\n    OBSERVATION_TIME_UNITS_COLUMN_NAME,\n    eventsData,\n  )\n  const observationSubmitterNameIndex = getHeaderIndex(\n    OBSERVATION_SUBMITTER_NAME_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTextIndex = getHeaderIndex(\n    OBSERVATION_TEXT_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTypeIndex = getHeaderIndex(\n    OBSERVATION_TYPE_COLUMN_NAME,\n    eventsData,\n  )\n  const submitterUserIdIndex = getHeaderIndex(\n    OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME,\n    eventsData,\n  )\n  const schema: ObservationCardSchema = {\n    submitterName: observationSubmitterNameIndex,\n    submitterUserId: submitterUserIdIndex,\n    tag: observationTypeIndex,\n    text: observationTextIndex,\n    time: observationTimeIndex,\n    timeUnits: observationTimeUnitIndex,\n  }\n\n  // filter the phases query response data to the specific species\n  let phaseRowsWithData: Row[] = []\n  if (species) {\n    const phasesForTargetSpecies =\n      hardcodedPhasesQueryResponseData.queryResult?.queryResults.rows.filter(\n        row => {\n          return row.values[phaseSpeciesIndex] == species\n        },\n      )\n    // then walk through the phases and create a plot for each (iff event data exists for that phase!)\n\n    if (!phasesForTargetSpecies || phasesForTargetSpecies.length == 0) {\n      return <></>\n    }\n    phaseRowsWithData = phasesForTargetSpecies.filter(phaseRow => {\n      const phaseEventRows = eventsData?.queryResult?.queryResults.rows.filter(\n        row => {\n          return (\n            row.values[observationPhaseIndex] ==\n            phaseRow.values[phaseObservationIndex]\n          )\n        },\n      )\n      return phaseEventRows?.length && phaseEventRows?.length > 0\n    })\n  }\n  if (species === null) {\n    return <NoContentAvailable />\n  }\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n        {/* Species selector */}\n        <Box>\n          {!defaultSpecies && (\n            <TimelinePlotSpeciesSelector\n              setSpecies={setSpecies}\n              species={species}\n              sql={sql}\n              additionalFilters={queryFilters}\n            />\n          )}\n        </Box>\n        {/* Legend */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: '25px' }}>\n          {phaseRowsWithData.map((phaseRow, index) => {\n            const { colorPalette } = getColorPalette(index, 1)\n            return (\n              <TimelineLegendItem\n                key={phaseRow.rowId}\n                color={colorPalette[0]}\n                phaseName={phaseRow.values[phaseObservationIndex]}\n              />\n            )\n          })}\n        </Box>\n      </Box>\n      {/* Phase plots */}\n      {species && (\n        <SizeMe monitorWidth noPlaceholder={true}>\n          {({ size }) => (\n            <Box sx={{ display: 'flex' }} className=\"forcePlotlyDefaultCursor\">\n              {phaseRowsWithData.map((phaseRow, index) => {\n                const { colorPalette } = getColorPalette(index, 1)\n                const phaseEventRows =\n                  eventsData?.queryResult?.queryResults.rows.filter(row => {\n                    return (\n                      row.values[observationPhaseIndex] ==\n                      phaseRow.values[phaseObservationIndex]\n                    )\n                  })\n                return (\n                  <TimelinePhase\n                    key={phaseRow.rowId}\n                    name={phaseRow.values[phaseObservationIndex]!}\n                    color={colorPalette[0]}\n                    rowData={phaseEventRows!}\n                    schema={schema}\n                    widthPx={\n                      size.width ? size.width / phaseRowsWithData.length : 0\n                    }\n                  />\n                )\n              })}\n            </Box>\n          )}\n        </SizeMe>\n      )}\n    </Box>\n  )\n}\n\nexport const LoadingTimelinePlot = () => {\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n        <Skeleton height=\"45px\" width=\"80px\" />\n        <Skeleton height=\"45px\" width=\"80px\" />\n      </Box>\n      <Box sx={{ display: 'flex' }}>\n        <Skeleton height=\"150px\" width=\"100%\" />\n      </Box>\n    </Box>\n  )\n}\n\nexport default TimelinePlot\n"],"names":["SPECIES_COLUMN_NAME","OBSERVATION_PHASE_COLUMN_NAME","hardcodedPhasesQueryResponseData","phaseSpeciesIndex","_a","header","phaseObservationIndex","Plot","createPlotlyComponent","Plotly","getTimepointData","start","rowData","schema","hoverEventRowId","hoverOverIndex","row","index","time","timeUnit","getMaxDate","timepoints","maxDateItem","currentDateItem","getTimelineData","timepointData","timepoint","utcFormattedTimepoint","isHoveredOver","rowId","getLayout","end","color","annotateTime","annotateTimeUnits","annotations","x","pluralize","TimelinePhase","widthPx","clickEvent","setClickEvent","useState","hoverEvent","setHoverEvent","dayjs","componentRef","useRef","selectedRow","hoverRow","jsxs","jsx","eventData","Dialog","ObservationCard","TimelineLegendItem","phaseName","Box","Typography","TimelinePlotSpeciesSelector","sql","additionalFilters","species","setSpecies","eventsTableId","parseEntityIdFromSqlStatement","eventTableQuery","useGetFullTableQueryResults","BUNDLE_MASK_QUERY_RESULTS","speciesData","isLoading","rows","_b","useEffect","Fragment","StyledFormControl","InputLabel","Select","event","species2","MenuItem","OBSERVATION_TIME_COLUMN_NAME","OBSERVATION_TIME_UNITS_COLUMN_NAME","OBSERVATION_SUBMITTER_NAME_COLUMN_NAME","OBSERVATION_TEXT_COLUMN_NAME","OBSERVATION_TYPE_COLUMN_NAME","OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME","TimelinePlot","searchParams","sqlOperator","defaultSpecies","queryFilters","getAdditionalFilters","speciesFilter","ColumnSingleValueFilterOperator","eventsData","LoadingTimelinePlot","observationPhaseIndex","getHeaderIndex","observationTimeIndex","observationTimeUnitIndex","observationSubmitterNameIndex","observationTextIndex","observationTypeIndex","submitterUserIdIndex","phaseRowsWithData","phasesForTargetSpecies","phaseRow","phaseEventRows","NoContentAvailable","colorPalette","getColorPalette","SizeMe","size","Skeleton"],"mappings":"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"}