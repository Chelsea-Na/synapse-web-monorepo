{"version":3,"file":"StorybookComponentWrapper-0ea07637.js","sources":["../../src/lib/utils/hooks/useDetectSSOCode.ts","../../../../node_modules/.pnpm/react-query@3.39.1_biqbaboplfbrettd7655fr4n2y/node_modules/react-query/devtools/index.js","../../src/lib/containers/StorybookComponentWrapper.tsx"],"sourcesContent":["import {\n  BackendDestinationEnum,\n  PRODUCTION_ENDPOINT_CONFIG,\n} from '../functions/getEndpoint'\nimport { LoginResponse } from '../synapseTypes'\nimport { SynapseClientError } from '../SynapseClientError'\nimport {\n  bindOAuthProviderToAccount,\n  getRootURL,\n  oAuthRegisterAccountStep2,\n  oAuthSessionRequest,\n  setAccessTokenCookie,\n} from '../SynapseClient'\nimport { useEffect } from 'react'\nimport { TwoFactorAuthErrorResponse } from '../synapseTypes/ErrorResponse'\nimport { PROVIDERS } from '../../containers/auth/AuthenticationMethodSelection'\n\ntype UseDetectSSOCodeOptions = {\n  onSignInComplete?: () => void\n  registerAccountUrl?: string\n  onError?: (err: unknown) => void\n  onTwoFactorAuthRequired?: (resp: TwoFactorAuthErrorResponse) => void\n}\n\n/*\n * During SSO login, the authorization provider (Google) will send the user back to the portal with an authorization code,\n * which can be exchanged for a Synapse user session. This function should be called whenever the root App is initialized\n * (to look for this code parameter and complete the round-trip). If state is included, then we assume that this is being\n * used for account creation, where we pass the username through the process.\n */\nexport default function useDetectSSOCode(\n  opts: UseDetectSSOCodeOptions = {},\n): void {\n  const {\n    onSignInComplete,\n    registerAccountUrl = `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!RegisterAccount:0`,\n    onError,\n    onTwoFactorAuthRequired,\n  } = opts\n  useEffect(() => {\n    const redirectURL = getRootURL()\n    // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n    const fullUrl: URL = new URL(window.location.href)\n    // in test environment the searchParams isn't defined\n    const { searchParams } = fullUrl\n    if (!searchParams) {\n      return\n    }\n    const code = searchParams.get('code')\n    const provider = searchParams.get('provider')\n    const state = searchParams.get('state')\n    // state is used during OAuth based Synapse account creation (it's the username)\n    if (code && provider) {\n      const redirectUrl = `${redirectURL}?provider=${provider}`\n\n      if (PROVIDERS.GOOGLE == provider) {\n        const onSuccess = (\n          response: LoginResponse | TwoFactorAuthErrorResponse,\n        ) => {\n          if ('accessToken' in response) {\n            setAccessTokenCookie(response.accessToken).then(onSignInComplete)\n          } else {\n            // The app will redirect or open a modal to handle 2FA\n            if (onTwoFactorAuthRequired) {\n              onTwoFactorAuthRequired(response)\n            }\n          }\n        }\n        const onFailure = (err: SynapseClientError) => {\n          if (err.status === 404) {\n            // Synapse account not found, send to registration page\n            window.location.replace(registerAccountUrl)\n          }\n          console.error('Error with Google account association: ', err)\n          if (onError) {\n            onError(err.reason)\n          }\n        }\n\n        if (state) {\n          oAuthRegisterAccountStep2(\n            state,\n            provider,\n            code,\n            redirectUrl,\n            BackendDestinationEnum.REPO_ENDPOINT,\n          )\n            .then(onSuccess)\n            .catch(onFailure)\n        } else {\n          oAuthSessionRequest(\n            provider,\n            code,\n            redirectUrl,\n            BackendDestinationEnum.REPO_ENDPOINT,\n          )\n            .then(onSuccess)\n            .catch(onFailure)\n        }\n      } else if (PROVIDERS.ORCID == provider) {\n        // now bind this to the user account\n        const onFailure = (err: SynapseClientError) => {\n          console.error('Error binding ORCiD to account: ', err)\n          if (onError) {\n            onError(err.reason)\n          }\n        }\n        bindOAuthProviderToAccount(\n          provider,\n          code,\n          redirectUrl,\n          BackendDestinationEnum.REPO_ENDPOINT,\n        )\n          .then(onSignInComplete)\n          .catch(onFailure)\n      }\n    }\n    // Intentionally have an empty dep array -- this should only run once per mount since it's checking for params that come from a redirect\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n","if (process.env.NODE_ENV !== 'development') {\n  module.exports = {\n    ReactQueryDevtools: function () {\n      return null\n    },\n    ReactQueryDevtoolsPanel: function () {\n      return null\n    },\n  }\n} else {\n  module.exports = require('./development')\n}\n","import React, { useEffect, useMemo } from 'react'\nimport { MemoryRouter } from 'react-router-dom'\nimport {\n  defaultQueryClientConfig,\n  SynapseContextProvider,\n  SynapseContextType,\n} from '../utils/SynapseContext'\nimport { QueryClient } from 'react-query'\nimport { SynapseClient } from '../utils'\nimport { SynapseToastContainer } from './ToastMessage'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport dayjs from 'dayjs'\nimport {\n  getAccessTokenFromCookie,\n  getUserProfile,\n  getAuthenticatedOn,\n  signOut,\n} from '../utils/SynapseClient'\nimport { SynapseClientError } from '../utils/SynapseClientError'\nimport { STACK_MAP, SynapseStack } from '../utils/functions/getEndpoint'\nimport defaultMuiTheme from '../utils/theme/DefaultTheme'\nimport {\n  adKnowledgePortalPalette,\n  arkPortalPalette,\n  bsmnPortalPalette,\n  cancerComplexityPortalPalette,\n  crcResearcherPortalPalette,\n  digitalHealthPortalPalette,\n  mtbPalette,\n  nfPortalPalette,\n  palette,\n  psychEncodePortalPalette,\n  sageBionetworksPalette,\n  stopAdPortalPalette,\n} from '../utils/theme/palette/Palettes'\nimport useDetectSSOCode from '../utils/hooks/useDetectSSOCode'\n\nexport async function sessionChangeHandler() {\n  let accessToken: string | undefined = await getAccessTokenFromCookie()\n  let profile\n  try {\n    profile = await getUserProfile(accessToken)\n  } catch (err) {\n    if (err instanceof SynapseClientError && err.status === 401) {\n      console.error(\n        'Encountered error fetching profile: ',\n        err,\n        'Signing out...',\n      )\n      await signOut()\n      accessToken = undefined\n    }\n    // Otherwise rethrow\n    throw err\n  }\n  let date\n  if (accessToken) {\n    getAuthenticatedOn(accessToken).then(authenticatedOn => {\n      date = dayjs(authenticatedOn.authenticatedOn).format('L LT')\n    })\n  }\n  return { accessToken, profile, authenticatedOn: date }\n}\nconst storybookQueryClient = new QueryClient(defaultQueryClientConfig)\n\nfunction overrideEndpoint(stack: SynapseStack) {\n  const endpointConfig = STACK_MAP[stack]\n  window['SRC'] = {\n    OVERRIDE_ENDPOINT_CONFIG: endpointConfig,\n  }\n  storybookQueryClient.resetQueries()\n}\n\nconst paletteMap = {\n  default: palette,\n  sageBionetworks: sageBionetworksPalette,\n  mtb: mtbPalette,\n  arkPortal: arkPortalPalette,\n  adKnowledgePortal: adKnowledgePortalPalette,\n  nfPortal: nfPortalPalette,\n  bsmnPortal: bsmnPortalPalette,\n  psychEncodePortal: psychEncodePortalPalette,\n  stopAdPortal: stopAdPortalPalette,\n  digitalHealthPortal: digitalHealthPortalPalette,\n  crcResearcherPortal: crcResearcherPortalPalette,\n  cancerComplexityPortal: cancerComplexityPortalPalette,\n}\n\n/**\n * Wraps storybook story components to ensure that all components receive required context.\n * @param props\n * @returns\n */\nexport function StorybookComponentWrapper(props: {\n  children: React.ReactNode\n  /* This will match the `globalTypes` object in preview.jsx. */\n  storybookContext: any\n}) {\n  const { storybookContext } = props\n\n  useEffect(() => {\n    overrideEndpoint(storybookContext.globals.stack as SynapseStack)\n  }, [storybookContext.globals.stack])\n\n  const [accessToken, setAccessToken] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  useDetectSSOCode()\n\n  useEffect(() => {\n    sessionChangeHandler().then(data => {\n      setAccessToken(data.accessToken)\n    })\n  })\n\n  useEffect(() => {\n    async function resetCache() {\n      await storybookQueryClient.cancelQueries()\n      storybookQueryClient.removeQueries()\n      await storybookQueryClient.invalidateQueries()\n    }\n    resetCache()\n  }, [accessToken])\n\n  const synapseContext: Partial<SynapseContextType> = useMemo(\n    () => ({\n      accessToken: accessToken,\n      isInExperimentalMode: SynapseClient.isInSynapseExperimentalMode(),\n      utcTime: SynapseClient.getUseUtcTimeFromCookie(),\n      withErrorBoundary: true,\n      downloadCartPageUrl: '/?path=/story/download-downloadcartpage--demo',\n    }),\n    [accessToken],\n  )\n\n  return (\n    <SynapseContextProvider\n      queryClient={storybookQueryClient}\n      key={accessToken}\n      synapseContext={synapseContext}\n      theme={{\n        ...defaultMuiTheme,\n        palette: paletteMap[storybookContext.globals.palette],\n      }}\n    >\n      <MemoryRouter>\n        {storybookContext.globals.showReactQueryDevtools && (\n          <ReactQueryDevtools />\n        )}\n        <SynapseToastContainer />\n        <main>{props.children}</main>\n      </MemoryRouter>\n    </SynapseContextProvider>\n  )\n}\n\nexport default StorybookComponentWrapper\n"],"names":["useDetectSSOCode","opts","onSignInComplete","registerAccountUrl","PRODUCTION_ENDPOINT_CONFIG","onError","onTwoFactorAuthRequired","useEffect","redirectURL","getRootURL","fullUrl","searchParams","code","provider","state","redirectUrl","PROVIDERS","onSuccess","response","setAccessTokenCookie","onFailure","err","oAuthRegisterAccountStep2","BackendDestinationEnum","oAuthSessionRequest","bindOAuthProviderToAccount","devtoolsModule","sessionChangeHandler","accessToken","getAccessTokenFromCookie","profile","getUserProfile","SynapseClientError","signOut","date","getAuthenticatedOn","authenticatedOn","dayjs","storybookQueryClient","QueryClient","defaultQueryClientConfig","overrideEndpoint","stack","endpointConfig","STACK_MAP","paletteMap","palette","sageBionetworksPalette","mtbPalette","arkPortalPalette","adKnowledgePortalPalette","nfPortalPalette","bsmnPortalPalette","psychEncodePortalPalette","stopAdPortalPalette","digitalHealthPortalPalette","crcResearcherPortalPalette","cancerComplexityPortalPalette","StorybookComponentWrapper","props","storybookContext","setAccessToken","React","data","resetCache","synapseContext","useMemo","SynapseClient.isInSynapseExperimentalMode","SynapseClient.getUseUtcTimeFromCookie","jsx","SynapseContextProvider","defaultMuiTheme","jsxs","MemoryRouter","ReactQueryDevtools","SynapseToastContainer"],"mappings":"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"}