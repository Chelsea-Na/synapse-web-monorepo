import{j as a}from"./jsx-runtime-9dc53467.js";import{S,a as E,s as I,aa as O}from"./SynapseClient-1dd62219.js";import{h as T,g as C,f,i as P,j as k}from"./wikiHandlers-5c2e0cea.js";import{M as t}from"./getEndpoint-ac94413e.js";import{l as p}from"./index-2d00386d.js";import{o as g}from"./index-3619b06a.js";import{M as n}from"./mock_user_profile-2f3a933e.js";import{g as _}from"./accessRequirementHandlers-f56e1e0b.js";import{a as q}from"./userProfileHandlers-2a63a758.js";import{U as M}from"./SynapseTableCell-603406db.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./SynapseConstants-567f6998.js";import"./OrientationBanner-1c6f5b11.js";import"./FullWidthAlert-88a09c3d.js";import"./Alert-34cc4490.js";import"./styled-01bfb76d.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-55b21f7f.js";import"./createSvgIcon-af041161.js";import"./Paper-b990f44f.js";import"./IconButton-e4815158.js";import"./ButtonBase-f3be4fb1.js";import"./emotion-react.browser.esm-04dee135.js";import"./assertThisInitialized-081f9914.js";import"./inheritsLoose-c82a83d4.js";import"./TransitionGroupContext-1474f578.js";import"./useForkRef-8feb2ebf.js";import"./useIsFocusVisible-e5f6c995.js";import"./Stack-b0292d83.js";import"./extendSxProp-e91f91cb.js";import"./Box-ddce9904.js";import"./AlertTitle-1d33b140.js";import"./Typography-10432b83.js";import"./useTheme-541c21f5.js";import"./Grow-5b2ac6ed.js";import"./isHostComponent-fa76b8d9.js";import"./index-d3ea75b5.js";import"./utils-7ba61cee.js";import"./ClickAwayListener-3907f9d7.js";import"./Tooltip-3e2f7ab3.js";import"./Button-6cf38875.js";import"./InfoTwoTone-1a20b6d6.js";import"./CheckCircleTwoTone-5c97bb6f.js";import"./inputBaseClasses-9710a733.js";import"./Fade-7e0b73d6.js";import"./Link-980677d0.js";import"./_getTag-a0ec24ca.js";import"./isArray-5e3f9107.js";import"./StringUtils-2ea3ab4d.js";import"./dayjs.min-f79c4412.js";import"./index-9d475cdf.js";import"./tiny-invariant-dd7d57d2.js";import"./mockProject-a51f06fb.js";import"./times-39c4125c.js";import"./_baseTimes-8715be3e.js";import"./identity-46f208ab.js";import"./isSymbol-7c514724.js";import"./mockWiki-248c911a.js";import"./mock_file_handle-5fea814e.js";import"./util-c0197ce2.js";import"./index-4166e284.js";import"./mockEntity-13ce4162.js";import"./mockFileEntity-823eda40.js";import"./DateFormatter-5babad06.js";import"./timezone-f53425a4.js";import"./IconSvg-9cb7df33.js";import"./ErrorOutlined-6b31cdea.js";import"./GetAppTwoTone-8acfb280.js";import"./InfoOutlined-1c91e984.js";import"./SynapseTableConstants-5f56c39f.js";import"./UserBadge-707016af.js";import"./Popover-f3a8cf5d.js";import"./Modal-7f809725.js";import"./Backdrop-acbc2ec5.js";import"./getScrollbarSize-ac846fe6.js";import"./ownerWindow-2c76219e.js";import"./createChainedFunction-0bab83cf.js";import"./cloneDeep-8a8b372e.js";import"./_baseClone-dc93fc3a.js";import"./_Uint8Array-98add9bc.js";import"./SkeletonTable-d1c3c025.js";import"./Skeleton-c327557e.js";import"./ToastMessage-02301a16.js";import"./CSSTransition-d4a63f6f.js";import"./hasClass-ec9efd32.js";import"./uniqueId-4d05949d.js";import"./toString-cc90cb98.js";import"./Avatar-b9207744.js";import"./EntityLink-d304687d.js";import"./useEntity-7a1d0409.js";import"./useMutation-fb195a91.js";import"./useInfiniteQuery-c210f1e8.js";import"./isEqual-592f8fa4.js";import"./_baseIsEqual-5ae1325b.js";import"./_cacheHas-9c553a57.js";import"./_setToArray-3d6ec6fd.js";import"./InfiniteQueryUtils-54ae7e6b.js";import"./pick-ab089642.js";import"./hasIn-9f27088b.js";import"./_baseSlice-cf92e063.js";import"./isPlainObject-75ceb805.js";import"./_overRest-1404b737.js";import"./useGetEntityHeaders-4328e656.js";import"./EntityIcon-3ac93a02.js";import"./ErrorChip-debe9caa.js";import"./Chip-3ab3a829.js";import"./index-e4fc7078.js";import"./SqlFunctions-ff660971.js";import"./RegularExpressions-bc0adf55.js";import"./UserSearchBoxV2-844a4dae.js";import"./Select-ce3716e1.esm-6f08caf7.js";import"./use-deep-compare-effect.esm-3f8944c0.js";import"./uniq-44d6949f.js";import"./_isIterateeCall-ce2bb82d.js";import"./without-ecf2a23f.js";import"./_baseRest-b81a47b3.js";import"./isArrayLikeObject-044d0a87.js";import"./UserOrTeamBadge-982993db.js";import"./index-887d61c3.js";import"./Icon-dc4c2fbd.js";import"./ShowMore-0d3229ca.js";import"./WideButton-2dd27cba.js";import"./LoadingScreen-d62555af.js";import"./LinearProgress-8d1ab3ac.js";import"./useTeamMembers-be5a4dbb.js";import"./pluralize-9f2b9a2f.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./index.modern-42b48b42.js";import"./mapValues-c1561695.js";import"./isPlainObject-ad60ab85.js";import"./now-104568b6.js";import"./ObservationCard-4180f352.js";import"./ThemesPlot-40d8b4eb.js";import"./ElementWithTooltip-65e3e88d.js";import"./Dropdown-eef3dde7.js";import"./ThemeProvider-ab8de9d2.js";import"./createWithBsPrefix-6bc11d95.js";import"./factory-33ef2009.js";import"./sortBy-5833bcc7.js";import"./_getMatchData-806f8014.js";import"./_baseFor-d254fa1e.js";import"./merge-21407079.js";import"./isNil-dc54881d.js";import"./useGetQueryResultBundle-dcdd6824.js";import"./NoSearchResults-37a4f967.js";import"./NoData-300108e2.js";import"./queryUtils-696af99b.js";import"./LastLoginInfo-dc355587.js";import"./jsx-runtime_commonjs-proxy-d6eb4d39.js";import"./isMuiElement-bce4c331.js";import"./Dialog-38c3998f.js";import"./DialogTitle-5867ee56.js";import"./DialogContent-d93df19b.js";import"./TextField-0ffe3a62.js";import"./InputLabel-91f95ac8.js";import"./useFormControl-41ba3265.js";import"./Select-9a32f20b.js";import"./index-c71daf5e.js";import"./MenuList-7ef70bf3.js";import"./List-94bb762a.js";import"./tslib.es6-9c2726d7.js";import"./lodash-bd8c10bc.js";import"./useAccessRequirements-8c20b4b3.js";import"./useMediaQuery-facaab58.js";import"./StandaloneLoginForm-bb853391.js";import"./LoginFlowBackButton-1af116e9.js";import"./TextField-2e900427.js";import"./StyledFormControl-539bab9f.js";import"./LoginMethodButton-bbc095ee.js";import"./Grid-3d403699.js";import"./useDataAccessSubmission-1819699f.js";import"./RadioGroup-13ffdadd.js";import"./Form-afa944a6.js";import"./Col-6a713b25.js";import"./FileUpload-96300159.js";import"./Divider-db784af9.js";import"./dividerClasses-5829bcb2.js";import"./AuthenticatedRequirement-62a7be00.js";import"./RequirementItem-a63d4244.js";import"./ConditionalWrapper-28a47e51.js";import"./CheckTwoTone-3ea78bb9.js";import"./CertificationRequirement-cf2201ea.js";import"./ValidationRequirement-c87f0114.js";import"./TwoFactorAuthEnabledRequirement-705d45f2.js";import"./TwoFactorEnrollmentForm-e0a22a92.js";import"./LeftRightPanel-44366a7b.js";import"./ActionRequiredCard-c800545a.js";import"./RequestDownloadCard-f20d1fca.js";import"./Tabs-736a2cbf.js";import"./QueryCount-65450d4e.js";import"./SkeletonButton-0a3b2bad.js";import"./Checkbox-47042b61.js";import"./EnumFacetFilterUI-965998d0.js";import"./RangeSlider-c3a8abb9.js";import"./react-sizeme-a86e205b.js";import"./ColorGradient-3d3e1969.js";import"./colorPalette-c43701fe.js";import"./SelectionCriteriaPill-d88d38aa.js";import"./useDownloadList-92399126.js";import"./UpsetPlot-83e59404.js";import"./lz-string-8d18d2e5.js";import"./LargeButton-c1a4d54e.js";import"./SynapseVideo-a21b7b0f.js";import"./IconList-3e12c4ee.js";import"./UserCardList-0ecda55c.js";import"./Box-12d95f26.js";const _o={title:"Governance/Data Access Request Flow/Requirements/UnmanagedACTAccessRequirementItem",component:M,argTypes:{isAuthenticated:{control:{type:"boolean"},defaultValue:!0}},decorators:[(o,e)=>a(S,{children:r=>a(E,{synapseContext:{...r,accessToken:e.isAuthenticated?r.accessToken??"fake token":void 0},children:a(o,{})})})]},s={args:{accessRequirement:T},parameters:{msw:{handlers:[..._(t),...C(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:f.id,submitterId:n.toString(),accessorId:n.toString(),state:g.APPROVED};return e(r.status(201),r.json(i))})]}}},m={args:{accessRequirement:P},parameters:{msw:{handlers:[..._(t),...C(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:k.id,submitterId:n.toString(),accessorId:n.toString(),state:g.APPROVED};return e(r.status(201),r.json(i))})]}}};var c,d,u;s.parameters={...s.parameters,docs:{...(c=s.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirement
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirement.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(u=(d=s.parameters)==null?void 0:d.docs)==null?void 0:u.source}}};var R,A,l;m.parameters={...m.parameters,docs:{...(R=m.parameters)==null?void 0:R.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirementWithWiki
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirementWithWiki.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(l=(A=m.parameters)==null?void 0:A.docs)==null?void 0:l.source}}};const qo=["LegacyACTAccessRequirement","LegacyACTAccessRequirementWithWiki"];export{s as LegacyACTAccessRequirement,m as LegacyACTAccessRequirementWithWiki,qo as __namedExportsOrder,_o as default};
//# sourceMappingURL=UnmanagedACTAccessRequirementItem.stories-55b94d4b.js.map
