{"version":3,"file":"useDownloadList-622182fb.js","sources":["../../src/lib/utils/hooks/SynapseAPI/download/useDownloadList.ts"],"sourcesContent":["import {\n  ActionRequiredRequest,\n  AvailableFilesRequest,\n  AvailableFilter,\n  Sort,\n} from '../../../synapseTypes/DownloadListV2/QueryRequestDetails'\nimport {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport {\n  ActionRequiredResponse,\n  AvailableFilesResponse,\n  FilesStatisticsResponse,\n} from '../../../synapseTypes/DownloadListV2/QueryResponseDetails'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { SynapseClient } from '../../../index'\nimport { AddBatchOfFilesToDownloadListResponse } from '../../../synapseTypes/DownloadListV2/AddBatchOfFilesToDownloadListResponse'\n\nexport const downloadListQueryKeys = {\n  /* Key used to invalidate all download list queries */\n  base: ['downloadList'],\n  availableFiles: (request: AvailableFilesRequest) => [\n    ...downloadListQueryKeys.base,\n    'availableFiles',\n    request,\n  ],\n  availableFilesInfinite: (request: AvailableFilesRequest) => [\n    ...downloadListQueryKeys.availableFiles(request),\n    'infinite',\n  ],\n  getActionsRequired: () => [...downloadListQueryKeys.base, 'actionsRequired'],\n  getActionsRequiredInfinite: () => [\n    ...downloadListQueryKeys.getActionsRequired(),\n    'infinite',\n  ],\n  getStatistics: () => [...downloadListQueryKeys.base, 'statistics'],\n}\n\nexport function useGetAvailableFilesToDownload(\n  request: AvailableFilesRequest,\n  options?: UseQueryOptions<\n    AvailableFilesResponse,\n    SynapseClientError,\n    AvailableFilesResponse\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<AvailableFilesResponse, SynapseClientError>(\n    downloadListQueryKeys.availableFiles(request),\n    () => SynapseClient.getAvailableFilesToDownload(request, accessToken),\n    options,\n  )\n}\n\nexport function useGetAvailableFilesToDownloadInfinite(\n  sort?: Sort,\n  filter?: AvailableFilter,\n  options?: UseInfiniteQueryOptions<\n    AvailableFilesResponse,\n    SynapseClientError,\n    AvailableFilesResponse\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const request: AvailableFilesRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.AvailableFilesRequest',\n  }\n  if (sort) {\n    request.sort = [sort]\n  }\n  if (filter) {\n    request.filter = filter\n  }\n  return useInfiniteQuery<AvailableFilesResponse, SynapseClientError>(\n    downloadListQueryKeys.availableFilesInfinite(request),\n    async context => {\n      return SynapseClient.getAvailableFilesToDownload(\n        { ...request, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetDownloadListActionsRequired(\n  options?: UseQueryOptions<\n    ActionRequiredResponse,\n    SynapseClientError,\n    ActionRequiredResponse\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const request: ActionRequiredRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.ActionRequiredRequest',\n  }\n\n  return useQuery<ActionRequiredResponse, SynapseClientError>(\n    downloadListQueryKeys.getActionsRequired(),\n    () => SynapseClient.getDownloadListActionsRequired(request, accessToken),\n    options,\n  )\n}\n\nexport function useGetDownloadListActionsRequiredInfinite(\n  options?: UseInfiniteQueryOptions<\n    ActionRequiredResponse,\n    SynapseClientError,\n    ActionRequiredResponse\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const request: ActionRequiredRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.ActionRequiredRequest',\n  }\n  return useInfiniteQuery<ActionRequiredResponse, SynapseClientError>(\n    downloadListQueryKeys.getActionsRequiredInfinite(),\n    async context => {\n      return await SynapseClient.getDownloadListActionsRequired(\n        { ...request, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetDownloadListStatistics(\n  options?: UseQueryOptions<\n    FilesStatisticsResponse,\n    SynapseClientError,\n    FilesStatisticsResponse\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<FilesStatisticsResponse, SynapseClientError>(\n    downloadListQueryKeys.getStatistics(),\n    () => SynapseClient.getDownloadListStatistics(accessToken),\n    options,\n  )\n}\n\nexport function useAddFileToDownloadList(\n  options?: UseMutationOptions<\n    AddBatchOfFilesToDownloadListResponse,\n    SynapseClientError,\n    {\n      entityId: string\n      entityVersionNumber: number | undefined\n    }\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation({\n    ...options,\n    mutationFn: (vars: {\n      entityId: string\n      entityVersionNumber: number | undefined\n    }) =>\n      SynapseClient.addFileToDownloadListV2(\n        vars.entityId,\n        vars.entityVersionNumber,\n        accessToken,\n      ),\n    mutationKey: ['addFileToDownloadList'],\n    onSuccess: async (data, variables, ctx) => {\n      // PORTALS-2222: Invalidate to load the accurate results\n      await queryClient.invalidateQueries(downloadListQueryKeys.base)\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n"],"names":["downloadListQueryKeys","request","useGetAvailableFilesToDownloadInfinite","sort","filter","options","accessToken","useSynapseContext","useInfiniteQuery","context","SynapseClient.getAvailableFilesToDownload","page","useGetDownloadListActionsRequiredInfinite","SynapseClient.getDownloadListActionsRequired","useGetDownloadListStatistics","useQuery","SynapseClient.getDownloadListStatistics","useAddFileToDownloadList","queryClient","useQueryClient","useMutation","vars","SynapseClient.addFileToDownloadListV2","data","variables","ctx"],"mappings":"mMAyBO,MAAMA,EAAwB,CAEnC,KAAM,CAAC,cAAc,EACrB,eAAiBC,GAAmC,CAClD,GAAGD,EAAsB,KACzB,iBACAC,CACF,EACA,uBAAyBA,GAAmC,CAC1D,GAAGD,EAAsB,eAAeC,CAAO,EAC/C,UACF,EACA,mBAAoB,IAAM,CAAC,GAAGD,EAAsB,KAAM,iBAAiB,EAC3E,2BAA4B,IAAM,CAChC,GAAGA,EAAsB,mBAAmB,EAC5C,UACF,EACA,cAAe,IAAM,CAAC,GAAGA,EAAsB,KAAM,YAAY,CACnE,EAkBgB,SAAAE,EACdC,EACAC,EACAC,EAKA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAClBN,EAAiC,CACrC,aACE,+DAAA,EAEJ,OAAIE,IACMF,EAAA,KAAO,CAACE,CAAI,GAElBC,IACFH,EAAQ,OAASG,GAEZI,EACLR,EAAsB,uBAAuBC,CAAO,EACpD,MAAMQ,GACGC,EACL,CAAE,GAAGT,EAAS,cAAeQ,EAAQ,SAAU,EAC/CH,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BM,EAAK,aACjC,CAAA,CAEJ,CAsBO,SAASC,EACdP,EAKA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAClBN,EAAiC,CACrC,aACE,+DAAA,EAEG,OAAAO,EACLR,EAAsB,2BAA2B,EACjD,MAAMS,GACG,MAAMI,EACX,CAAE,GAAGZ,EAAS,cAAeQ,EAAQ,SAAU,EAC/CH,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BM,EAAK,aACjC,CAAA,CAEJ,CAEO,SAASG,EACdT,EAKA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAQ,EACLf,EAAsB,cAAc,EACpC,IAAMgB,EAAwCV,CAAW,EACzDD,CAAA,CAEJ,CAEO,SAASY,EACdZ,EAQA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAClBW,EAAcC,IACpB,OAAOC,EAAY,CACjB,GAAGf,EACH,WAAagB,GAIXC,EACED,EAAK,SACLA,EAAK,oBACLf,CACF,EACF,YAAa,CAAC,uBAAuB,EACrC,UAAW,MAAOiB,EAAMC,EAAWC,IAAQ,CAGzC,GADM,MAAAP,EAAY,kBAAkBlB,EAAsB,IAAI,EAC1DK,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUkB,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH"}