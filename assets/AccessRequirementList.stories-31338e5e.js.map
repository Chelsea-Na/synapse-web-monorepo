{"version":3,"file":"AccessRequirementList.stories-31338e5e.js","sources":["../../src/lib/containers/access_requirement_list/AccessRequirementList.stories.tsx"],"sourcesContent":["import React from 'react';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport AccessRequirementList from './AccessRequirementList';\nimport { rest } from 'msw';\nimport { MOCK_REPO_ORIGIN } from '../../utils/functions/getEndpoint';\nimport { ACCESS_APPROVAL, ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE, ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE, ACCESS_REQUIREMENT_STATUS, DATA_ACCESS_REQUEST, DATA_ACCESS_REQUEST_SUBMISSION, ENTITY_ACCESS_REQUIREMENTS, FILE_HANDLE_BATCH, RESEARCH_PROJECT } from '../../utils/APIConstants';\nimport { mockManagedACTAccessRequirement, mockSelfSignAccessRequirement } from '../../../mocks/mockAccessRequirements';\nimport mockFileEntity from '../../../mocks/entity/mockFileEntity';\nimport { getHandlers } from '../../../mocks/msw/handlers';\nimport { SynapseContextConsumer, SynapseContextProvider } from '../../utils/SynapseContext';\nimport { AccessApproval, AccessRequirement, AccessRequirementStatus, ApprovalState, BatchFileResult, PaginatedResults, RequestInterface, SubmissionState } from '../../utils/synapseTypes';\nimport { MOCK_USER_ID } from '../../../mocks/user/mock_user_profile';\nimport { ResearchProject } from '../../utils/synapseTypes/ResearchProject';\nimport { mockFileHandle } from '../../../mocks/mock_file_handle';\n\n// More on default export: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nexport default ({\n  title: 'Governance/AccessRequirementList',\n  component: AccessRequirementList,\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n    isAuthenticated: {\n      control: {\n        type: 'boolean'\n      },\n      defaultValue: true\n    }\n  }\n} as ComponentMeta<typeof AccessRequirementList>);\nconst Template: ComponentStory<typeof AccessRequirementList> = args => <SynapseContextConsumer>\n    {context => <SynapseContextProvider synapseContext={{\n    ...context,\n    accessToken: args.isAuthenticated ? context.accessToken || 'fake token' : undefined\n  }}>\n        <p>\n          First, use the StackChanger component to switch to the Mocked Data\n          stack\n        </p>\n\n        <AccessRequirementList {...args} />\n      </SynapseContextProvider>}\n  </SynapseContextConsumer>;\ntype AccessRequirementAndStatus = {\n  accessRequirement: AccessRequirement;\n  status: AccessRequirementStatus;\n};\nfunction getAccessRequirementHandlers(accessRequirements: AccessRequirementAndStatus[]) {\n  return [rest.get(`${MOCK_REPO_ORIGIN}${ENTITY_ACCESS_REQUIREMENTS(':entityId')}`, async (req, res, ctx) => {\n    let status = 200;\n    let response: PaginatedResults<AccessRequirement> = {\n      results: accessRequirements.map(ar => ar.accessRequirement),\n      totalNumberOfResults: accessRequirements.length\n    };\n    return res(ctx.status(status), ctx.json(response));\n  }), rest.get(`${MOCK_REPO_ORIGIN}${ACCESS_REQUIREMENT_STATUS(':id')}`, async (req, res, ctx) => {\n    const matchingArAndStatus = accessRequirements.find(accessRequirements => req.params.id === accessRequirements.accessRequirement.id.toString());\n    const response = matchingArAndStatus?.status;\n    const status = response ? 200 : 404;\n    return res(ctx.status(status), ctx.json(response));\n  })];\n}\nexport const NoRequirements = Template.bind({});\nNoRequirements.parameters = {\n  msw: {\n    handlers: [...getHandlers(MOCK_REPO_ORIGIN), ...getAccessRequirementHandlers([])]\n  }\n};\nNoRequirements.args = {\n  entityId: mockFileEntity.id,\n  renderAsModal: true\n};\nexport const HasMetRequirements = Template.bind({});\nHasMetRequirements.parameters = {\n  msw: {\n    handlers: [...getHandlers(MOCK_REPO_ORIGIN), ...getAccessRequirementHandlers([{\n      accessRequirement: mockManagedACTAccessRequirement,\n      status: {\n        accessRequirementId: mockManagedACTAccessRequirement.id.toString(),\n        concreteType: 'org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus',\n        isApproved: true,\n        expiredOn: '2040-06-01T00:00:00.000Z',\n        currentSubmissionStatus: SubmissionState.APPROVED\n      }\n    }])]\n  }\n};\nHasMetRequirements.args = {\n  entityId: mockFileEntity.id,\n  renderAsModal: true\n};\nexport const HasUnmetRequirements = Template.bind({});\nHasUnmetRequirements.parameters = {\n  msw: {\n    handlers: [...getHandlers(MOCK_REPO_ORIGIN), ...getAccessRequirementHandlers([{\n      accessRequirement: mockManagedACTAccessRequirement,\n      status: {\n        accessRequirementId: mockManagedACTAccessRequirement.id.toString(),\n        concreteType: 'org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus',\n        isApproved: false\n      }\n    }, {\n      accessRequirement: mockSelfSignAccessRequirement,\n      status: {\n        accessRequirementId: mockSelfSignAccessRequirement.id.toString(),\n        concreteType: 'org.sagebionetworks.repo.model.SelfSignAccessRequirement',\n        isApproved: false\n      }\n    }]), rest.post(`${MOCK_REPO_ORIGIN}${ACCESS_APPROVAL}`, async (req, res, ctx) => {\n      const response: AccessApproval = {\n        submitterId: MOCK_USER_ID.toString(),\n        accessorId: MOCK_USER_ID.toString(),\n        state: ApprovalState.APPROVED\n      };\n      return res(ctx.status(201), ctx.json(response));\n    }), rest.post(`${MOCK_REPO_ORIGIN}${RESEARCH_PROJECT}`, async (req, res, ctx) => {\n      return res(ctx.status(201), ctx.json({}));\n    }), rest.get(`${MOCK_REPO_ORIGIN}${ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE(':id')}`, async (req, res, ctx) => {\n      const response: ResearchProject = {\n        id: '1981321',\n        accessRequirementId: req.params.id.toString(),\n        institution: 'Black Mesa Research Facility',\n        projectLead: 'Gordon Freeman',\n        intendedDataUseStatement: 'We plan to use this data to investigate the properties of antimatter. Our findings will be published in' + ' a peer-reviewed journal, and derivative data will be shared on Synapse.'\n      };\n      return res(ctx.status(200), ctx.json(response));\n    }), rest.get(`${MOCK_REPO_ORIGIN}${ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE(':id')}`, async (req, res, ctx) => {\n      const response: RequestInterface = {\n        accessRequirementId: req.params.id,\n        concreteType: 'org.sagebionetworks.repo.model.dataaccess.Request'\n      };\n      return res(ctx.status(200), ctx.json(response));\n    }), rest.post(`${MOCK_REPO_ORIGIN}${DATA_ACCESS_REQUEST}`, async (req, res, ctx) => {\n      return res(ctx.status(201), ctx.json({\n        id: '61561981',\n        etag: '0000'\n      }));\n    }), rest.post(`${MOCK_REPO_ORIGIN}${DATA_ACCESS_REQUEST_SUBMISSION(':id')}`, async (req, res, ctx) => {\n      return res(ctx.status(201), ctx.json({}));\n    }), rest.post(`${MOCK_REPO_ORIGIN}${FILE_HANDLE_BATCH}`, async (req, res, ctx) => {\n      const response: BatchFileResult = {\n        requestedFiles: [{\n          fileHandleId: mockFileHandle.id,\n          fileHandle: mockFileHandle\n        }]\n      };\n      return res(ctx.status(201), ctx.json(response));\n    })]\n  }\n};\nHasUnmetRequirements.args = {\n  entityId: mockFileEntity.id,\n  renderAsModal: true\n};\nNoRequirements.parameters = {\n  ...NoRequirements.parameters,\n  docs: {\n    ...NoRequirements.parameters?.docs,\n    source: {\n      originalSource: \"args => <SynapseContextConsumer>\\n    {context => <SynapseContextProvider synapseContext={{\\n    ...context,\\n    accessToken: args.isAuthenticated ? context.accessToken || 'fake token' : undefined\\n  }}>\\n        <p>\\n          First, use the StackChanger component to switch to the Mocked Data\\n          stack\\n        </p>\\n\\n        <AccessRequirementList {...args} />\\n      </SynapseContextProvider>}\\n  </SynapseContextConsumer>\",\n      ...NoRequirements.parameters?.docs?.source\n    }\n  }\n};\nHasMetRequirements.parameters = {\n  ...HasMetRequirements.parameters,\n  docs: {\n    ...HasMetRequirements.parameters?.docs,\n    source: {\n      originalSource: \"args => <SynapseContextConsumer>\\n    {context => <SynapseContextProvider synapseContext={{\\n    ...context,\\n    accessToken: args.isAuthenticated ? context.accessToken || 'fake token' : undefined\\n  }}>\\n        <p>\\n          First, use the StackChanger component to switch to the Mocked Data\\n          stack\\n        </p>\\n\\n        <AccessRequirementList {...args} />\\n      </SynapseContextProvider>}\\n  </SynapseContextConsumer>\",\n      ...HasMetRequirements.parameters?.docs?.source\n    }\n  }\n};\nHasUnmetRequirements.parameters = {\n  ...HasUnmetRequirements.parameters,\n  docs: {\n    ...HasUnmetRequirements.parameters?.docs,\n    source: {\n      originalSource: \"args => <SynapseContextConsumer>\\n    {context => <SynapseContextProvider synapseContext={{\\n    ...context,\\n    accessToken: args.isAuthenticated ? context.accessToken || 'fake token' : undefined\\n  }}>\\n        <p>\\n          First, use the StackChanger component to switch to the Mocked Data\\n          stack\\n        </p>\\n\\n        <AccessRequirementList {...args} />\\n      </SynapseContextProvider>}\\n  </SynapseContextConsumer>\",\n      ...HasUnmetRequirements.parameters?.docs?.source\n    }\n  }\n};"],"names":["AccessRequirementList_stories","AccessRequirementList","Template","args","jsx","SynapseContextConsumer","context","jsxs","SynapseContextProvider","getAccessRequirementHandlers","accessRequirements","rest","MOCK_REPO_ORIGIN","ENTITY_ACCESS_REQUIREMENTS","req","res","ctx","status","response","ar","ACCESS_REQUIREMENT_STATUS","matchingArAndStatus","NoRequirements","getHandlers","mockFileEntity","HasMetRequirements","mockManagedACTAccessRequirement","SubmissionState","HasUnmetRequirements","mockSelfSignAccessRequirement","ACCESS_APPROVAL","MOCK_USER_ID","ApprovalState","RESEARCH_PROJECT","ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE","ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE","DATA_ACCESS_REQUEST","DATA_ACCESS_REQUEST_SUBMISSION","FILE_HANDLE_BATCH","mockFileHandle","_a","_c","_b"],"mappings":"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"}