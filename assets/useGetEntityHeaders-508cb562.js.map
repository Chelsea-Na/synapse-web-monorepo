{"version":3,"file":"useGetEntityHeaders-508cb562.js","sources":["../../src/lib/utils/hooks/SynapseAPI/entity/useGetEntityHeaders.ts"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  EntityHeader,\n  PaginatedResults,\n  ReferenceList,\n} from '../../../synapseTypes'\n\nexport function useGetEntityHeaders(\n  references: ReferenceList,\n  options?: UseQueryOptions<PaginatedResults<EntityHeader>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<PaginatedResults<EntityHeader>, SynapseClientError>(\n    keyFactory.getEntityHeadersQueryKey(references),\n    () => SynapseClient.getEntityHeaders(references, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityHeader(\n  entityId: string,\n  options?: UseQueryOptions<EntityHeader, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<EntityHeader, SynapseClientError>(\n    keyFactory.getEntityHeaderQueryKey(entityId),\n    () => SynapseClient.getEntityHeader(entityId, accessToken),\n    options,\n  )\n}\n"],"names":["useGetEntityHeaders","references","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient.getEntityHeaders","useGetEntityHeader","entityId","SynapseClient.getEntityHeader"],"mappings":"0KAUgB,SAAAA,EACdC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,yBAAyBH,CAAU,EAC9C,IAAMM,EAA+BN,EAAYE,CAAW,EAC5DD,CAAA,CAEJ,CAEgB,SAAAM,EACdC,EACAP,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,wBAAwBK,CAAQ,EAC3C,IAAMC,EAA8BD,EAAUN,CAAW,EACzDD,CAAA,CAEJ"}