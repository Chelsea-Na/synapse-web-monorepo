{"version":3,"file":"entityHandlers-608dd510.js","sources":["../../src/mocks/msw/handlers/entityHandlers.ts"],"sourcesContent":["import { rest } from 'msw'\nimport {\n  ENTITY,\n  ENTITY_BUNDLE_V2,\n  ENTITY_HEADERS,\n  ENTITY_ID,\n  ENTITY_ID_VERSION,\n  ENTITY_ID_VERSIONS,\n  ENTITY_JSON,\n  ENTITY_SCHEMA_BINDING,\n} from '../../../utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  Entity,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  PaginatedResults,\n  Reference,\n  VersionableEntity,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport mockEntities from '../../entity'\nimport { MOCK_INVALID_PROJECT_NAME } from '../../entity/mockEntity'\nimport { mockSchemaBinding } from '../../mockSchema'\nimport { SynapseApiResponse } from '../handlers'\nimport { UploadDestination, UploadType } from '@sage-bionetworks/synapse-types'\n\nexport const getEntityHandlers = (backendOrigin: string) => [\n  /**\n   * Create a new entity\n   */\n  rest.post(`${backendOrigin}${ENTITY}`, async (req, res, ctx) => {\n    let status = 404\n    let response: SynapseApiResponse<Entity> = {\n      reason: `Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(\n        req.body,\n      )}`,\n    }\n    if (req.body) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const requestBody = req.body as Entity\n\n      const entityData = mockEntities.find(\n        entity => entity.name === requestBody.name,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      } else if (requestBody.name === MOCK_INVALID_PROJECT_NAME) {\n        response.reason = 'Invalid project name'\n        status = 403\n      }\n    }\n\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get entity by ID\n   */\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<Entity> = {\n        reason: `Mock Service worker could not find a mock entity with ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSIONS(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<VersionInfo>> = {\n        reason: `Mock Service worker could not find mock entity versions for ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData && entityData.versionInfo) {\n        response = { results: entityData.versionInfo }\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSION(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      const entityId = req.params.entityId\n      const versionNumber = req.params.versionNumber.toString()\n      const requestedVersionNumber = parseInt(versionNumber)\n\n      let response: SynapseApiResponse<VersionableEntity> = {\n        reason: `Mock Service worker could not find a mock versioned entity with ID ${entityId}.${versionNumber}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (\n        entityData &&\n        entityData.versions &&\n        entityData.versions[requestedVersionNumber]\n      ) {\n        response = entityData.versions[\n          requestedVersionNumber\n        ] as VersionableEntity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.bundle) {\n        response = entityData.bundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      const entityId = req.params.entityId\n      const versionNumber = parseInt(req.params.versionNumber as string)\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${entityId}`,\n      }\n      const entityData = mockEntities.find(entity => entity.id === entityId)\n      if (entityData) {\n        const bundle = entityData.bundle\n        if (entityData.versions && entityData.versions[versionNumber]) {\n          response = {\n            ...bundle,\n            entity: entityData.versions[versionNumber],\n          } as EntityBundle\n        } else {\n          response = bundle as EntityBundle\n        }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_SCHEMA_BINDING(':entityId')}`,\n    async (req, res, ctx) => {\n      return res(ctx.status(200), ctx.json(mockSchemaBinding))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_JSON(':entityId')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityJson> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.json) {\n        response = entityData.json\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_HEADERS}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<EntityHeader>> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n\n      const referenceList = req.body as { references: Reference[] }\n      const entityData = mockEntities\n        .filter(entity =>\n          referenceList.references.find(ref => ref.targetId === entity.id),\n        )\n        .map(entity => entity.entityHeader)\n        .filter((header): header is EntityHeader => !!header)\n\n      if (entityData) {\n        response = { results: entityData }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}/path`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityPath> = {\n        reason: `Mock Service worker could not find a mock entity path using ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(e => req.params.entityId === e.id)\n\n      if (entityData && entityData.path) {\n        response = entityData.path\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${getEndpoint(\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )}/file/v1/entity/:id/uploadDestination`,\n    async (req, res, ctx) => {\n      const response: UploadDestination = {\n        banner: '',\n        storageLocationId: 1,\n        uploadType: UploadType.S3,\n        concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n      }\n      return res(ctx.status(200), ctx.json(response))\n    },\n  ),\n]\n"],"names":["getEntityHandlers","backendOrigin","rest","ENTITY","req","res","ctx","status","response","requestBody","entityData","mockEntities","entity","MOCK_INVALID_PROJECT_NAME","ENTITY_ID","ENTITY_ID_VERSIONS","ENTITY_ID_VERSION","entityId","versionNumber","requestedVersionNumber","ENTITY_BUNDLE_V2","bundle","ENTITY_SCHEMA_BINDING","mockSchemaBinding","ENTITY_JSON","ENTITY_HEADERS","referenceList","ref","header","e","getEndpoint","BackendDestinationEnum","UploadType"],"mappings":"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"}