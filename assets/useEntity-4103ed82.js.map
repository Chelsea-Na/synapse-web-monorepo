{"version":3,"file":"useEntity-4103ed82.js","sources":["../../src/lib/utils/hooks/SynapseAPI/entity/useEntity.ts"],"sourcesContent":["/*\n * Hooks to access Entity Services in Synapse\n */\n\nimport { omit, pick } from 'lodash-es'\nimport { useEffect, useState } from 'react'\nimport {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { entityJsonKeys } from '../../../functions/EntityTypeUtils'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  Entity,\n  EntityJson,\n  EntityJsonValue,\n  EntityPath,\n  PaginatedResults,\n} from '../../../synapseTypes'\nimport { VersionInfo } from '../../../synapseTypes/VersionInfo'\nimport { entityQueryKeys, invalidateAllQueriesForEntity } from './queryKeys'\n\nexport function useGetEntity<T extends Entity>(\n  entityId: string,\n  versionNumber?: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    entityQueryKeys.version(entityId, versionNumber),\n    () =>\n      SynapseClient.getEntity<T>(\n        accessToken,\n        entityId,\n        versionNumber?.toString(),\n      ),\n    options,\n  )\n}\n\nexport function useUpdateEntity<T extends Entity>(\n  options?: UseMutationOptions<T, SynapseClientError, T>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<T, SynapseClientError, T>(\n    (entity: T) => SynapseClient.updateEntity<T>(entity, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedEntity, variables, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, updatedEntity.id!)\n        queryClient.setQueryData(\n          entityQueryKeys.entity(updatedEntity.id!),\n          updatedEntity,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedEntity, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteEntity(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (entityId: string) => SynapseClient.deleteEntity(accessToken, entityId),\n    {\n      ...options,\n      onSuccess: async (voidReturn, entityId, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, entityId)\n        if (options?.onSuccess) {\n          await options.onSuccess(voidReturn, entityId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetVersions(\n  entityId: string,\n  offset: number = 0,\n  limit: number = 200,\n  options?: UseQueryOptions<PaginatedResults<VersionInfo>, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    entityQueryKeys.versionsQuery(entityId, limit, offset),\n    () => SynapseClient.getEntityVersions(entityId, accessToken, offset, limit),\n    options,\n  )\n}\n\nexport function useGetVersionsInfinite(\n  entityId: string,\n  options: UseInfiniteQueryOptions<\n    PaginatedResults<VersionInfo>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 200\n  const { accessToken } = useSynapseContext()\n  return useInfiniteQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    entityQueryKeys.versions(entityId),\n    async (context: QueryFunctionContext<QueryKey, number>) => {\n      return await SynapseClient.getEntityVersions(\n        entityId,\n        accessToken,\n        context.pageParam,\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n\nexport function getStandardEntityFields(json: EntityJson): EntityJson {\n  return pick(json, entityJsonKeys[json.concreteType]) as EntityJson\n}\n\nexport function removeStandardEntityFields(\n  json: EntityJson,\n): Record<\n  string,\n  string | number | boolean | string[] | number[] | boolean[] | undefined\n> {\n  return omit(json, entityJsonKeys[json.concreteType])\n}\n\n/**\n * In addition to the standard objects returned by {@link useQuery}, this hook also returns the following objects:\n * - `entityMetadata`: the standard entity fields contained in the JSON response\n * - `annotations`: the annotations contained in the JSON response\n *\n * The union of these objects would be equal in value to the `data` object.\n */\nexport function useGetJson(\n  entityId: string,\n  options?: UseQueryOptions<EntityJson, SynapseClientError>,\n) {\n  const [entityMetadata, setEntityMetadata] = useState<EntityJson | undefined>()\n  const [annotations, setAnnotations] = useState<\n    Record<string, EntityJsonValue> | undefined\n  >()\n  const { accessToken } = useSynapseContext()\n  const query = useQuery<EntityJson, SynapseClientError>(\n    entityQueryKeys.json(entityId),\n    () => SynapseClient.getEntityJson(entityId, accessToken),\n    options,\n  )\n\n  // Separate the standard fields and annotations.\n  useEffect(() => {\n    if (query.data) {\n      setEntityMetadata(getStandardEntityFields(query.data))\n      setAnnotations(removeStandardEntityFields(query.data))\n    }\n  }, [query.data])\n\n  return {\n    ...query,\n    entityMetadata,\n    annotations,\n  }\n}\n\nexport function useUpdateViaJson(\n  options?: UseMutationOptions<EntityJson, SynapseClientError, EntityJson>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n  return useMutation<EntityJson, SynapseClientError, EntityJson>(\n    (json: EntityJson) => {\n      const entityId = json.id\n      return SynapseClient.updateEntityJson(entityId, json, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        const entityId = data.id\n\n        await invalidateAllQueriesForEntity(queryClient, entityId)\n        queryClient.setQueryData(entityQueryKeys.json(entityId), data)\n\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetEntityPath(\n  entityId: string,\n  options?: UseQueryOptions<EntityPath, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<EntityPath, SynapseClientError>(\n    entityQueryKeys.path(entityId),\n    () => SynapseClient.getEntityPath(entityId, accessToken),\n    options,\n  )\n}\n"],"names":["useGetEntity","entityId","versionNumber","options","accessToken","useSynapseContext","useQuery","entityQueryKeys","SynapseClient.getEntity","useUpdateEntity","queryClient","useQueryClient","useMutation","entity","SynapseClient.updateEntity","updatedEntity","variables","ctx","invalidateAllQueriesForEntity","useDeleteEntity","SynapseClient.deleteEntity","voidReturn","useGetVersionsInfinite","useInfiniteQuery","context","SynapseClient.getEntityVersions","lastPage","pages","getStandardEntityFields","json","pick","entityJsonKeys","removeStandardEntityFields","omit","useGetJson","entityMetadata","setEntityMetadata","useState","annotations","setAnnotations","query","SynapseClient.getEntityJson","useEffect","useUpdateViaJson","SynapseClient.updateEntityJson","data","useGetEntityPath","SynapseClient.getEntityPath"],"mappings":"4WA+BgB,SAAAA,EACdC,EACAC,EACAC,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAC,EACLC,EAAgB,QAAQN,EAAUC,CAAa,EAC/C,IACEM,EACEJ,EACAH,EACAC,GAAA,YAAAA,EAAe,UACjB,EACFC,CAAA,CAEJ,CAEO,SAASM,EACdN,EACA,CACA,MAAMO,EAAcC,IACd,CAAE,YAAAP,GAAgBC,IAEjB,OAAAO,EACJC,GAAcC,EAA8BD,EAAQT,CAAW,EAChE,CACE,GAAGD,EACH,UAAW,MAAOY,EAAeC,EAAWC,IAAQ,CAC5C,MAAAC,EAA8BR,EAAaK,EAAc,EAAG,EACtDL,EAAA,aACVH,EAAgB,OAAOQ,EAAc,EAAG,EACxCA,CAAA,EAGEZ,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUY,EAAeC,EAAWC,CAAG,CAEzD,CACF,CAAA,CAEJ,CAEO,SAASE,EACdhB,EACA,CACA,MAAMO,EAAcC,IACd,CAAE,YAAAP,GAAgBC,IAEjB,OAAAO,EACJX,GAAqBmB,EAA2BhB,EAAaH,CAAQ,EACtE,CACE,GAAGE,EACH,UAAW,MAAOkB,EAAYpB,EAAUgB,IAAQ,CACxC,MAAAC,EAA8BR,EAAaT,CAAQ,EACrDE,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUkB,EAAYpB,EAAUgB,CAAG,CAErD,CACF,CAAA,CAEJ,CAgBgB,SAAAK,EACdrB,EACAE,EAIA,CAEM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAkB,EACLhB,EAAgB,SAASN,CAAQ,EACjC,MAAOuB,GACE,MAAMC,EACXxB,EACAG,EACAoB,EAAQ,UACR,GAAA,EAGJ,CACE,GAAGrB,EACH,iBAAkB,CAACuB,EAAUC,IAAU,CACjC,GAAAD,EAAS,QAAQ,OAAS,EAAG,OAAOC,EAAM,OAAS,GAGzD,CACF,CAAA,CAEJ,CAEO,SAASC,EAAwBC,EAA8B,CACpE,OAAOC,EAAKD,EAAME,EAAeF,EAAK,YAAY,CAAC,CACrD,CAEO,SAASG,EACdH,EAIA,CACA,OAAOI,EAAKJ,EAAME,EAAeF,EAAK,YAAY,CAAC,CACrD,CASgB,SAAAK,EACdjC,EACAE,EACA,CACA,KAAM,CAACgC,EAAgBC,CAAiB,EAAIC,EAAiC,SAAA,EACvE,CAACC,EAAaC,CAAc,EAAIF,EAEpC,SAAA,EACI,CAAE,YAAAjC,GAAgBC,IAClBmC,EAAQlC,EACZC,EAAgB,KAAKN,CAAQ,EAC7B,IAAMwC,EAA4BxC,EAAUG,CAAW,EACvDD,CAAA,EAIFuC,OAAAA,EAAAA,UAAU,IAAM,CACVF,EAAM,OACUJ,EAAAR,EAAwBY,EAAM,IAAI,CAAC,EACtCD,EAAAP,EAA2BQ,EAAM,IAAI,CAAC,EACvD,EACC,CAACA,EAAM,IAAI,CAAC,EAER,CACL,GAAGA,EACH,eAAAL,EACA,YAAAG,CAAA,CAEJ,CAEO,SAASK,EACdxC,EACA,CACA,MAAMO,EAAcC,IACd,CAAE,YAAAP,GAAgBC,IACjB,OAAAO,EACJiB,GAAqB,CACpB,MAAM5B,EAAW4B,EAAK,GACtB,OAAOe,EAA+B3C,EAAU4B,EAAMzB,CAAW,CACnE,EACA,CACE,GAAGD,EACH,UAAW,MAAO0C,EAAM7B,EAAWC,IAAQ,CACzC,MAAMhB,EAAW4C,EAAK,GAEhB,MAAA3B,EAA8BR,EAAaT,CAAQ,EACzDS,EAAY,aAAaH,EAAgB,KAAKN,CAAQ,EAAG4C,CAAI,EAEzD1C,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAU0C,EAAM7B,EAAWC,CAAG,CAEhD,CACF,CAAA,CAEJ,CAEgB,SAAA6B,EACd7C,EACAE,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAC,EACLC,EAAgB,KAAKN,CAAQ,EAC7B,IAAM8C,EAA4B9C,EAAUG,CAAW,EACvDD,CAAA,CAEJ"}