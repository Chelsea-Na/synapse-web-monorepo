import{j as a}from"./jsx-runtime-095bf462.js";import{S,a as E,m as I,ak as O,al as C}from"./SynapseClient-191a5ad3.js";import{h as T,g,f,i as P,j as k}from"./wikiHandlers-dc7cc31f.js";import{M as t}from"./getEndpoint-ac94413e.js";import{l as p}from"./index-99018656.js";import{M as n}from"./mock_user_profile-309e3e96.js";import{g as _}from"./accessRequirementHandlers-6efc695a.js";import{a as q}from"./userProfileHandlers-97e41acb.js";import{U as M}from"./SynapseTableCell-0e41c889.js";import"./index-8db94870.js";import"./_commonjsHelpers-042e6b4d.js";import"./SynapseConstants-163777d5.js";import"./OrientationBanner-caa14b37.js";import"./FullWidthAlert-f28d1efb.js";import"./AlertTitle-ce329963.js";import"./styled-81e3612a.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-4abd396b.js";import"./createSvgIcon-efa5fd2e.js";import"./Paper-057dfac2.js";import"./IconButton-2a435ef1.js";import"./ButtonBase-84be17da.js";import"./emotion-react.browser.esm-f993d2c2.js";import"./assertThisInitialized-081f9914.js";import"./inheritsLoose-c82a83d4.js";import"./TransitionGroupContext-aa95d3cf.js";import"./useForkRef-f2aa3d66.js";import"./useIsFocusVisible-bbf13f29.js";import"./Typography-214fd772.js";import"./extendSxProp-3a6755c2.js";import"./Stack-db426a61.js";import"./Box-f664662a.js";import"./useTheme-533dafd0.js";import"./Grow-080f23da.js";import"./isHostComponent-fa76b8d9.js";import"./index-8ce4a492.js";import"./utils-b7dab64f.js";import"./ClickAwayListener-e5c35437.js";import"./Tooltip-f72372f7.js";import"./Button-f56bbd3a.js";import"./Link-342b97d1.js";import"./_getTag-ed9314eb.js";import"./isArray-5e3f9107.js";import"./StringUtils-2ea3ab4d.js";import"./dayjs.min-47c8dffe.js";import"./index-58d3fd43.js";import"./tiny-invariant-dd7d57d2.js";import"./InfoTwoTone-444cba43.js";import"./CheckCircleTwoTone-b7fa358f.js";import"./inputBaseClasses-a1108cc7.js";import"./Fade-275e12f9.js";import"./mockProject-75fabad7.js";import"./times-9fe7fdfe.js";import"./_baseTimes-8715be3e.js";import"./identity-46f208ab.js";import"./isSymbol-7c514724.js";import"./mockWiki-fd385b1f.js";import"./mock_file_handle-04753af7.js";import"./util-69f8ea98.js";import"./index-bef4e47c.js";import"./mockFileEntity-9366d9d2.js";import"./DateFormatter-d8ecf4b9.js";import"./timezone-fd382bd1.js";import"./IconSvg-3ab5d71e.js";import"./ErrorOutlined-3a36acde.js";import"./GetAppTwoTone-dc274b61.js";import"./InfoOutlined-f00f0485.js";import"./SynapseTableConstants-5f56c39f.js";import"./UserBadge-9123d7eb.js";import"./Popover-9882c907.js";import"./Modal-7f464547.js";import"./Backdrop-da57ccbb.js";import"./getScrollbarSize-ac846fe6.js";import"./ownerWindow-2c76219e.js";import"./createChainedFunction-0bab83cf.js";import"./cloneDeep-105239c7.js";import"./_baseClone-085aef97.js";import"./_Uint8Array-e7bacca1.js";import"./SkeletonTable-c29b0ab8.js";import"./Skeleton-fabf6a47.js";import"./ToastMessage-84db75ac.js";import"./CSSTransition-df176ab9.js";import"./hasClass-ec9efd32.js";import"./uniqueId-4d05949d.js";import"./toString-cc90cb98.js";import"./Avatar-58bc65b9.js";import"./EntityLink-021955d5.js";import"./useEntity-66c742c4.js";import"./useMutation-d4578919.js";import"./useInfiniteQuery-d4056584.js";import"./isEqual-8bc63716.js";import"./_baseIsEqual-e9b27ebd.js";import"./_cacheHas-5e0daad4.js";import"./_setToArray-3d6ec6fd.js";import"./pick-39707cbf.js";import"./hasIn-41dc455b.js";import"./_baseSlice-cf92e063.js";import"./isPlainObject-d90d8e80.js";import"./_overRest-b2592a9d.js";import"./useGetEntityHeaders-f40d0574.js";import"./EntityIcon-ec5fe8d7.js";import"./ErrorChip-c580c36c.js";import"./Chip-55e35231.js";import"./index-95cfb7c2.js";import"./SqlFunctions-6b7719cb.js";import"./RegularExpressions-bc0adf55.js";import"./UserSearchBoxV2-09041b9e.js";import"./Select-ce3716e1.esm-e13eeb0e.js";import"./isNativeReflectConstruct-e378569d.js";import"./use-deep-compare-effect.esm-7a830988.js";import"./uniq-bf9c0936.js";import"./_isIterateeCall-b1fb139d.js";import"./without-e3e43d4b.js";import"./_baseRest-de9add13.js";import"./isArrayLikeObject-0ce381ff.js";import"./UserOrTeamBadge-c74b463d.js";import"./index-c7cdc5d9.js";import"./Icon-7939b23e.js";import"./ShowMore-7427d245.js";import"./WideButton-f5ff1032.js";import"./LoadingScreen-cb516f2c.js";import"./LinearProgress-1c20d32b.js";import"./useTeamMembers-411f9e52.js";import"./pluralize-9608a438.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./index.modern-bdabb7b6.js";import"./mapValues-12c386f6.js";import"./isPlainObject-a5fcaf03.js";import"./now-f5aa7fbf.js";import"./ObservationCard-87a91199.js";import"./ThemesPlot-f073ff41.js";import"./ElementWithTooltip-76da2d2c.js";import"./Dropdown-9065070f.js";import"./ThemeProvider-c7f6a893.js";import"./createWithBsPrefix-2f20c945.js";import"./factory-275e83af.js";import"./sortBy-85b5591b.js";import"./_getMatchData-a65e887f.js";import"./_baseFor-d254fa1e.js";import"./merge-d08ebbe6.js";import"./isNil-8cd2dcce.js";import"./useGetQueryResultBundle-9e1faf9d.js";import"./NoSearchResults-460db635.js";import"./NoData-59ea70fa.js";import"./queryUtils-dd696fc3.js";import"./LastLoginInfo-c0118a2c.js";import"./jsx-runtime_commonjs-proxy-009efe56.js";import"./isMuiElement-3ce2dffc.js";import"./Dialog-45aedd2e.js";import"./DialogTitle-2fa44c8a.js";import"./DialogContent-bffd2073.js";import"./TextField-725b9717.js";import"./InputLabel-f64f330c.js";import"./Select-0707145f.js";import"./index-953d39fd.js";import"./MenuList-4eebd937.js";import"./List-471c9f54.js";import"./tslib.es6-9c2726d7.js";import"./lodash-e374147d.js";import"./useAccessRequirements-208a57a5.js";import"./useMediaQuery-5b0b7435.js";import"./StandaloneLoginForm-dcfa4ca4.js";import"./LoginFlowBackButton-4ac3ed7e.js";import"./TextField-880ee14c.js";import"./StyledFormControl-89b5d526.js";import"./LoginMethodButton-44174da2.js";import"./Grid-c165ab61.js";import"./useDataAccessSubmission-31e9aeef.js";import"./RadioGroup-6efe1997.js";import"./Form-326662a3.js";import"./Col-4cd1c8e1.js";import"./FileUpload-b929a3fd.js";import"./Divider-75ccc940.js";import"./dividerClasses-c5a0e547.js";import"./AuthenticatedRequirement-b440a90e.js";import"./RequirementItem-d2920b75.js";import"./ConditionalWrapper-51b8d1ed.js";import"./CheckTwoTone-e386d66f.js";import"./CertificationRequirement-3ad443a1.js";import"./ValidationRequirement-c2cd1588.js";import"./TwoFactorAuthEnabledRequirement-6f354a49.js";import"./TwoFactorEnrollmentForm-6d436ba1.js";import"./LeftRightPanel-8322344c.js";import"./ActionRequiredCard-cde40314.js";import"./RequestDownloadCard-11baa1ee.js";import"./Tabs-683e25b7.js";import"./QueryCount-27269e3e.js";import"./SkeletonButton-0864bc76.js";import"./EnumFacetFilterUI-f8326837.js";import"./RangeSlider-11deac51.js";import"./react-sizeme-5bfc490a.js";import"./ColorGradient-3d3e1969.js";import"./colorPalette-c43701fe.js";import"./SelectionCriteriaPill-7a432eb2.js";import"./useDownloadList-0f49be80.js";import"./UpsetPlot-0c7d5c5f.js";import"./lz-string-7f3f82fd.js";import"./LargeButton-c0625306.js";import"./SynapseVideo-5d8c4477.js";import"./IconList-3112133b.js";import"./UserCardList-419b1894.js";import"./Box-c578a046.js";const lo={title:"Governance/Data Access Request Flow/Requirements/UnmanagedACTAccessRequirementItem",component:M,argTypes:{isAuthenticated:{control:{type:"boolean"},defaultValue:!0}},decorators:[(o,e)=>a(S,{children:r=>a(E,{synapseContext:{...r,accessToken:e.isAuthenticated?r.accessToken??"fake token":void 0},children:a(o,{})})})]},s={args:{accessRequirement:T},parameters:{msw:{handlers:[..._(t),...g(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:f.id,submitterId:n.toString(),accessorId:n.toString(),state:C.APPROVED};return e(r.status(201),r.json(i))})]}}},m={args:{accessRequirement:P},parameters:{msw:{handlers:[..._(t),...g(t),q(t,!1,!1),p.rest.get(`${t}${I(":id")}`,async(o,e,r)=>{const i={accessRequirementId:o.params.id,concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!1};return e(r.status(200),r.json(i))}),p.rest.post(`${t}${O}`,async(o,e,r)=>{const i={requirementId:k.id,submitterId:n.toString(),accessorId:n.toString(),state:C.APPROVED};return e(r.status(201),r.json(i))})]}}};var c,d,u;s.parameters={...s.parameters,docs:{...(c=s.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirement
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirement.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(u=(d=s.parameters)==null?void 0:d.docs)==null?void 0:u.source}}};var R,A,l;m.parameters={...m.parameters,docs:{...(R=m.parameters)==null?void 0:R.docs,source:{originalSource:`{
  args: {
    accessRequirement: mockACTAccessRequirementWithWiki
  },
  parameters: {
    msw: {
      handlers: [
      // ...getHandlers(MOCK_REPO_ORIGIN),
      ...getAccessRequirementHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN), getCurrentUserCertifiedValidatedHandler(MOCK_REPO_ORIGIN, false, false), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_STATUS(':id')}\`, async (req, res, ctx) => {
        const response: AccessRequirementStatus = {
          accessRequirementId: (req.params.id as string),
          concreteType: 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',
          isApproved: false
        };
        return res(ctx.status(200), ctx.json(response));
      }), rest.post(\`\${MOCK_REPO_ORIGIN}\${ACCESS_APPROVAL}\`, async (req, res, ctx) => {
        const response: AccessApproval = {
          requirementId: mockToUAccessRequirementWithWiki.id,
          submitterId: MOCK_USER_ID.toString(),
          accessorId: MOCK_USER_ID.toString(),
          state: ApprovalState.APPROVED
        };
        return res(ctx.status(201), ctx.json(response));
      })]
    }
  }
}`,...(l=(A=m.parameters)==null?void 0:A.docs)==null?void 0:l.source}}};const Io=["LegacyACTAccessRequirement","LegacyACTAccessRequirementWithWiki"];export{s as LegacyACTAccessRequirement,m as LegacyACTAccessRequirementWithWiki,Io as __namedExportsOrder,lo as default};
//# sourceMappingURL=UnmanagedACTAccessRequirementItem.stories-d971c833.js.map
