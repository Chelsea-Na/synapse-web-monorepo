{"version":3,"file":"JSONArrayEditorModal-1f915aad.js","sources":["../../src/components/JSONArrayEditor/JSONArrayEditor.tsx","../../src/components/JSONArrayEditor/JSONArrayEditorModal.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport RJSFForm from '@rjsf/core'\nimport Form from '@rjsf/mui'\nimport validator from '@rjsf/validator-ajv8'\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema'\nimport ArrayFieldDescriptionTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldDescriptionTemplate'\nimport ArrayFieldItemTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldItemTemplate'\nimport ArrayFieldTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldTemplate'\nimport ArrayFieldTitleTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldTitleTemplate'\nimport ButtonTemplate from '../SchemaDrivenAnnotationEditor/template/ButtonTemplate'\nimport {\n  Alert,\n  AlertTitle,\n  Box,\n  Button,\n  Collapse,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { parse, ParseError } from 'papaparse'\nimport { RJSFSchema } from '@rjsf/utils'\nimport TextWidget from '../SchemaDrivenAnnotationEditor/widget/TextWidget'\nimport { DateTimeWidget } from '../SchemaDrivenAnnotationEditor/widget/DateTimeWidget'\nimport { SelectWidget } from '../SchemaDrivenAnnotationEditor/widget/SelectWidget'\nimport { BooleanWidget } from '../SchemaDrivenAnnotationEditor/widget/BooleanWidget'\nimport { getTransformErrors } from '../SchemaDrivenAnnotationEditor/AnnotationEditorUtils'\nimport ErrorListTemplate from '../SchemaDrivenAnnotationEditor/template/ErrorListTemplate'\n\nexport type JSONArrayEditorProps = {\n  value?: string[]\n  arrayItemDefinition?: JSONSchema7Definition\n  onChange: (newValue: string[]) => void\n  onSubmit: (formData: string[]) => void\n}\n\nfunction getSchema(\n  definition: JSONSchema7Definition = { type: 'string' },\n): JSONSchema7 {\n  return {\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    type: 'array',\n    items: definition,\n  }\n}\n\nconst JSONArrayEditor = React.forwardRef(function JSONArrayEditor(\n  props: JSONArrayEditorProps,\n  ref: React.Ref<RJSFForm<any, RJSFSchema, any>>,\n) {\n  const { value = [], onChange, onSubmit, arrayItemDefinition } = props\n  const [showPasteNewValuesForm, setShowPasteNewValuesForm] = useState(false)\n  const [pastedValues, setPastedValues] = useState('')\n  const [parseErrors, setParseErrors] = useState<ParseError[]>([])\n  const addPastedValuesToArray = useCallback(() => {\n    if (pastedValues) {\n      parse<string[]>(pastedValues, {\n        complete: result => {\n          if (result.errors.length > 0) {\n            setParseErrors(result.errors)\n          } else {\n            onChange([...value, ...result.data[0]])\n            setParseErrors([])\n            setPastedValues('')\n            setShowPasteNewValuesForm(false)\n          }\n        },\n      })\n    } else {\n      setParseErrors([])\n      setPastedValues('')\n      setShowPasteNewValuesForm(false)\n    }\n  }, [onChange, pastedValues, value])\n\n  const schema = useMemo(\n    () => getSchema(arrayItemDefinition),\n    [arrayItemDefinition],\n  )\n\n  const transformErrors = useMemo(() => {\n    return getTransformErrors()\n  }, [])\n\n  return (\n    <Box\n      className=\"JsonSchemaFormContainer\"\n      sx={{\n        // Hide the label/button to show more info\n        '.JsonSchemaForm .LabelContainer': {\n          display: 'none',\n          visibility: 'hidden',\n        },\n      }}\n    >\n      <Form\n        ref={ref}\n        schema={schema}\n        className=\"JsonSchemaForm\"\n        noHtml5Validate\n        uiSchema={{\n          'ui:submitButtonOptions': {\n            norender: true,\n          },\n        }}\n        validator={validator}\n        formData={value}\n        formContext={{\n          allowRemovingLastItemInArray: true,\n        }}\n        onChange={({ formData }) => onChange(formData)}\n        onSubmit={({ formData }) => onSubmit(formData)}\n        templates={{\n          ArrayFieldDescriptionTemplate: ArrayFieldDescriptionTemplate,\n          ArrayFieldItemTemplate: ArrayFieldItemTemplate,\n          ArrayFieldTemplate: ArrayFieldTemplate,\n          ArrayFieldTitleTemplate: ArrayFieldTitleTemplate,\n          ButtonTemplates: ButtonTemplate,\n          ErrorListTemplate: ErrorListTemplate,\n        }}\n        transformErrors={transformErrors}\n        widgets={{\n          TextWidget: TextWidget,\n          DateTimeWidget: DateTimeWidget,\n          SelectWidget: SelectWidget,\n          CheckboxWidget: BooleanWidget,\n        }}\n      />\n      <Button onClick={() => setShowPasteNewValuesForm(true)}>\n        Paste new values\n      </Button>\n      <Collapse sx={{ mt: 2 }} in={showPasteNewValuesForm}>\n        <TextField\n          multiline\n          InputProps={{ inputProps: { 'aria-label': 'CSV or TSV to Append' } }}\n          rows={5}\n          placeholder={'Place comma or tab delimited values here'}\n          value={pastedValues}\n          onChange={e => setPastedValues(e.target.value)}\n        />\n        <Box my={1} display={'flex'} justifyContent={'flex-end'}>\n          <Button onClick={() => setShowPasteNewValuesForm(false)}>\n            Cancel\n          </Button>\n          <Button onClick={addPastedValuesToArray}>Add</Button>\n        </Box>\n        {parseErrors && parseErrors.length > 0 && (\n          <Alert severity={'error'} sx={{ my: 2 }}>\n            <AlertTitle>Parsing errors encountered:</AlertTitle>\n            <ul>\n              {parseErrors.map((error, index) => {\n                return (\n                  <Typography\n                    component={'li'}\n                    lineHeight={1.5}\n                    key={index}\n                    variant={'smallText1'}\n                  >\n                    {error.row ? `At ${error.row}: ` : ''}\n                    {error.message}\n                  </Typography>\n                )\n              })}\n            </ul>\n          </Alert>\n        )}\n      </Collapse>\n    </Box>\n  )\n})\n\nexport default JSONArrayEditor\n","import React, { useEffect, useRef, useState } from 'react'\nimport {\n  ConfirmationDialog,\n  ConfirmationDialogProps,\n} from '../ConfirmationDialog'\nimport JSONArrayEditor, { JSONArrayEditorProps } from './JSONArrayEditor'\nimport type RJSFForm from '@rjsf/core'\nimport { RJSFSchema } from '@rjsf/utils'\n\nexport type JSONArrayEditorModalProps = Pick<\n  JSONArrayEditorProps,\n  'arrayItemDefinition' | 'value'\n> & {\n  dialogTitle?: ConfirmationDialogProps['title']\n  isShowingModal: boolean\n  onConfirm: (value: string[]) => void\n  onCancel: () => void\n}\n\nfunction JSONArrayEditorModal(props: JSONArrayEditorModalProps) {\n  const {\n    isShowingModal,\n    onConfirm,\n    onCancel,\n    dialogTitle = 'Edit Values',\n    value,\n    ...editorProps\n  } = props\n  const formRef = useRef<RJSFForm<any, RJSFSchema, any>>(null)\n  const [tempValue, setTempValue] = useState<string[]>(value ?? [])\n\n  useEffect(() => {\n    /* If the passed prop changes, reset local component state */\n    if (value) {\n      setTempValue(value)\n    }\n  }, [value])\n\n  return (\n    <ConfirmationDialog\n      open={isShowingModal}\n      title={dialogTitle}\n      confirmButtonText=\"OK\"\n      onCancel={onCancel}\n      maxWidth=\"md\"\n      content={\n        <JSONArrayEditor\n          ref={formRef}\n          value={tempValue}\n          onChange={newValue => setTempValue(newValue)}\n          onSubmit={onConfirm}\n          {...editorProps}\n        />\n      }\n      onConfirm={() => {\n        // Workaround for https://github.com/rjsf-team/react-jsonschema-form/issues/3121\n        formRef.current!.formElement.current.requestSubmit()\n      }}\n    ></ConfirmationDialog>\n  )\n}\n\nexport default JSONArrayEditorModal\n"],"names":["getSchema","definition","JSONArrayEditor","React","props","ref","value","onChange","onSubmit","arrayItemDefinition","showPasteNewValuesForm","setShowPasteNewValuesForm","useState","pastedValues","setPastedValues","parseErrors","setParseErrors","addPastedValuesToArray","useCallback","parse","result","schema","useMemo","transformErrors","getTransformErrors","jsxs","Box","jsx","Form","validator","formData","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","ArrayFieldTemplate","ArrayFieldTitleTemplate","ButtonTemplate","ErrorListTemplate","TextWidget","DateTimeWidget","SelectWidget","BooleanWidget","Button","Collapse","TextField","Alert","AlertTitle","error","index","Typography","JSONArrayEditorModal","isShowingModal","onConfirm","onCancel","dialogTitle","editorProps","formRef","useRef","tempValue","setTempValue","useEffect","ConfirmationDialog","newValue"],"mappings":"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"}