{"version":3,"file":"personalAccessTokenHandlers-a956d9a7.js","sources":["../../src/mocks/personalAccessToken/mockPersonalAccessToken.ts","../../src/mocks/msw/handlers/personalAccessTokenHandlers.ts"],"sourcesContent":["import { AccessTokenRecordList } from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\n\nexport const mockAccessTokenRecordListPageOne: AccessTokenRecordList = {\n  results: [\n    {\n      id: '98454651819681681685',\n      userId: String(MOCK_USER_ID),\n      scopes: ['view', 'download', 'modify'],\n      userInfoClaims: {},\n      name: 'Active token for the Python Client on my machine',\n      createdOn: '2023-09-20T15:49:36.680Z',\n      lastUsed: '2024-01-30T15:09:33.892Z',\n      state: 'ACTIVE',\n    },\n    {\n      id: '98454651819681681684',\n      userId: String(MOCK_USER_ID),\n      scopes: ['view', 'download'],\n      userInfoClaims: {},\n      name: 'Custom script token from a long time ago',\n      createdOn: '2020-11-30T20:13:07.916Z',\n      lastUsed: '2021-01-04T14:11:41.662Z',\n      state: 'EXPIRED',\n    },\n  ],\n  nextPageToken: 'next-page-token',\n}\n\nexport const mockAccessTokenRecordListPageTwo: AccessTokenRecordList = {\n  results: [\n    {\n      id: '98454651819681681683',\n      userId: String(MOCK_USER_ID),\n      scopes: ['view', 'download'],\n      userInfoClaims: {},\n      name: 'Token on page two',\n      createdOn: '2020-11-30T20:13:07.916Z',\n      lastUsed: '2021-01-04T14:11:41.662Z',\n      state: 'EXPIRED',\n    },\n  ],\n}\n","import { rest } from 'msw'\nimport {\n  mockAccessTokenRecordListPageOne,\n  mockAccessTokenRecordListPageTwo,\n} from '../../personalAccessToken/mockPersonalAccessToken'\nimport {\n  AccessTokenGenerationResponse,\n  AccessTokenRecordList,\n} from '@sage-bionetworks/synapse-types'\n\nexport function getPersonalAccessTokenHandlers(\n  backendOrigin: string,\n  tokenRecordOverride?: AccessTokenRecordList,\n) {\n  return [\n    rest.get(\n      `${backendOrigin}/auth/v1/personalAccessToken`,\n      async (req, res, ctx) => {\n        let response = mockAccessTokenRecordListPageOne\n        if (tokenRecordOverride) {\n          response = tokenRecordOverride\n        } else if (req.url.searchParams.get('nextPageToken')) {\n          response = mockAccessTokenRecordListPageTwo\n        }\n\n        return res(ctx.status(200), ctx.json(response))\n      },\n    ),\n    rest.delete(\n      `${backendOrigin}/auth/v1/personalAccessToken/:id`,\n      async (req, res, ctx) => {\n        return res(ctx.status(202))\n      },\n    ),\n\n    rest.post(\n      `${backendOrigin}/auth/v1/personalAccessToken`,\n      async (req, res, ctx) => {\n        const responseBody: AccessTokenGenerationResponse = {\n          token: 'your-token-here',\n        }\n        return res(ctx.status(201), ctx.json(responseBody))\n      },\n    ),\n  ]\n}\n"],"names":["mockAccessTokenRecordListPageOne","MOCK_USER_ID","mockAccessTokenRecordListPageTwo","getPersonalAccessTokenHandlers","backendOrigin","tokenRecordOverride","rest","req","res","ctx","response","responseBody"],"mappings":"4FAGO,MAAMA,EAA0D,CACrE,QAAS,CACP,CACE,GAAI,uBACJ,OAAQ,OAAOC,CAAY,EAC3B,OAAQ,CAAC,OAAQ,WAAY,QAAQ,EACrC,eAAgB,CAAC,EACjB,KAAM,mDACN,UAAW,2BACX,SAAU,2BACV,MAAO,QACT,EACA,CACE,GAAI,uBACJ,OAAQ,OAAOA,CAAY,EAC3B,OAAQ,CAAC,OAAQ,UAAU,EAC3B,eAAgB,CAAC,EACjB,KAAM,2CACN,UAAW,2BACX,SAAU,2BACV,MAAO,SACT,CACF,EACA,cAAe,iBACjB,EAEaC,EAA0D,CACrE,QAAS,CACP,CACE,GAAI,uBACJ,OAAQ,OAAOD,CAAY,EAC3B,OAAQ,CAAC,OAAQ,UAAU,EAC3B,eAAgB,CAAC,EACjB,KAAM,oBACN,UAAW,2BACX,SAAU,2BACV,MAAO,SACT,CACF,CACF,EChCgB,SAAAE,EACdC,EACAC,EACA,CACO,MAAA,CACLC,EAAAA,KAAK,IACH,GAAGF,CAAa,+BAChB,MAAOG,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAWV,EACf,OAAIK,EACSK,EAAAL,EACFE,EAAI,IAAI,aAAa,IAAI,eAAe,IACtCG,EAAAR,GAGNM,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKC,CAAQ,CAAC,CAChD,CACF,EACAJ,EAAAA,KAAK,OACH,GAAGF,CAAa,mCAChB,MAAOG,EAAKC,EAAKC,IACRD,EAAIC,EAAI,OAAO,GAAG,CAAC,CAE9B,EAEAH,EAAAA,KAAK,KACH,GAAGF,CAAa,+BAChB,MAAOG,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAA8C,CAClD,MAAO,iBAAA,EAEF,OAAAH,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAY,CAAC,CACpD,CACF,CAAA,CAEJ"}