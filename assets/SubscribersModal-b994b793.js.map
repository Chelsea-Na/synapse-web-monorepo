{"version":3,"file":"SubscribersModal-b994b793.js","sources":["../../src/lib/utils/hooks/SynapseAPI/forum/useForum.ts","../../src/lib/utils/synapseTypes/Subscription.ts","../../src/lib/utils/hooks/SynapseAPI/subscription/useSubscription.ts","../../src/lib/containers/discussion_forum/SubscribersModal.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { PaginatedResults } from '../../../synapseTypes'\nimport {\n  DiscussionFilter,\n  DiscussionThreadBundle,\n  DiscussionThreadOrder,\n} from '../../../synapseTypes/DiscussionBundle'\nimport { PaginatedIds } from '../../../synapseTypes/PaginatedIds'\n\nexport function useGetModerators(\n  forumId: string,\n  options?: UseQueryOptions<PaginatedIds, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<PaginatedIds, SynapseClientError>(\n    ['moderators', forumId],\n    () => SynapseClient.getModerators(accessToken, forumId),\n    options,\n  )\n}\n\nexport function useGetForumInfinite(\n  forumId: string,\n  limit: number,\n  sort: DiscussionThreadOrder,\n  ascending: boolean,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >(\n    ['forumthread', forumId, 'infinite', limit, filter, sort, ascending],\n    async context => {\n      return SynapseClient.getForumThread(\n        accessToken,\n        forumId,\n        context.pageParam,\n        limit,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n","import { SortDirection } from './AccessApproval'\n\nexport interface Topic {\n  objectId: string\n  objectType: SubscriptionObjectType\n}\n\nexport enum SubscriptionObjectType {\n  FORUM = 'FORUM',\n  THREAD = 'THREAD',\n  DATA_ACCESS_SUBMISSION = 'DATA_ACCESS_SUBMISSION',\n  DATA_ACCESS_SUBMISSION_STATUS = 'DATA_ACCESS_SUBMISSION_STATUS',\n}\n\nexport interface Subscription {\n  subscriptionId: string\n  subscriberId: string\n  objectId: string\n  objectType: SubscriptionObjectType\n  createdOn: string\n}\n\nexport interface SubscriptionRequest {\n  objectType: SubscriptionObjectType\n  idList: string[]\n  sortByType: SortByType\n  sortDirection: SortDirection\n}\n\nexport enum SortByType {\n  SUBSCRIPTION_ID = 'SUBSCRIPTION_ID',\n  SUBSCRIBER_ID = 'SUBSCRIBER_ID',\n  OBJECT_ID = 'OBJECT_ID',\n  OBJECT_TYPE = 'OBJECT_TYPE',\n  CREATED_ON = 'CREATED_ON',\n}\n\nexport interface SubscriptionPagedResults {\n  results: Subscription[]\n  totalNumberOfResults: number\n}\n\nexport interface SubscriberPagedResults {\n  subscribers: string[]\n  nextPageToken: string\n}\n","import {\n  SubscriptionObjectType,\n  Subscription,\n  SortByType,\n  SubscriptionRequest,\n  Topic,\n  SubscriberPagedResults,\n} from '../../../synapseTypes/Subscription'\nimport {\n  useMutation,\n  useQuery,\n  UseMutationOptions,\n  UseQueryOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { Direction } from '../../../synapseTypes'\nimport { SynapseClient } from '../../..'\nimport { useCallback } from 'react'\n\nexport function useGetSubscribers(\n  topic: Topic,\n  options?: UseQueryOptions<SubscriberPagedResults, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  return useQuery<SubscriberPagedResults, SynapseClientError>(\n    ['subscriber', topic.objectId, topic.objectType],\n    () => SynapseClient.getSubscribers(accessToken, topic),\n    options,\n  )\n}\n\nexport function useGetSubscription(\n  objectId: string,\n  objectType: SubscriptionObjectType,\n  options?: UseQueryOptions<Subscription, SynapseClientError>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryFn = async () => {\n    const subscriptionRequest: SubscriptionRequest = {\n      objectType: objectType,\n      idList: [objectId],\n      sortByType: SortByType.OBJECT_ID,\n      sortDirection: Direction.ASC,\n    }\n    const subscriptionList = await SynapseClient.postSubscriptionList(\n      accessToken,\n      subscriptionRequest,\n    )\n    return subscriptionList.results[0]\n  }\n  return useQuery<Subscription, SynapseClientError>(\n    [accessToken, 'subscription', objectId, objectType],\n    queryFn,\n    options,\n  )\n}\n\nexport function usePostSubscription(\n  options?: UseMutationOptions<Subscription, SynapseClientError, Topic>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<Subscription, SynapseClientError, Topic>(\n    (topic: Topic) => SynapseClient.postSubscription(accessToken, topic),\n    {\n      ...options,\n      onSuccess: async (updatedSubscription, variables, ctx) => {\n        await queryClient.invalidateQueries([accessToken, 'subscription'])\n        await queryClient.invalidateQueries([\n          'subscriber',\n          variables.objectId,\n          variables.objectType,\n        ])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubscription, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteSubscription(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (subscriptionId: string) =>\n      SynapseClient.deleteSubscription(accessToken, subscriptionId),\n    {\n      ...options,\n      onSuccess: async (updatedSubscription, variables, ctx) => {\n        await queryClient.invalidateQueries([accessToken, 'subscription'])\n        await queryClient.invalidateQueries(['subscriber'])\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubscription, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport const useSubscription = (\n  objectId: string,\n  objectType: SubscriptionObjectType,\n) => {\n  const { data: subscription, isLoading: isLoadingGet } = useGetSubscription(\n    objectId,\n    objectType,\n  )\n  const { data: subscribers } = useGetSubscribers({ objectId, objectType })\n  const { mutate: postSubscription, isLoading: isLoadingPost } =\n    usePostSubscription()\n  const { mutate: deleteSubscription, isLoading: isLoadingDelete } =\n    useDeleteSubscription()\n\n  const isLoading: boolean = isLoadingGet || isLoadingPost || isLoadingDelete\n  const toggleSubscribed = useCallback(() => {\n    if (subscription) {\n      deleteSubscription(subscription.subscriptionId)\n    } else {\n      postSubscription({ objectId, objectType })\n    }\n  }, [deleteSubscription, objectId, objectType, postSubscription, subscription])\n\n  return { isLoading, subscription, toggleSubscribed, subscribers }\n}\n","import React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { useSubscription } from '../../utils/hooks/SynapseAPI/subscription/useSubscription'\nimport { SubscriptionObjectType } from '../../utils/synapseTypes/Subscription'\nimport { Button } from '@mui/material'\nimport UserCard from '../UserCard'\nimport { SMALL_USER_CARD } from '../../utils/SynapseConstants'\n\nexport type SubscribersModalProps = {\n  id: string\n  objectType: SubscriptionObjectType\n  showModal: boolean\n  handleModal: (a: boolean) => void\n}\n\nexport const SubscribersModal: React.FC<SubscribersModalProps> = ({\n  id,\n  objectType,\n  showModal,\n  handleModal,\n}) => {\n  const { subscribers } = useSubscription(id, objectType)\n\n  return (\n    <div className=\"SubscribersModal\">\n      {subscribers && subscribers.subscribers.length > 0 && (\n        <a\n          onClick={() => handleModal(true)}\n        >{`Followers (${subscribers.subscribers.length})`}</a>\n      )}\n      <Modal\n        className=\"bootstrap-4-backport\"\n        show={showModal}\n        onHide={() => handleModal(false)}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Followers</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {subscribers &&\n            subscribers.subscribers.map(user => (\n              <UserCard\n                key={user}\n                ownerId={user}\n                size={SMALL_USER_CARD}\n                showCardOnHover={true}\n              />\n            ))}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"contained\" onClick={() => handleModal(false)}>\n            Ok\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n"],"names":["useGetModerators","forumId","options","accessToken","useSynapseContext","useQuery","SynapseClient.getModerators","useGetForumInfinite","limit","sort","ascending","filter","useInfiniteQuery","context","SynapseClient.getForumThread","lastPage","pages","numberOfFetchedResults","page","SubscriptionObjectType","SortByType","useGetSubscribers","topic","SynapseClient.getSubscribers","useGetSubscription","objectId","objectType","subscriptionRequest","Direction","SynapseClient.postSubscriptionList","usePostSubscription","queryClient","useQueryClient","useMutation","SynapseClient.postSubscription","updatedSubscription","variables","ctx","useDeleteSubscription","subscriptionId","SynapseClient.deleteSubscription","useSubscription","subscription","isLoadingGet","subscribers","postSubscription","isLoadingPost","deleteSubscription","isLoadingDelete","isLoading","toggleSubscribed","useCallback","SubscribersModal","id","showModal","handleModal","jsxs","jsx","Modal","user","UserCard","SMALL_USER_CARD","Button"],"mappings":"kgBAiBgB,SAAAA,EACdC,EACAC,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAC,EACL,CAAC,aAAcJ,CAAO,EACtB,IAAMK,EAA4BH,EAAaF,CAAO,EACtDC,CAAA,CAEJ,CAEO,SAASK,EACdN,EACAO,EACAC,EACAC,EACAC,EACAT,EAIA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAQ,EAIL,CAAC,cAAeX,EAAS,WAAYO,EAAOG,EAAQF,EAAMC,CAAS,EACnE,MAAMG,GACGC,EACLX,EACAF,EACAY,EAAQ,UACRL,EACAC,EACAC,EACAC,CAAA,EAGJ,CACE,GAAGT,EACH,iBAAkB,CAACa,EAAUC,IAAU,CACrC,MAAMC,EAAyBD,EAAM,WAC3BE,EAAK,OACb,EAAA,OACE,GAAAH,EAAS,qBAAwBE,EAC5B,OAAAA,CAIX,CACF,CAAA,CAEJ,CChEY,IAAAE,GAAAA,IACVA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,uBAAyB,yBACzBA,EAAA,8BAAgC,gCAJtBA,IAAAA,GAAA,CAAA,CAAA,EAsBAC,GAAAA,IACVA,EAAA,gBAAkB,kBAClBA,EAAA,cAAgB,gBAChBA,EAAA,UAAY,YACZA,EAAA,YAAc,cACdA,EAAA,WAAa,aALHA,IAAAA,GAAA,CAAA,CAAA,ECRI,SAAAC,EACdC,EACApB,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IACjB,OAAAC,EACL,CAAC,aAAciB,EAAM,SAAUA,EAAM,UAAU,EAC/C,IAAMC,EAA6BpB,EAAamB,CAAK,EACrDpB,CAAA,CAEJ,CAEgB,SAAAsB,EACdC,EACAC,EACAxB,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBC,IAcjB,OAAAC,EACL,CAACF,EAAa,eAAgBsB,EAAUC,CAAU,EAdpC,SAAY,CAC1B,MAAMC,EAA2C,CAC/C,WAAAD,EACA,OAAQ,CAACD,CAAQ,EACjB,WAAYL,EAAW,UACvB,cAAeQ,EAAU,GAAA,EAMpB,OAJkB,MAAMC,EAC7B1B,EACAwB,CAAA,GAEsB,QAAQ,CAAC,CAAA,EAKjCzB,CAAA,CAEJ,CAEO,SAAS4B,EACd5B,EACA,CACA,MAAM6B,EAAcC,IACd,CAAE,YAAA7B,GAAgBC,IAEjB,OAAA6B,EACJX,GAAiBY,EAA+B/B,EAAamB,CAAK,EACnE,CACE,GAAGpB,EACH,UAAW,MAAOiC,EAAqBC,EAAWC,IAAQ,CACxD,MAAMN,EAAY,kBAAkB,CAAC5B,EAAa,cAAc,CAAC,EACjE,MAAM4B,EAAY,kBAAkB,CAClC,aACAK,EAAU,SACVA,EAAU,UAAA,CACX,EACGlC,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUiC,EAAqBC,EAAWC,CAAG,CAE/D,CACF,CAAA,CAEJ,CAEO,SAASC,EACdpC,EACA,CACA,MAAM6B,EAAcC,IACd,CAAE,YAAA7B,GAAgBC,IAEjB,OAAA6B,EACJM,GACCC,EAAiCrC,EAAaoC,CAAc,EAC9D,CACE,GAAGrC,EACH,UAAW,MAAOiC,EAAqBC,EAAWC,IAAQ,CACxD,MAAMN,EAAY,kBAAkB,CAAC5B,EAAa,cAAc,CAAC,EACjE,MAAM4B,EAAY,kBAAkB,CAAC,YAAY,CAAC,EAC9C7B,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUiC,EAAqBC,EAAWC,CAAG,CAE/D,CACF,CAAA,CAEJ,CAEa,MAAAI,EAAkB,CAC7BhB,EACAC,IACG,CACH,KAAM,CAAE,KAAMgB,EAAc,UAAWC,CAAiB,EAAAnB,EACtDC,EACAC,CAAA,EAEI,CAAE,KAAMkB,CAAY,EAAIvB,EAAkB,CAAE,SAAAI,EAAU,WAAAC,EAAY,EAClE,CAAE,OAAQmB,EAAkB,UAAWC,CAAA,EAC3ChB,IACI,CAAE,OAAQiB,EAAoB,UAAWC,CAAA,EAC7CV,IAEIW,EAAqBN,GAAgBG,GAAiBE,EACtDE,EAAmBC,EAAAA,YAAY,IAAM,CACrCT,EACFK,EAAmBL,EAAa,cAAc,EAE7BG,EAAA,CAAE,SAAApB,EAAU,WAAAC,CAAA,CAAY,CAC3C,EACC,CAACqB,EAAoBtB,EAAUC,EAAYmB,EAAkBH,CAAY,CAAC,EAE7E,MAAO,CAAE,UAAAO,EAAW,aAAAP,EAAc,iBAAAQ,EAAkB,YAAAN,CAAY,CAClE,ECnHOQ,EAAA,CAAA,CAA2D,GAAAC,EAChE,WAAA3B,EACA,UAAA4B,EACA,YAAAC,CAEF,IAAA,CACE,KAAA,CAAA,YAAAX,CAAA,EAAAH,EAAAY,EAAA3B,CAAA,EAEA,OAAA8B,EAAA,MAAA,CAAA,UAAA,mBAAA,SAAA,CAEKZ,GAAAA,EAAA,YAAA,OAAA,GAAAa,EACC,IAAC,CAAA,QAAA,IAAAF,EAAA,EAAA,EACgC,SAAA,cAAAX,EAAA,YAAA,SACO,CAAA,EAAUY,EAEpDE,EAAC,CAAA,UAAA,uBACW,KAAAJ,EACJ,OAAA,IAAAC,EAAA,EAAA,EACyB,UAAA,GACpB,SAAA,CAEXE,EAAAC,EAAA,OAAA,CAAA,YAAA,GAAA,SAAAD,EAAAC,EAAA,MAAA,CAAA,SAAA,WAAA,CAAA,CAAA,CAAA,EAEAD,EAAAC,EAAA,KAAA,CAAA,SAAAd,GAAAA,EAAA,YAAA,IAAAe,GAAAF,EAIMG,EAAC,CAAA,QAAAD,EAEU,KAAAE,EACH,gBAAA,EACW,EAAAF,CAHZ,CAAA,EAAA,EAMbF,EAAAC,EAAA,OAAA,CAAA,SAAAD,EAAAK,EAAA,CAAA,QAAA,YAAA,QAAA,IAAAP,EAAA,EAAA,EAAA,SAAA,IAAA,CAAA,EAAA,CAKA,CAAA,CAAA,CACF,CAAA,CAAA,CAGN"}