{"version":3,"file":"AccessTokenPage-07d8e88b.js","sources":["../../src/synapse-queries/user/usePersonalAccessToken.ts","../../src/components/AccessTokenPage/AccessTokenCard/AccessTokenCard.tsx","../../src/components/AccessTokenPage/CreateAccessTokenModal.tsx","../../src/components/AccessTokenPage/AccessTokenPage.tsx"],"sourcesContent":["import {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessTokenGenerationRequest,\n  AccessTokenGenerationResponse,\n  AccessTokenRecordList,\n} from '@sage-bionetworks/synapse-types'\n\nexport function useGetPersonalAccessTokensInfinite(\n  options?: UseInfiniteQueryOptions<AccessTokenRecordList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessTokenRecordList, SynapseClientError>(\n    keyFactory.getPersonalAccessTokensQueryKey(),\n    async (context: QueryFunctionContext<QueryKey, string | undefined>) => {\n      return await SynapseClient.getPersonalAccessTokenRecords(\n        accessToken,\n        context.pageParam,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useCreatePersonalAccessToken(\n  options?: UseMutationOptions<\n    AccessTokenGenerationResponse,\n    SynapseClientError,\n    AccessTokenGenerationRequest\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation<\n    AccessTokenGenerationResponse,\n    SynapseClientError,\n    AccessTokenGenerationRequest\n  >({\n    ...options,\n    onSuccess: async (...args) => {\n      if (options?.onSuccess) {\n        options.onSuccess(...args)\n      }\n      await queryClient.invalidateQueries(\n        keyFactory.getPersonalAccessTokensQueryKey(),\n      )\n    },\n    mutationFn: request =>\n      SynapseClient.createPersonalAccessToken(request, accessToken),\n  })\n}\n\nexport function useDeletePersonalAccessToken(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation<void, SynapseClientError, string>({\n    ...options,\n    onSuccess: async (...args) => {\n      if (options?.onSuccess) {\n        options.onSuccess(...args)\n      }\n      await queryClient.invalidateQueries(\n        keyFactory.getPersonalAccessTokensQueryKey(),\n      )\n    },\n    mutationFn: tokenId =>\n      SynapseClient.deletePersonalAccessToken(tokenId, accessToken),\n  })\n}\n","import dayjs from 'dayjs'\nimport React, { useCallback, useState } from 'react'\nimport {\n  AccessTokenRecord,\n  scopeDescriptions,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  Box,\n  Card,\n  IconButton,\n  Stack,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone'\nimport IconSvg from '../../IconSvg/IconSvg'\nimport WarningDialog from '../../SynapseForm/WarningDialog'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { useDeletePersonalAccessToken } from '../../../synapse-queries/user/usePersonalAccessToken'\nimport { noop } from 'lodash-es'\n\ndayjs.extend(relativeTime)\n\nexport type AccessTokenCardProps = {\n  /** Record referring to an access token, not a token itself */\n  accessToken: AccessTokenRecord\n  onDelete?: () => void\n}\n\nexport const EXPIRED_PAT_WARNING =\n  'This token has expired. It no longer works and can only be deleted.'\n\nexport function AccessTokenCard(props: AccessTokenCardProps) {\n  const { accessToken, onDelete = noop } = props\n  const [showModal, setShowModal] = useState(false)\n\n  const isExpired = accessToken.state === 'EXPIRED'\n\n  const { mutate: deleteToken, isLoading } = useDeletePersonalAccessToken({\n    onSuccess: () => {\n      onDelete()\n    },\n    useErrorBoundary: true,\n  })\n\n  const onClickDeleteButton = useCallback(() => {\n    if (isExpired) {\n      // token no longer works, no need for warning/confirmation\n      deleteToken(accessToken.id)\n    } else {\n      setShowModal(true)\n    }\n  }, [accessToken.id, deleteToken, isExpired])\n\n  const warningDialog = (\n    <WarningDialog\n      title={'Confirm Deletion'}\n      content={\n        <>\n          <Typography variant={'body1'}>\n            If you delete this token, any applications using it will stop\n            working. This action cannot be undone.\n          </Typography>\n          <Typography variant={'body1'} fontWeight={'700'}>\n            Are you sure you want to delete this token?\n          </Typography>\n        </>\n      }\n      confirmButtonText={'Delete Token'}\n      onCancel={() => setShowModal(false)}\n      onConfirm={() => {\n        deleteToken(accessToken.id)\n        setShowModal(false)\n      }}\n      confirmButtonColor=\"error\"\n      open={showModal}\n    />\n  )\n\n  return (\n    <Card\n      sx={{\n        my: 2,\n        height: '120px',\n        width: '100%',\n        p: 1.5,\n        pl: 4,\n        backgroundColor: isExpired ? '#fcf8e3' : 'inherit',\n      }}\n    >\n      {warningDialog}\n      <Box\n        display={'flex'}\n        alignItems={'center'}\n        justifyContent={'space-between'}\n        height={'100%'}\n      >\n        <Stack flexGrow={1} gap={1} justifyContent={'space-between'}>\n          <Typography variant={'headline3'} sx={{ fontSize: '16px' }}>\n            {accessToken.name}\n          </Typography>\n          <div>\n            <span>Permissions: </span>\n            {accessToken.scopes.map(scope => {\n              return (\n                <Tooltip\n                  key={scope}\n                  title={\n                    scopeDescriptions[scope as keyof typeof scopeDescriptions]\n                      .description\n                  }\n                >\n                  <Typography\n                    component={'span'}\n                    variant={'smallText1'}\n                    sx={{ mx: 0.25, cursor: 'default', color: 'primary.main' }}\n                  >\n                    {\n                      scopeDescriptions[scope as keyof typeof scopeDescriptions]\n                        .displayName\n                    }\n                  </Typography>\n                </Tooltip>\n              )\n            })}\n          </div>\n          <div>\n            <Typography component={'span'} variant={'smallText1'}>\n              Last used {dayjs(accessToken.lastUsed).fromNow()}\n            </Typography>\n            <Typography\n              component={'span'}\n              variant={'smallText1'}\n              color={'grey.700'}\n            >\n              {' | '}\n            </Typography>\n            <Typography component={'span'} variant={'smallText1'}>\n              Created {dayjs(accessToken.createdOn).fromNow()}\n            </Typography>\n          </div>\n        </Stack>\n        <Box\n          alignSelf={'flex-start'}\n          display={'flex'}\n          gap={1}\n          alignItems={'center'}\n        >\n          {isExpired && (\n            <Tooltip title={EXPIRED_PAT_WARNING} placement={'top'}>\n              <IconButton>\n                <IconSvg\n                  icon=\"warning\"\n                  sx={{ color: 'warning.main', fontSize: 'inherit' }}\n                  wrap={false}\n                />\n              </IconButton>\n            </Tooltip>\n          )}\n          <Tooltip title={'Delete Token'} placement={'top'}>\n            <IconButton\n              disabled={isLoading}\n              color=\"error\"\n              onClick={onClickDeleteButton}\n            >\n              <DeleteTwoToneIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n    </Card>\n  )\n}\n","import React from 'react'\nimport { Stack, Typography } from '@mui/material'\nimport {\n  AccessTokenGenerationRequest,\n  scopeDescriptions,\n} from '@sage-bionetworks/synapse-types'\nimport { CopyToClipboardInput } from '../CopyToClipboardInput/CopyToClipboardInput'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen/LoadingScreen'\nimport { Checkbox } from '../widgets/Checkbox'\nimport { ConfirmationDialog } from '../ConfirmationDialog/ConfirmationDialog'\nimport TextField from '../TextField/TextField'\nimport { useCreatePersonalAccessToken } from '../../synapse-queries/user/usePersonalAccessToken'\nimport { noop } from 'lodash-es'\n\nconst INVALID_INPUT_MSG =\n  'You must provide a token name and at least one permission.'\n\nexport type CreateAccessTokenModalProps = {\n  onClose?: () => void\n  onCreate?: () => void\n}\n\nexport function CreateAccessTokenModal(props: CreateAccessTokenModalProps) {\n  const { onClose = noop, onCreate = noop } = props\n  const [tokenName, setTokenName] = React.useState('')\n  const [viewAccess, setViewAccess] = React.useState(true)\n  const [downloadAccess, setDownloadAccess] = React.useState(false)\n  const [modifyAccess, setModifyAccess] = React.useState(false)\n\n  const [validationError, setValidationError] = React.useState<string | null>(\n    null,\n  )\n\n  const {\n    mutate,\n    isLoading,\n    error: mutationError,\n    data: createdTokenResponse,\n  } = useCreatePersonalAccessToken()\n\n  const handleTokenNameChange = (event: React.ChangeEvent) => {\n    setTokenName((event.target as HTMLInputElement).value)\n  }\n\n  const validateInput = (tokenName: string, access: boolean[]): boolean => {\n    return !!tokenName && access.some(x => x)\n  }\n\n  const onSubmit = () => {\n    if (validateInput(tokenName, [viewAccess, downloadAccess, modifyAccess])) {\n      setValidationError(null)\n\n      const request: AccessTokenGenerationRequest = {\n        scope: [],\n        name: tokenName,\n      }\n      if (viewAccess) request.scope.push('view')\n      if (downloadAccess) request.scope.push('download')\n      if (modifyAccess) request.scope.push('modify')\n\n      mutate(request)\n\n      onCreate()\n    } else {\n      setValidationError(INVALID_INPUT_MSG)\n    }\n  }\n\n  const dialogContent = createdTokenResponse ? (\n    <>\n      <Typography variant={'body1'}>\n        <Typography variant={'body1'} component={'span'} fontWeight={700}>\n          This token will not be able to be retrieved again.\n        </Typography>{' '}\n        If needed, generate a new personal access token, and delete this one.\n      </Typography>\n      <div>\n        <CopyToClipboardInput\n          value={createdTokenResponse.token}\n          inputWidth={'350px'}\n        />\n      </div>\n      <Typography variant={'body1'}>\n        This token grants access to your account functions and should be treated\n        like a password.\n      </Typography>\n    </>\n  ) : (\n    <div>\n      <TextField\n        autoFocus\n        label=\"Token Name\"\n        value={tokenName}\n        onChange={handleTokenNameChange}\n        placeholder=\"e.g. Synapse command line access on my laptop\"\n        sx={{ mb: 2 }}\n      />\n      <Typography variant=\"label\">Token Permissions</Typography>\n      <Stack gap={2} my={1}>\n        <Checkbox\n          label={scopeDescriptions.view.displayName}\n          checked={viewAccess}\n          onChange={() => setViewAccess(!viewAccess)}\n        >\n          <Typography variant={'smallText1'} color={'grey.700'}>\n            {scopeDescriptions.view.description}. Required to use Synapse\n            programmatic clients.\n          </Typography>\n        </Checkbox>\n        <Checkbox\n          label={scopeDescriptions.download.displayName}\n          checked={downloadAccess}\n          onChange={() => setDownloadAccess(!downloadAccess)}\n        >\n          <Typography variant={'smallText1'} color={'grey.700'}>\n            {scopeDescriptions.download.description}\n          </Typography>\n        </Checkbox>\n        <Checkbox\n          label={scopeDescriptions.modify.displayName}\n          checked={modifyAccess}\n          onChange={() => setModifyAccess(!modifyAccess)}\n        >\n          <Typography variant={'smallText1'} color={'grey.700'}>\n            {scopeDescriptions.modify.description}\n          </Typography>\n        </Checkbox>\n      </Stack>\n      {validationError && <ErrorBanner error={validationError} />}\n      {mutationError && <ErrorBanner error={mutationError.reason} />}\n    </div>\n  )\n\n  return (\n    <ConfirmationDialog\n      open={true}\n      title=\"Create New Personal Access Token\"\n      content={isLoading ? loadingScreen : dialogContent}\n      confirmButtonProps={{\n        children: createdTokenResponse ? 'Close' : 'Create Token',\n        variant: createdTokenResponse ? 'outlined' : 'contained',\n      }}\n      hasCancelButton={!createdTokenResponse}\n      onCancel={onClose}\n      onConfirm={\n        createdTokenResponse\n          ? () => onClose()\n          : () => {\n              void onSubmit()\n            }\n      }\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport { Box, Button, Typography } from '@mui/material'\nimport { useGetPersonalAccessTokensInfinite } from '../../synapse-queries/user/usePersonalAccessToken'\nimport { ErrorBanner, SynapseErrorBoundary } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen/LoadingScreen'\nimport { AccessTokenCard } from './AccessTokenCard/AccessTokenCard'\nimport { CreateAccessTokenModal } from './CreateAccessTokenModal'\nimport { AddCircleTwoTone } from '@mui/icons-material'\n\nexport type AccessTokenPageProps = {\n  title: string\n  body: React.ReactNode\n}\n\nexport const AccessTokenPage: React.FunctionComponent<AccessTokenPageProps> = ({\n  title,\n  body,\n}: AccessTokenPageProps) => {\n  const [showCreateTokenModal, setShowCreateTokenModal] = useState(false)\n\n  const {\n    data: infiniteData,\n    isLoading,\n    error,\n    fetchNextPage,\n    hasNextPage,\n  } = useGetPersonalAccessTokensInfinite()\n\n  const tokenRecords = infiniteData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div>\n      <Box display={'flex'} gap={2} justifyContent={'space-between'}>\n        <Box flexGrow={1}>\n          <h1>{title}</h1>\n          {body}\n        </Box>\n        <Box flexShrink={0} alignSelf={'end'}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setShowCreateTokenModal(true)}\n            startIcon={<AddCircleTwoTone />}\n          >\n            Create New Token\n          </Button>\n        </Box>\n      </Box>\n      <SynapseErrorBoundary>\n        {showCreateTokenModal && (\n          <CreateAccessTokenModal\n            onClose={() => setShowCreateTokenModal(false)}\n          />\n        )}\n\n        <div>\n          {!isLoading && !error && tokenRecords.length === 0 && (\n            <Typography variant={'headline2'} m={5} textAlign={'center'}>\n              You currently have no personal access tokens.\n            </Typography>\n          )}\n          <Box maxWidth={'800px'} mx={'auto'} my={2.5}>\n            {tokenRecords.map(accessToken => {\n              return (\n                <AccessTokenCard\n                  key={accessToken.id}\n                  accessToken={accessToken}\n                />\n              )\n            })}\n            {isLoading && loadingScreen}\n            {!isLoading && hasNextPage && !error && (\n              <Box display={'flex'} justifyContent={'flex-end'}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    fetchNextPage()\n                  }}\n                >\n                  Load More\n                </Button>\n              </Box>\n            )}\n          </Box>\n          {error && <ErrorBanner error={error}></ErrorBanner>}\n        </div>\n      </SynapseErrorBoundary>\n    </div>\n  )\n}\n"],"names":["useGetPersonalAccessTokensInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","page","useCreatePersonalAccessToken","queryClient","useQueryClient","useMutation","args","request","useDeletePersonalAccessToken","tokenId","dayjs","relativeTime","EXPIRED_PAT_WARNING","AccessTokenCard","props","onDelete","noop","showModal","setShowModal","useState","isExpired","deleteToken","isLoading","onClickDeleteButton","useCallback","jsxs","Card","jsx","WarningDialog","Fragment","Typography","Box","Stack","scope","Tooltip","scopeDescriptions","IconButton","IconSvg","DeleteTwoToneIcon","INVALID_INPUT_MSG","CreateAccessTokenModal","onClose","onCreate","tokenName","setTokenName","React","viewAccess","setViewAccess","downloadAccess","setDownloadAccess","modifyAccess","setModifyAccess","validationError","setValidationError","mutate","mutationError","createdTokenResponse","handleTokenNameChange","event","validateInput","tokenName2","access","x","onSubmit","dialogContent","CopyToClipboardInput","TextField","Checkbox","ErrorBanner","ConfirmationDialog","loadingScreen","AccessTokenPage","title","body","showCreateTokenModal","setShowCreateTokenModal","infiniteData","error","fetchNextPage","hasNextPage","tokenRecords","Button","AddCircleTwoTone","SynapseErrorBoundary"],"mappings":"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"}