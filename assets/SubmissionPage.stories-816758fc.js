import{l as m}from"./index-1d3e3937.js";import{V as e,d as I,e as _}from"./SynapseClient-5617d165.js";import{g as E,j as S,m as s}from"./MockSubmission-a6ab2321.js";import{M as i}from"./getEndpoint-ac94413e.js";import{g as R}from"./tableQueryHandlers-e2645321.js";import{m as O}from"./mockRejectionReasonsTableQueryResultBundle-59be1fd8.js";import{S as g}from"./SubmissionPage-b3009895.js";import{a as C}from"./userProfileHandlers-b982d32d.js";import"./_commonjsHelpers-de833af9.js";import"./util-1969ce74.js";import"./index-17a77bb8.js";import"./SynapseConstants-6baf84cd.js";import"./OrientationBanner-a1ca5cdb.js";import"./jsx-runtime-9dc53467.js";import"./index-76fb7be0.js";import"./FullWidthAlert-706fe840.js";import"./Alert-c3fe2b05.js";import"./styled-3c6f4d83.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-55b21f7f.js";import"./createSvgIcon-396e3e24.js";import"./Paper-411d859b.js";import"./IconButton-f820fa46.js";import"./ButtonBase-8587e55b.js";import"./emotion-react.browser.esm-5fddd3df.js";import"./TransitionGroupContext-e6fd87c7.js";import"./useForkRef-8feb2ebf.js";import"./assertThisInitialized-081f9914.js";import"./inheritsLoose-c82a83d4.js";import"./useIsFocusVisible-18cd238e.js";import"./Stack-4eda368b.js";import"./extendSxProp-1372051e.js";import"./Box-8faf86fd.js";import"./AlertTitle-aeea0d59.js";import"./Typography-1d068b0b.js";import"./useTheme-e79ecbc0.js";import"./Grow-c431c788.js";import"./isHostComponent-fa76b8d9.js";import"./index-d3ea75b5.js";import"./utils-6fa73630.js";import"./ClickAwayListener-3b20c94f.js";import"./Tooltip-801f2a9c.js";import"./Button-33299b2c.js";import"./InfoTwoTone-b17047a2.js";import"./CheckCircleTwoTone-c37d81c7.js";import"./inputBaseClasses-034b6b96.js";import"./Fade-240af196.js";import"./Link-6ae0d01e.js";import"./_getTag-545f1420.js";import"./_Map-02912bad.js";import"./isArray-5e3f9107.js";import"./StringUtils-2ea3ab4d.js";import"./index-3a31b023.js";import"./dayjs.min-f79c4412.js";import"./index-9d475cdf.js";import"./tiny-invariant-dd7d57d2.js";import"./mockProject-af74cf4c.js";import"./mock_user_profile-82ac8093.js";import"./times-c23b3cf2.js";import"./_baseTimes-8715be3e.js";import"./identity-46f208ab.js";import"./toInteger-8c467ff1.js";import"./isSymbol-7c514724.js";import"./mockWiki-9c90b9c4.js";import"./mock_file_handle-d32900b1.js";import"./uniqueId-4d05949d.js";import"./toString-cc90cb98.js";import"./cloneDeep-0006aa9b.js";import"./_baseClone-5d6e0823.js";import"./_Uint8Array-595ed3dd.js";import"./_initCloneObject-b3d76b79.js";import"./_getAllKeys-70546490.js";import"./DateFormatter-b058ade0.js";import"./timezone-f53425a4.js";import"./useDataAccessSubmission-a75df27f.js";import"./useMutation-0086f62e.js";import"./useInfiniteQuery-7807cef7.js";import"./useAccessRequirements-bfdd3d39.js";import"./useQueries-fa0e18e3.js";import"./useMediaQuery-009aa540.js";import"./sortBy-b77ea840.js";import"./_baseIteratee-bfdf7715.js";import"./_getMatchData-5ace0f87.js";import"./_cacheHas-cc8fa475.js";import"./_setToArray-3d6ec6fd.js";import"./_baseFor-d254fa1e.js";import"./_baseRest-a17404df.js";import"./_overRest-54674ae8.js";import"./_isIterateeCall-984cc862.js";import"./HelpPopover-03c99c80.js";import"./WideButton-2e6b6d5a.js";import"./LoadingScreen-21cf5616.js";import"./Backdrop-989db5e0.js";import"./LinearProgress-c51caf50.js";import"./UserBadge-e0142aa3.js";import"./Menu-fc614fa0.js";import"./index-c71daf5e.js";import"./Modal-748aabbc.js";import"./getScrollbarSize-ac846fe6.js";import"./ownerWindow-2c76219e.js";import"./createChainedFunction-0bab83cf.js";import"./MenuList-b0aba911.js";import"./List-a6975dc7.js";import"./IconSvg-a7217c47.js";import"./ErrorOutlined-6f3ac166.js";import"./GetAppTwoTone-d672483d.js";import"./InfoOutlined-e9da64e0.js";import"./SkeletonTable-dbfcf115.js";import"./Skeleton-131bd473.js";import"./ToastMessage-313b7aae.js";import"./CSSTransition-c744be84.js";import"./hasClass-ec9efd32.js";import"./Divider-94881329.js";import"./dividerClasses-b0ef5b8b.js";import"./MenuItem-4ee45934.js";import"./Card-e26aaef7.js";import"./Avatar-47fe5841.js";import"./useSlot-14db1f32.js";import"./useTeamMembers-d890c5e2.js";import"./RegularExpressions-bc0adf55.js";import"./index-e4fc7078.js";import"./EntityIcon-b8cfc2f7.js";import"./pluralize-9f2b9a2f.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./index.modern-ebb8621a.js";import"./mapValues-a94bd5d1.js";import"./isPlainObject-cb19acc1.js";import"./now-3316c47d.js";import"./ThemesPlot-5e653130.js";import"./ElementWithTooltip-f580727c.js";import"./SynapseTableConstants-5f56c39f.js";import"./index-66c13aa6.js";import"./Icon-1a10b7d2.js";import"./ShowMore-0d3229ca.js";import"./Dropdown-212ebba7.js";import"./ThemeProvider-ab8de9d2.js";import"./createWithBsPrefix-ac5ecfd4.js";import"./SqlFunctions-f7206b75.js";import"./factory-33ef2009.js";import"./pick-e2ff1673.js";import"./_baseIndexOf-c808ca38.js";import"./_baseSlice-cf92e063.js";import"./isPlainObject-9a905694.js";import"./uniq-e671c73d.js";import"./without-9cea2dc4.js";import"./isArrayLikeObject-333fcb04.js";import"./merge-6d426093.js";import"./isNil-ee112436.js";import"./isEqualWith-86a8a0b7.js";import"./useGetEntityHeaders-a5cfd4b8.js";import"./useGetQueryResultBundle-a676e42b.js";import"./useEntity-f56cb1ec.js";import"./InfiniteQueryUtils-54ae7e6b.js";import"./useDownloadList-f35b0c8e.js";import"./use-deep-compare-effect.esm-3f8944c0.js";import"./NoSearchResults-37a4f967.js";import"./NoData-300108e2.js";import"./queryUtils-310ae694.js";import"./LastLoginInfo-502496c2.js";import"./jsx-runtime_commonjs-proxy-00bc9f93.js";import"./isMuiElement-bce4c331.js";import"./DialogTitle-44e2fe08.js";import"./DialogContent-b3bb90d2.js";import"./Dialog-71ea04ac.js";import"./TextField-259737a9.js";import"./InputLabel-fd013c0b.js";import"./useFormControl-41ba3265.js";import"./Select-41068544.js";import"./tslib.es6-9c2726d7.js";import"./lodash-bd8c10bc.js";import"./StandaloneLoginForm-dcbcc7bf.js";import"./LoginFlowBackButton-e7da9906.js";import"./TextField-12f5946f.js";import"./StyledFormControl-003a613e.js";import"./LoginMethodButton-c7f2b443.js";import"./Grid-4f081432.js";import"./RadioGroup-bfe7e0a4.js";import"./UserSearchBoxV2-7ce5437e.js";import"./Select-ce3716e1.esm-2eb91054.js";import"./isNativeReflectConstruct-05c29d01.js";import"./UserOrTeamBadge-34122ede.js";import"./Form-8a372d67.js";import"./Col-9c69cc00.js";import"./FileUpload-241563a3.js";import"./AuthenticatedRequirement-ed74799f.js";import"./RequirementItem-e9a41bcc.js";import"./ConditionalWrapper-28a47e51.js";import"./CheckTwoTone-b1f51a27.js";import"./CertificationRequirement-28fa57c3.js";import"./ValidationRequirement-996fcd3f.js";import"./TwoFactorAuthEnabledRequirement-afbec0a9.js";import"./TwoFactorEnrollmentForm-6e42e951.js";import"./LeftRightPanel-a90477a3.js";import"./EntityLink-2a1e0304.js";import"./ErrorChip-b71597ae.js";import"./Chip-c99cf170.js";import"./ActionRequiredCard-b69d55ee.js";import"./RequestDownloadCard-8d50d2ae.js";import"./Tabs-a234772e.js";import"./QueryCount-aa18c3a6.js";import"./SkeletonButton-007d85cd.js";import"./Checkbox-f25cec3e.js";import"./SelectionCriteriaPill-f4f2e335.js";import"./EnumFacetFilterUI-373a9c5b.js";import"./RangeSlider-ed23f0ac.js";import"./react-sizeme-a86e205b.js";import"./ColorGradient-982494fb.js";import"./colorPalette-c43701fe.js";import"./UpsetPlot-20bb01fb.js";import"./lz-string-8d18d2e5.js";import"./LargeButton-17bb9932.js";import"./IconList-3e6b8787.js";import"./Box-551bafc7.js";import"./LightTooltip-c80b3b5f.js";import"./UserCardList-5ad2eaad.js";import"./SynapseVideo-5f398cba.js";import"./WarningDialog-e9f03b98.js";import"./RejectDataAccessRequestModal-dffd0b3f.js";import"./immutable.es-400ccb6d.js";import"./FormControlLabel-1038ccd1.js";import"./mockEntity-93e378c4.js";import"./mockFileEntity-448f2868.js";const ji={title:"Governance/SubmissionPage",component:g,parameters:{stack:"mock"}},p={name:"SubmissionPage",parameters:{msw:{handlers:[...C(i),...E(i),m.rest.get(`${i}${e(":id")}`,async(o,t,r)=>{const d=S.find(u=>o.params.id===u.id);return t(r.status(200),r.json(d))}),m.rest.get(`${i}${I(":id")}`,async(o,t,r)=>t(r.status(200),r.json(s))),m.rest.get(`${i}${_(":id")}`,async(o,t,r)=>t(r.status(200),r.json({wikiPageId:123,ownerObjectId:s.id,ownerObjectType:"ACCESS_REQUIREMENT"}))),m.rest.get(`${i}/repo/v1/accessRequirement/:id/acl`,async(o,t,r)=>t(r.status(200),r.json({id:o.id,creationDate:"2022-05-20T14:32:31.665Z",etag:"f4fbd4f2-751d-40dd-9421-1d2693231217",resourceAccess:[{principalId:3350396,accessType:["REVIEW_SUBMISSIONS"]}]}))),...R(O),m.rest.put(`${i}${e(":id")}`,async(o,t,r)=>t(r.status(201),r.json(await o.json())))]}},args:{submissionId:1}};var n,a,c;p.parameters={...p.parameters,docs:{...(n=p.parameters)==null?void 0:n.docs,source:{originalSource:`{
  name: 'SubmissionPage',
  parameters: {
    msw: {
      handlers: [...getUserProfileHandlers(MOCK_REPO_ORIGIN), ...getWikiHandlers(MOCK_REPO_ORIGIN),
      // Return submission based on ID
      rest.get(\`\${MOCK_REPO_ORIGIN}\${DATA_ACCESS_SUBMISSION_BY_ID(':id')}\`, async (req, res, ctx) => {
        const submission = mockSubmissions.find(submission => req.params.id === submission.id);
        return res(ctx.status(200), ctx.json(submission));
      }),
      // Return a mocked access requirement
      rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_BY_ID(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json(mockManagedACTAccessRequirement));
      }), rest.get(\`\${MOCK_REPO_ORIGIN}\${ACCESS_REQUIREMENT_WIKI_PAGE_KEY(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json({
          wikiPageId: 123,
          ownerObjectId: mockManagedACTAccessRequirement.id,
          ownerObjectType: 'ACCESS_REQUIREMENT'
        }));
      }), rest.get(\`\${MOCK_REPO_ORIGIN}/repo/v1/accessRequirement/:id/acl\`, async (req, res, ctx) => {
        return res(ctx.status(200), ctx.json({
          id: req.id,
          creationDate: '2022-05-20T14:32:31.665Z',
          etag: 'f4fbd4f2-751d-40dd-9421-1d2693231217',
          resourceAccess: [{
            principalId: 3350396,
            accessType: ['REVIEW_SUBMISSIONS']
          }]
        }));
      }), ...getHandlersForTableQuery(mockRejectionReasonsTableQueryResultBundle), rest.put(\`\${MOCK_REPO_ORIGIN}\${DATA_ACCESS_SUBMISSION_BY_ID(':id')}\`, async (req, res, ctx) => {
        return res(ctx.status(201), ctx.json(await req.json()));
      })]
    }
  },
  args: {
    submissionId: 1
  }
}`,...(c=(a=p.parameters)==null?void 0:a.docs)==null?void 0:c.source}}};const Ni=["Demo"];export{p as Demo,Ni as __namedExportsOrder,ji as default};
